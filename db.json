{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/imgs/image-20230913154437526.png","path":"imgs/image-20230913154437526.png","modified":0,"renderable":0},{"_id":"source/imgs/image-20230913154510439.png","path":"imgs/image-20230913154510439.png","modified":0,"renderable":0},{"_id":"source/imgs/image-20230913154524492.png","path":"imgs/image-20230913154524492.png","modified":0,"renderable":0},{"_id":"source/imgs/image-20230913154559571.png","path":"imgs/image-20230913154559571.png","modified":0,"renderable":0},{"_id":"source/imgs/image-20230913161638961.png","path":"imgs/image-20230913161638961.png","modified":0,"renderable":0},{"_id":"source/imgs/image-20230913161842174.png","path":"imgs/image-20230913161842174.png","modified":0,"renderable":0},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/00-rust学习网站.md","hash":"ef43232f54b328d6331469557c4e0102a30dd417","modified":1715754396420},{"_id":"source/_posts/01-rust环境搭建.md","hash":"4c0f2bf37246a6be0f2a1b4c50da3722a42cc2a9","modified":1714288418745},{"_id":"source/_posts/03-rust复合类型.md","hash":"a685e502e9b04520bf35f50947f30836ed21c045","modified":1714288418746},{"_id":"source/_posts/02-rust基本类型.md","hash":"dd43f2a740d88aa19ed009ea66180206718fbe9e","modified":1714288418746},{"_id":"source/_posts/Hexo在多台电脑上提交和更新.md","hash":"e12a758b512c7cbc53fdca37286bdd057047f592","modified":1714288676763},{"_id":"source/_posts/cpufreq.md","hash":"67c7dd7ad6bf22963d7b933905e6d33cf55d184d","modified":1714295240119},{"_id":"source/_posts/github+hexo博客搭建.md","hash":"85bd7eb698db516682385515b622694385fc8e14","modified":1714288418769},{"_id":"source/_posts/hello-world.md","hash":"abfe52bd7857c6997069eef12c9cc7bf35918421","modified":1714288418770},{"_id":"source/imgs/image-20230913154437526.png","hash":"9693caf3cc21eae7a101d17fa3773fd662a67458","modified":1714288418811},{"_id":"source/imgs/image-20230913154524492.png","hash":"93e1edcb969e6ab1b921e40c4181a41a35df6626","modified":1714288418813},{"_id":"source/imgs/image-20230913154510439.png","hash":"51bd7ce03a392ca543c2600eed536a3e681fe4e1","modified":1714288418812},{"_id":"source/imgs/image-20230913154559571.png","hash":"ffeb7e12c2271cca2c1e9e4bf26b513add8096fd","modified":1714288418814},{"_id":"source/imgs/image-20230913161842174.png","hash":"618c9c7b1bf25a26b97352bbd1b5b74d8a0f99e1","modified":1714288418816},{"_id":"source/imgs/image-20230913161638961.png","hash":"14a58ce37072ca0e819bae203a82aae720546ebc","modified":1714288418815},{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1714288418819},{"_id":"themes/3-hexo/_config.yml","hash":"cda697611a8a69f383644cfa5c1764f57e5ac812","modified":1715755960145},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1714288418820},{"_id":"themes/3-hexo/languages/en.yml","hash":"53ae29ae1237fc7822df85a6d2f8da6f0078625e","modified":1714288418822},{"_id":"themes/3-hexo/README.md","hash":"d2c42534ceabcb7cd2e58ed994bf7d6f734d1f3b","modified":1714288418820},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"d2c6d86fe2ff03e6ee9bbc16dff8efe5b47ac297","modified":1714288418823},{"_id":"themes/3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1714288418839},{"_id":"themes/3-hexo/layout/post.ejs","hash":"4abd16c0f5e3f51103d23b73710d695dc7fdc5d2","modified":1714288418840},{"_id":"themes/3-hexo/layout/indexs.md","hash":"9aba38b192c510e94f34b37347f120475604a088","modified":1714288418839},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"516844c4a0e13d6773f6029849f51c59613b6f69","modified":1714288418825},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1714288418825},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1714288418826},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0e662956cbfcaf6c1666e5c30a1fe03461de685e","modified":1714288418818},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1714288418831},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1714288418832},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1714288418834},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ed479aa9affee3b02a76da06de45a7c40a97a706","modified":1714288418833},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"a734c26d86da6697003ed27672c1b9b82b216c82","modified":1714288418834},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"76768204853a8a5e030a96d605a247f9686cf994","modified":1714288418835},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1714288418836},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1714288418836},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"cbad17074f7a44520b4c7dad5a515d6aaf5e1e14","modified":1714288418837},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"e205f9bb61fd4403d24d863693d4a34ea31b8539","modified":1714288418837},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1714288418838},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1714288418838},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1714288418856},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1714288418869},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1714288418867},{"_id":"themes/3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1714288418868},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1714288418871},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1714288418871},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1714288418873},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1714288418873},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1714288418872},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1714288418881},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1714288418882},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1714288418830},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1714288418883},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1714288418884},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1714288418829},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1714288418830},{"_id":"themes/3-hexo/source/js/script.js","hash":"61e8ba1228d8441144fa7a655aa02ec546bd1f02","modified":1714288418883},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1714288418827},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"c76773b96860940083baf16470b7b80ac098e645","modified":1714288418831},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1714288418843},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1714288418842},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1714288418841},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1714288418828},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"d35df7f5e68880d1f1ebec541b816f8257fd42cb","modified":1714288418844},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1714288418843},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1714288418846},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1714288418844},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"36b47f4221e9bccae8e6f1685ea8942e601766d6","modified":1714288418845},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1714288418846},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1714288418857},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"0dd8d208081b92e05d6db3361743c520a2816828","modified":1714288418847},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1714288418858},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1714288418860},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1714288418859},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1714288418858},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1714288418859},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1714288418863},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1714288418861},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1714288418864},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1714288418861},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1714288418862},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1714288418864},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1714288418866},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1714288418863},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1714288418867},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1714288418848},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1714288418851},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1714288418851},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1714288418865},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1714288418849},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1714288418850},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1714288418852},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1714288418853},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1714288418854},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1714288418855},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1714288418854},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1714288418875},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1714288418881},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1714288418879},{"_id":"public/search.xml","hash":"155d59ff5e26f92eefcafb7fe121dc1493fd1ce0","modified":1715756049791},{"_id":"public/2024/04/28/cpufreq/index.html","hash":"fc0ee37e13e596d8e21ef8057c7e0fc711686a76","modified":1715756049791},{"_id":"public/2023/09/13/Hexo在多台电脑上提交和更新/index.html","hash":"540e8503a4cacbe03fc7723fc49dc1d5eba773ba","modified":1715756049791},{"_id":"public/2023/08/28/03-rust复合类型/index.html","hash":"f05b268efd859ba8c9cb835d152995e061c7dd25","modified":1715756049791},{"_id":"public/2023/08/26/02-rust基本类型/index.html","hash":"688f6c009cd2ff0af6c800bccdedf162643fdfd3","modified":1715756049791},{"_id":"public/2023/08/26/01-rust环境搭建/index.html","hash":"b6803d76a987b60df8b8240428cdb353f53a4420","modified":1715756049791},{"_id":"public/2023/08/26/00-rust学习网站/index.html","hash":"d5ec97874cdb63216d1e7e84551acd0859f814e1","modified":1715756049791},{"_id":"public/2023/08/25/github+hexo博客搭建/index.html","hash":"4965b2a1abd1b5d16f10240febc5e2fb2708a70f","modified":1715756049791},{"_id":"public/2023/08/25/hello-world/index.html","hash":"5d2c230dddfea0a572fca917959bc1bba389a29d","modified":1715756049791},{"_id":"public/archives/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2023/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2023/08/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2023/09/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2024/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2024/04/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/rust/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/test/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/学习网站/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/kernel/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/power/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/rust/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/rust环境搭建/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/test/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/cpufreq/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/rust基本类型/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/rust复合类型/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/imgs/image-20230913154510439.png","hash":"51bd7ce03a392ca543c2600eed536a3e681fe4e1","modified":1714297843742},{"_id":"public/imgs/image-20230913154559571.png","hash":"ffeb7e12c2271cca2c1e9e4bf26b513add8096fd","modified":1714297843742},{"_id":"public/imgs/image-20230913154524492.png","hash":"93e1edcb969e6ab1b921e40c4181a41a35df6626","modified":1714297843742},{"_id":"public/imgs/image-20230913154437526.png","hash":"9693caf3cc21eae7a101d17fa3773fd662a67458","modified":1714297843742},{"_id":"public/imgs/image-20230913161842174.png","hash":"618c9c7b1bf25a26b97352bbd1b5b74d8a0f99e1","modified":1714297843742},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1714297843742},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1714297843742},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1714297843742},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1714297843742},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1714297843742},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1714297843742},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1714297843742},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1714297843742},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1714297843742},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1714297843742},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1714297843742},{"_id":"public/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1714297843742},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1714297843742},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1714297843742},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1714297843742},{"_id":"public/imgs/image-20230913161638961.png","hash":"14a58ce37072ca0e819bae203a82aae720546ebc","modified":1714297843742},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1714297843742},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1714297843742},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1714297843742},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1714297843742},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1714297843742},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1714297843742},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1714297843742},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1714297843742},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1714297843742},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1714297843742},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1714297843742},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1714297843742},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1714297843742},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1714297843742},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1714297843742},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1714297843742},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1714297843742},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1714297843742},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1714297843742},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1714297843742},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1714297843742},{"_id":"public/css/style.css","hash":"c7adbb2af0e65ecd85f8c06851f34d377d4b834c","modified":1714297843742},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1714297843742},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1714297843742},{"_id":"public/js/script.js","hash":"61e8ba1228d8441144fa7a655aa02ec546bd1f02","modified":1714297843742},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1714297843742},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1714297843742},{"_id":"public/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1714297843742},{"_id":"source/_posts/uboot-fdt.md","hash":"000f5314305a9fa5cc319b3ea7d6d978289b2a53","modified":1715754303532},{"_id":"source/_posts/OSTEP-40-文件系统实现.md","hash":"454c27352e2830ccfab8138969d18de95f9ec800","modified":1715754500891},{"_id":"source/_posts/linux块设备驱动.md","hash":"b8a1c65e95a7601d9b1ab7232a0cbfb5ae11b13b","modified":1715754470467},{"_id":"source/back_posts/00-rust学习网站.md","hash":"500dbe6703021598b2540409a0ba6214218c6224","modified":1715753468946},{"_id":"source/back_posts/02-rust基本类型.md","hash":"dd43f2a740d88aa19ed009ea66180206718fbe9e","modified":1715753468980},{"_id":"source/back_posts/03-rust复合类型.md","hash":"a685e502e9b04520bf35f50947f30836ed21c045","modified":1715753468981},{"_id":"source/back_posts/01-rust环境搭建.md","hash":"4c0f2bf37246a6be0f2a1b4c50da3722a42cc2a9","modified":1715753468969},{"_id":"source/back_posts/Hexo在多台电脑上提交和更新.md","hash":"e12a758b512c7cbc53fdca37286bdd057047f592","modified":1715753468981},{"_id":"source/back_posts/OSTEP-40-文件系统实现.md","hash":"dbd3f4f4675948185f284fa0d0242db82c715cfc","modified":1715753468982},{"_id":"source/back_posts/cpufreq.md","hash":"67c7dd7ad6bf22963d7b933905e6d33cf55d184d","modified":1715753468989},{"_id":"source/back_posts/github+hexo博客搭建.md","hash":"85bd7eb698db516682385515b622694385fc8e14","modified":1715753468990},{"_id":"source/back_posts/linux块设备驱动.md","hash":"86323d12a2c1fd3ebbbaa19e899ff55db6c6be8a","modified":1715753468991},{"_id":"source/back_posts/uboot之fdt.md","hash":"4e5aa13f6525b5806f06572124fd91a69e46222a","modified":1715753468992},{"_id":"source/back_posts/hello-world.md","hash":"abfe52bd7857c6997069eef12c9cc7bf35918421","modified":1715753468991},{"_id":"public/back_posts/02-rust基本类型.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/03-rust复合类型.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/cpufreq.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/01-rust环境搭建.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/github+hexo博客搭建.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/hello-world.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/Hexo在多台电脑上提交和更新.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/00-rust学习网站.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715753665451},{"_id":"public/back_posts/linux块设备驱动.html","hash":"92c5dd0aac563bae9965881456b75ffe0bd7191e","modified":1715756049791},{"_id":"public/back_posts/OSTEP-40-文件系统实现.html","hash":"a0c362b815117a5c5bcd7bef96181975fb856e51","modified":1715756049791},{"_id":"public/back_posts/uboot之fdt.html","hash":"ea9023f8312a145163e937fac8ac1b3518c55fef","modified":1715756049791},{"_id":"public/2024/05/15/uboot-fdt/index.html","hash":"b45e62ab6025c01b0d35f0aab1ea2f1c0288e49f","modified":1715754726255},{"_id":"public/2024/05/15/linux块设备驱动/index.html","hash":"a4b89b703bdae8e886367625233bbe0c4a8b2b1f","modified":1715754726255},{"_id":"public/2024/05/06/OSTEP-40-文件系统实现/index.html","hash":"afdb3efa53aa5268ec6ec038c5f956af4cac9685","modified":1715754112053},{"_id":"public/archives/page/2/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/archives/2024/05/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/page/2/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/2024/05/15/OSTEP-40-文件系统实现/index.html","hash":"ee5d6ebf7e825f29064ded1e4f562f8b771c7843","modified":1715754726255},{"_id":"source/_posts/U-Boot-fdt-GPT.md","hash":"4b6af68d08a516b2460136c6ee1e564bf62f6274","modified":1715755822548},{"_id":"source/_posts/OSTEP-40-VSFS.md","hash":"e72a9f32ba2fa96b4f7d5ff4c3a4b2bea60cf516","modified":1715755972721},{"_id":"source/_posts/linux-block.md","hash":"2addf204e4bb8415357f5714032592f65022de7e","modified":1715755916921},{"_id":"public/2024/05/15/OSTEP-40-VSFS/index.html","hash":"d589f045b2c423bf12e185b9509659e64f30e669","modified":1715756049791},{"_id":"public/2024/05/15/U-Boot-fdt-GPT/index.html","hash":"29daa2c2e11c0bb70a36cb525372fe15e434bdc3","modified":1715756049791},{"_id":"public/2024/05/15/linux-block/index.html","hash":"da31aefb5aec8bafdaf6ead844eb8dc7f6fc3c0e","modified":1715756049791},{"_id":"public/categories/OSTEP/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/linux/index.html","hash":"6e861d6ec883b0a74b061167ca3830acebe62c56","modified":1715755545023},{"_id":"public/tags/block/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/uboot/index.html","hash":"6e861d6ec883b0a74b061167ca3830acebe62c56","modified":1715755545023},{"_id":"public/tags/fdt/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/rk3588/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/GPT/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/uboot/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/categories/driver/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791},{"_id":"public/tags/vsfs/index.html","hash":"7b9c5e2f38027f4f851b90b3b4d3fd3a2d83ea8e","modified":1715756049791}],"Category":[{"name":"rust","_id":"clvjcoaap0002r9w0crcqdq03"},{"name":"test","_id":"clvjcoaav000br9w04s5fhod2"},{"name":"kernel","_id":"clvjcoaax000ir9w04u7q98wg"},{"name":"OSTEP","_id":"clw7gjvtt00024zw0fh4pclyx"},{"name":"linux","_id":"clw7gjvtw00054zw09m1y49ox"},{"name":"uboot","_id":"clw7gupas000164w0bopbhhya"},{"name":"driver","_id":"clw7gupat000364w0drn50ao5"}],"Data":[],"Page":[{"title":"02-rust基本类型","date":"2023-08-26T13:17:00.000Z","categories":["rust"],"tags":["rust基本类型","rust"],"_content":"\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","source":"back_posts/02-rust基本类型.md","raw":"---\ntitle: 02-rust基本类型\ndate: 2023-08-26 21:17:00\ncategories:\n- rust\ntags:\n- rust基本类型\n- rust\n\n---\n\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","updated":"2024-05-15T06:11:08.980Z","path":"back_posts/02-rust基本类型.html","comments":1,"layout":"page","_id":"clw7fflkf0000x2w0001j3j23","content":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n"},{"title":"03-rust复合类型","date":"2023-08-28T13:58:27.000Z","categories":["rust"],"tags":["rust复合类型","rust"],"_content":"\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n# 3. 元组\n# 4. test\n\n待续。。。\n","source":"back_posts/03-rust复合类型.md","raw":"---\ntitle: 03-rust复合类型\ndate: 2023-08-28 21:58:27\ncategories:\n- rust\ntags:\n- rust复合类型\n- rust\n---\n\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n# 3. 元组\n# 4. test\n\n待续。。。\n","updated":"2024-05-15T06:11:08.981Z","path":"back_posts/03-rust复合类型.html","comments":1,"layout":"page","_id":"clw7fflkn0002x2w069iu77y8","content":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><h1 id=\"3-元组\"><a href=\"#3-元组\" class=\"headerlink\" title=\"3. 元组\"></a>3. 元组</h1><h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4. test\"></a>4. test</h1><p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><h1 id=\"3-元组\"><a href=\"#3-元组\" class=\"headerlink\" title=\"3. 元组\"></a>3. 元组</h1><h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4. test\"></a>4. test</h1><p>待续。。。</p>\n"},{"title":"01-rust环境搭建","date":"2023-08-26T09:03:59.000Z","categories":["rust"],"tags":["rust环境搭建","rust"],"_content":"\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","source":"back_posts/01-rust环境搭建.md","raw":"---\ntitle: 01-rust环境搭建\ndate: 2023-08-26 17:03:59\ncategories:\n- rust\ntags:\n- rust环境搭建\n- rust\n---\n\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","updated":"2024-05-15T06:11:08.969Z","path":"back_posts/01-rust环境搭建.html","comments":1,"layout":"page","_id":"clw7fflkp0004x2w09qqu8rpq","content":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"cpufreq","date":"2024-04-28T09:04:13.000Z","categories":["kernel"],"tags":["power","cpufreq"],"_content":"\n[toc]\n\n# cpufreq\n\n\n\nCPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：\n\n- cpufreq driver\n- cpufreq framework (core)\n- cpufreq governor\n\n一些基本概念：\n\nP-state: voltage and frequency point\n\n总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。\n\n另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。\n\n下面分开来看每个部分。\n\n## Driver\n\n\n\nCpufreq Driver主要负责底层调频的操作，核心是实现 `cpufreq_dirver` 对象，并通过 `cpufreq_register_driver` 将驱动注册到系统，供core部分使用。\n\n其中，最核心的几个回调包括：\n\n- online: hotplug callback\n- offline: hotplug callback\n- target_index: set freq\n- set_boost: enter into boost mode\n\n以 `mediatek-cpufreq-hw.c` 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。\n\ndb845c使用的 `qcom-cpufreq-hw.c` 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。\n\n\\* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。\n\n## Core\n\n\n\nCore部分核心文件是 `/drivers/cpufreq/cpufreq.c`\n\n这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。\n\n`cpufreq_register_driver` (cpufreq_driver* cpufreq_driver)\n\n`cpufreq_register_governor` (cpufreq_governor_list)\n\n`cpufreq_register_notifier` (cpufreq_transition_notifier_list)\n\n`cpufreq_policy_alloc` (cpufreq_policy* PERCPU:cpufreq_cpu_data)\n\n`cpufreq_policy` 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。\n\n每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（`cpufreq_cpu_data`）\n\nMainflow：\n\n1、cpufreq driver注册\n\n2、governor注册（每个policy初始化自己的governor）\n\n3、cpu hotplug state: \"cpufreq:online\"，`cpuhp_cpufreq_online`、`cpuhp_cpufreq_offline`，创建出percpu policy，绑定driver、governor\n\n4、向sysfs创建节点，提供功能\n\n5、governor开始工作，通过 `__cpufreq_driver_target` 进行调频。\n\n- Qos是调频投票机制，用来实现max_freq、min_freq limitation。(`cpufreq_notifier_min` `cpufreq_notifier_max`)，在其他module有需求投票后，freq constrants会被更新。\n\n## Sysfs\n\n\n\n```\n/sys/devices/system/cpu/cpu0/cpufreq/policyX\nscaling_driver\t\t\tr\t# cpufreq driver name\naffected_cpus\t\t\tr\t# cpu\nrelated_cpus\t\t\tr\t# <?>\nscaling_cur_freq\t\trw\t# cur freq\nscaling_min_freq\t\trw\t# min freq limit\nscaling_max_freq\t\trw\t# max freq limit\nscaling_governor\t\trw\t# selected governor\nscaling_available_governors\tr\t# available governors\nscaling_setspeed\t\tr\t# <not supported>\ncpuinfo_min_freq\t\tr\t# hardware min freq\ncpuinfo_max_freq\t\tr\t# hardware max freq\ncpuinfo_transition_latency\tr\t# hardware latency\n```\n\n\n\n## Governors\n\n\n\nGovernor负责从系统收集信息，并触发调频动作。\n\n**powersave**\n\nalways lowest frequency\n\n**performance**\n\nalways highest frequency\n\n**schedutil**\n\nuses CPU utilization data from scheduler to determine target frequence\n\n待完成\n\n**userspace**\n\nallow user space set the frequency\n\n**ondemand**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target by CPU load, 0->min, 100->max\n\n**conservative**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target step by step, up_threshold->up, down_threshold->down\n\n## Files\n\n\n\n```\n- /drivers/cpufreq/cpufreq.c\n- /drivers/cpufreq/cpufreq-dt.c\n- /drivers/cpufreq/cpufreq_stats.c\n- /drivers/cpufreq/cpufreq_conservative.c\n- /drivers/cpufreq/cpufreq_governor.c\n- /drivers/cpufreq/cpufreq_ondemand.c\n- /drivers/cpufreq/cpufreq_powersave.c\n- /drivers/cpufreq/cpufreq_performance.c\n- /drivers/cpufreq/cpufreq_userspace.c\n- /kernel/sched/cpufreq_schedutil.c\n- /kernel/power/qos.c\n```\n\n\n\n## Reference\n\n\n\nhttps://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\n\nhttps://docs.kernel.org/scheduler/schedutil.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_overview.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_driver.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_core.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_governor.html","source":"back_posts/cpufreq.md","raw":"---\ntitle: cpufreq\ndate: 2024-04-28 17:04:13\ncategories:\n- kernel\ntags:\n- power\n- cpufreq\n---\n\n[toc]\n\n# cpufreq\n\n\n\nCPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：\n\n- cpufreq driver\n- cpufreq framework (core)\n- cpufreq governor\n\n一些基本概念：\n\nP-state: voltage and frequency point\n\n总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。\n\n另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。\n\n下面分开来看每个部分。\n\n## Driver\n\n\n\nCpufreq Driver主要负责底层调频的操作，核心是实现 `cpufreq_dirver` 对象，并通过 `cpufreq_register_driver` 将驱动注册到系统，供core部分使用。\n\n其中，最核心的几个回调包括：\n\n- online: hotplug callback\n- offline: hotplug callback\n- target_index: set freq\n- set_boost: enter into boost mode\n\n以 `mediatek-cpufreq-hw.c` 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。\n\ndb845c使用的 `qcom-cpufreq-hw.c` 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。\n\n\\* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。\n\n## Core\n\n\n\nCore部分核心文件是 `/drivers/cpufreq/cpufreq.c`\n\n这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。\n\n`cpufreq_register_driver` (cpufreq_driver* cpufreq_driver)\n\n`cpufreq_register_governor` (cpufreq_governor_list)\n\n`cpufreq_register_notifier` (cpufreq_transition_notifier_list)\n\n`cpufreq_policy_alloc` (cpufreq_policy* PERCPU:cpufreq_cpu_data)\n\n`cpufreq_policy` 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。\n\n每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（`cpufreq_cpu_data`）\n\nMainflow：\n\n1、cpufreq driver注册\n\n2、governor注册（每个policy初始化自己的governor）\n\n3、cpu hotplug state: \"cpufreq:online\"，`cpuhp_cpufreq_online`、`cpuhp_cpufreq_offline`，创建出percpu policy，绑定driver、governor\n\n4、向sysfs创建节点，提供功能\n\n5、governor开始工作，通过 `__cpufreq_driver_target` 进行调频。\n\n- Qos是调频投票机制，用来实现max_freq、min_freq limitation。(`cpufreq_notifier_min` `cpufreq_notifier_max`)，在其他module有需求投票后，freq constrants会被更新。\n\n## Sysfs\n\n\n\n```\n/sys/devices/system/cpu/cpu0/cpufreq/policyX\nscaling_driver\t\t\tr\t# cpufreq driver name\naffected_cpus\t\t\tr\t# cpu\nrelated_cpus\t\t\tr\t# <?>\nscaling_cur_freq\t\trw\t# cur freq\nscaling_min_freq\t\trw\t# min freq limit\nscaling_max_freq\t\trw\t# max freq limit\nscaling_governor\t\trw\t# selected governor\nscaling_available_governors\tr\t# available governors\nscaling_setspeed\t\tr\t# <not supported>\ncpuinfo_min_freq\t\tr\t# hardware min freq\ncpuinfo_max_freq\t\tr\t# hardware max freq\ncpuinfo_transition_latency\tr\t# hardware latency\n```\n\n\n\n## Governors\n\n\n\nGovernor负责从系统收集信息，并触发调频动作。\n\n**powersave**\n\nalways lowest frequency\n\n**performance**\n\nalways highest frequency\n\n**schedutil**\n\nuses CPU utilization data from scheduler to determine target frequence\n\n待完成\n\n**userspace**\n\nallow user space set the frequency\n\n**ondemand**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target by CPU load, 0->min, 100->max\n\n**conservative**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target step by step, up_threshold->up, down_threshold->down\n\n## Files\n\n\n\n```\n- /drivers/cpufreq/cpufreq.c\n- /drivers/cpufreq/cpufreq-dt.c\n- /drivers/cpufreq/cpufreq_stats.c\n- /drivers/cpufreq/cpufreq_conservative.c\n- /drivers/cpufreq/cpufreq_governor.c\n- /drivers/cpufreq/cpufreq_ondemand.c\n- /drivers/cpufreq/cpufreq_powersave.c\n- /drivers/cpufreq/cpufreq_performance.c\n- /drivers/cpufreq/cpufreq_userspace.c\n- /kernel/sched/cpufreq_schedutil.c\n- /kernel/power/qos.c\n```\n\n\n\n## Reference\n\n\n\nhttps://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\n\nhttps://docs.kernel.org/scheduler/schedutil.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_overview.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_driver.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_core.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_governor.html","updated":"2024-05-15T06:11:08.989Z","path":"back_posts/cpufreq.html","comments":1,"layout":"page","_id":"clw7fflkq0006x2w02d4x52gy","content":"<p>[toc]</p>\n<h1 id=\"cpufreq\"><a href=\"#cpufreq\" class=\"headerlink\" title=\"cpufreq\"></a>cpufreq</h1><p>CPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：</p>\n<ul>\n<li>cpufreq driver</li>\n<li>cpufreq framework (core)</li>\n<li>cpufreq governor</li>\n</ul>\n<p>一些基本概念：</p>\n<p>P-state: voltage and frequency point</p>\n<p>总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。</p>\n<p>另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。</p>\n<p>下面分开来看每个部分。</p>\n<h2 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h2><p>Cpufreq Driver主要负责底层调频的操作，核心是实现 <code>cpufreq_dirver</code> 对象，并通过 <code>cpufreq_register_driver</code> 将驱动注册到系统，供core部分使用。</p>\n<p>其中，最核心的几个回调包括：</p>\n<ul>\n<li>online: hotplug callback</li>\n<li>offline: hotplug callback</li>\n<li>target_index: set freq</li>\n<li>set_boost: enter into boost mode</li>\n</ul>\n<p>以 <code>mediatek-cpufreq-hw.c</code> 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。</p>\n<p>db845c使用的 <code>qcom-cpufreq-hw.c</code> 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。</p>\n<p>* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。</p>\n<h2 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h2><p>Core部分核心文件是 <code>/drivers/cpufreq/cpufreq.c</code></p>\n<p>这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。</p>\n<p><code>cpufreq_register_driver</code> (cpufreq_driver* cpufreq_driver)</p>\n<p><code>cpufreq_register_governor</code> (cpufreq_governor_list)</p>\n<p><code>cpufreq_register_notifier</code> (cpufreq_transition_notifier_list)</p>\n<p><code>cpufreq_policy_alloc</code> (cpufreq_policy* PERCPU:cpufreq_cpu_data)</p>\n<p><code>cpufreq_policy</code> 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。</p>\n<p>每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（<code>cpufreq_cpu_data</code>）</p>\n<p>Mainflow：</p>\n<p>1、cpufreq driver注册</p>\n<p>2、governor注册（每个policy初始化自己的governor）</p>\n<p>3、cpu hotplug state: “cpufreq:online”，<code>cpuhp_cpufreq_online</code>、<code>cpuhp_cpufreq_offline</code>，创建出percpu policy，绑定driver、governor</p>\n<p>4、向sysfs创建节点，提供功能</p>\n<p>5、governor开始工作，通过 <code>__cpufreq_driver_target</code> 进行调频。</p>\n<ul>\n<li>Qos是调频投票机制，用来实现max_freq、min_freq limitation。(<code>cpufreq_notifier_min</code> <code>cpufreq_notifier_max</code>)，在其他module有需求投票后，freq constrants会被更新。</li>\n</ul>\n<h2 id=\"Sysfs\"><a href=\"#Sysfs\" class=\"headerlink\" title=\"Sysfs\"></a>Sysfs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sys/devices/system/cpu/cpu0/cpufreq/policyX</span><br><span class=\"line\">scaling_driver\t\t\tr\t# cpufreq driver name</span><br><span class=\"line\">affected_cpus\t\t\tr\t# cpu</span><br><span class=\"line\">related_cpus\t\t\tr\t# &lt;?&gt;</span><br><span class=\"line\">scaling_cur_freq\t\trw\t# cur freq</span><br><span class=\"line\">scaling_min_freq\t\trw\t# min freq limit</span><br><span class=\"line\">scaling_max_freq\t\trw\t# max freq limit</span><br><span class=\"line\">scaling_governor\t\trw\t# selected governor</span><br><span class=\"line\">scaling_available_governors\tr\t# available governors</span><br><span class=\"line\">scaling_setspeed\t\tr\t# &lt;not supported&gt;</span><br><span class=\"line\">cpuinfo_min_freq\t\tr\t# hardware min freq</span><br><span class=\"line\">cpuinfo_max_freq\t\tr\t# hardware max freq</span><br><span class=\"line\">cpuinfo_transition_latency\tr\t# hardware latency</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Governors\"><a href=\"#Governors\" class=\"headerlink\" title=\"Governors\"></a>Governors</h2><p>Governor负责从系统收集信息，并触发调频动作。</p>\n<p><strong>powersave</strong></p>\n<p>always lowest frequency</p>\n<p><strong>performance</strong></p>\n<p>always highest frequency</p>\n<p><strong>schedutil</strong></p>\n<p>uses CPU utilization data from scheduler to determine target frequence</p>\n<p>待完成</p>\n<p><strong>userspace</strong></p>\n<p>allow user space set the frequency</p>\n<p><strong>ondemand</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target by CPU load, 0-&gt;min, 100-&gt;max</p>\n<p><strong>conservative</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target step by step, up_threshold-&gt;up, down_threshold-&gt;down</p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- /drivers/cpufreq/cpufreq.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq-dt.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_stats.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_conservative.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_governor.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_ondemand.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_powersave.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_performance.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_userspace.c</span><br><span class=\"line\">- /kernel/sched/cpufreq_schedutil.c</span><br><span class=\"line\">- /kernel/power/qos.c</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\">https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html</a></p>\n<p><a href=\"https://docs.kernel.org/scheduler/schedutil.html\">https://docs.kernel.org/scheduler/schedutil.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_overview.html\">http://www.wowotech.net/pm_subsystem/cpufreq_overview.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_driver.html\">http://www.wowotech.net/pm_subsystem/cpufreq_driver.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_core.html\">http://www.wowotech.net/pm_subsystem/cpufreq_core.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_governor.html\">http://www.wowotech.net/pm_subsystem/cpufreq_governor.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"cpufreq\"><a href=\"#cpufreq\" class=\"headerlink\" title=\"cpufreq\"></a>cpufreq</h1><p>CPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：</p>\n<ul>\n<li>cpufreq driver</li>\n<li>cpufreq framework (core)</li>\n<li>cpufreq governor</li>\n</ul>\n<p>一些基本概念：</p>\n<p>P-state: voltage and frequency point</p>\n<p>总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。</p>\n<p>另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。</p>\n<p>下面分开来看每个部分。</p>\n<h2 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h2><p>Cpufreq Driver主要负责底层调频的操作，核心是实现 <code>cpufreq_dirver</code> 对象，并通过 <code>cpufreq_register_driver</code> 将驱动注册到系统，供core部分使用。</p>\n<p>其中，最核心的几个回调包括：</p>\n<ul>\n<li>online: hotplug callback</li>\n<li>offline: hotplug callback</li>\n<li>target_index: set freq</li>\n<li>set_boost: enter into boost mode</li>\n</ul>\n<p>以 <code>mediatek-cpufreq-hw.c</code> 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。</p>\n<p>db845c使用的 <code>qcom-cpufreq-hw.c</code> 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。</p>\n<p>* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。</p>\n<h2 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h2><p>Core部分核心文件是 <code>/drivers/cpufreq/cpufreq.c</code></p>\n<p>这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。</p>\n<p><code>cpufreq_register_driver</code> (cpufreq_driver* cpufreq_driver)</p>\n<p><code>cpufreq_register_governor</code> (cpufreq_governor_list)</p>\n<p><code>cpufreq_register_notifier</code> (cpufreq_transition_notifier_list)</p>\n<p><code>cpufreq_policy_alloc</code> (cpufreq_policy* PERCPU:cpufreq_cpu_data)</p>\n<p><code>cpufreq_policy</code> 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。</p>\n<p>每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（<code>cpufreq_cpu_data</code>）</p>\n<p>Mainflow：</p>\n<p>1、cpufreq driver注册</p>\n<p>2、governor注册（每个policy初始化自己的governor）</p>\n<p>3、cpu hotplug state: “cpufreq:online”，<code>cpuhp_cpufreq_online</code>、<code>cpuhp_cpufreq_offline</code>，创建出percpu policy，绑定driver、governor</p>\n<p>4、向sysfs创建节点，提供功能</p>\n<p>5、governor开始工作，通过 <code>__cpufreq_driver_target</code> 进行调频。</p>\n<ul>\n<li>Qos是调频投票机制，用来实现max_freq、min_freq limitation。(<code>cpufreq_notifier_min</code> <code>cpufreq_notifier_max</code>)，在其他module有需求投票后，freq constrants会被更新。</li>\n</ul>\n<h2 id=\"Sysfs\"><a href=\"#Sysfs\" class=\"headerlink\" title=\"Sysfs\"></a>Sysfs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sys/devices/system/cpu/cpu0/cpufreq/policyX</span><br><span class=\"line\">scaling_driver\t\t\tr\t# cpufreq driver name</span><br><span class=\"line\">affected_cpus\t\t\tr\t# cpu</span><br><span class=\"line\">related_cpus\t\t\tr\t# &lt;?&gt;</span><br><span class=\"line\">scaling_cur_freq\t\trw\t# cur freq</span><br><span class=\"line\">scaling_min_freq\t\trw\t# min freq limit</span><br><span class=\"line\">scaling_max_freq\t\trw\t# max freq limit</span><br><span class=\"line\">scaling_governor\t\trw\t# selected governor</span><br><span class=\"line\">scaling_available_governors\tr\t# available governors</span><br><span class=\"line\">scaling_setspeed\t\tr\t# &lt;not supported&gt;</span><br><span class=\"line\">cpuinfo_min_freq\t\tr\t# hardware min freq</span><br><span class=\"line\">cpuinfo_max_freq\t\tr\t# hardware max freq</span><br><span class=\"line\">cpuinfo_transition_latency\tr\t# hardware latency</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Governors\"><a href=\"#Governors\" class=\"headerlink\" title=\"Governors\"></a>Governors</h2><p>Governor负责从系统收集信息，并触发调频动作。</p>\n<p><strong>powersave</strong></p>\n<p>always lowest frequency</p>\n<p><strong>performance</strong></p>\n<p>always highest frequency</p>\n<p><strong>schedutil</strong></p>\n<p>uses CPU utilization data from scheduler to determine target frequence</p>\n<p>待完成</p>\n<p><strong>userspace</strong></p>\n<p>allow user space set the frequency</p>\n<p><strong>ondemand</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target by CPU load, 0-&gt;min, 100-&gt;max</p>\n<p><strong>conservative</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target step by step, up_threshold-&gt;up, down_threshold-&gt;down</p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- /drivers/cpufreq/cpufreq.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq-dt.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_stats.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_conservative.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_governor.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_ondemand.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_powersave.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_performance.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_userspace.c</span><br><span class=\"line\">- /kernel/sched/cpufreq_schedutil.c</span><br><span class=\"line\">- /kernel/power/qos.c</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\">https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html</a></p>\n<p><a href=\"https://docs.kernel.org/scheduler/schedutil.html\">https://docs.kernel.org/scheduler/schedutil.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_overview.html\">http://www.wowotech.net/pm_subsystem/cpufreq_overview.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_driver.html\">http://www.wowotech.net/pm_subsystem/cpufreq_driver.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_core.html\">http://www.wowotech.net/pm_subsystem/cpufreq_core.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_governor.html\">http://www.wowotech.net/pm_subsystem/cpufreq_governor.html</a></p>\n"},{"title":"github+hexo 博客搭建","date":"2023-08-25T11:32:35.000Z","categories":["test"],"tags":["test"],"_content":"\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","source":"back_posts/github+hexo博客搭建.md","raw":"---\ntitle: github+hexo 博客搭建\ndate: 2023-08-25 19:32:35\ncategories:\n- test\ntags:\n- test\n---\n\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","updated":"2024-05-15T06:11:08.990Z","path":"back_posts/github+hexo博客搭建.html","comments":1,"layout":"page","_id":"clw7fflkr0007x2w07k697mbm","content":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n"},{"title":"Hello World","date":"2023-08-24T16:00:00.000Z","categories":["test"],"tags":["test"],"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"back_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-08-25 00:00:00\ncategories:\n- test\ntags:\n- test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","updated":"2024-05-15T06:11:08.991Z","path":"back_posts/hello-world.html","comments":1,"layout":"page","_id":"clw7fflks0008x2w015yo7zy7","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"_content":"# 块设备驱动\n\n\n\n块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。","source":"back_posts/linux块设备驱动.md","raw":"# 块设备驱动\n\n\n\n块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。","date":"2024-05-15T06:11:08.991Z","updated":"2024-05-15T06:11:08.991Z","path":"back_posts/linux块设备驱动.html","title":"","comments":1,"layout":"page","_id":"clw7fflks0009x2w0709d7bi5","content":"<h1 id=\"块设备驱动\"><a href=\"#块设备驱动\" class=\"headerlink\" title=\"块设备驱动\"></a>块设备驱动</h1><p>块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"块设备驱动\"><a href=\"#块设备驱动\" class=\"headerlink\" title=\"块设备驱动\"></a>块设备驱动</h1><p>块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。</p>\n"},{"_content":"> \n\nU-Boot官网:`https://docs.u-boot.org/en/latest/`\n\nu-boot启动流程\n\n- 板子上电以后，首先执行的是ROM中的一段启动代码。启动代码**根据寄存器/外部管脚配置**，确定是进入下载模式，还是从某介质(Flash/EMMC/SD卡等存储设备)启动u-boot\n\n> ROM中的代码是固化的，无法修改\n\n# 一、介绍\n\n> FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。\n>\n> uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  \n\n> U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc/README.fdt-control\n\n### dtb在U-boot中的位置\n\n- dtb能够以两种形式编译到U-boot的镜像中\n\n1. dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)\n\n> 通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址\n\n1. dtb集成到u-boot的bin文件内部\n\n> 通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb\n\n1. 获取dts文件的地址gd->fdt_blob\n\n```\n// 宏用来表示是否把dtb文件放在uboot.bin的文件中\nCONFIG_OF_EMBED\n\n// 单独编译dtb文件\nCONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址\n\ngd->fdt_blob = (ulong *)&_end;\n\n// 可以通过fdtcontroladdr环境变量来指定fdt的地址\ngd->fdt_blob = (void *)getenv_ulong(\"fdtcontroladdr\", 16,\n\t\t\t\t\t\t(uintptr_t)gd->fdt_blob); \n```\n\n###  dtb解析接口\n\n- 定义在lib/fdtdec.c文件中，节点变量node中存放的是偏移地址\n\n```\n// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点\nint fdt_path_offset(const void *fdt, const char *path)\neg：node = fdt_path_offset(gd->fdt_blob, “/aliases”);\n\n// 获得节点node的某个字符串属性值\nconst void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)\neg： mac = fdt_getprop(gd->fdt_blob, node, “mac-address”, &len);\n\n// 获得节点node的某个整形数组属性值\nint fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)\neg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));\n\n// 获得节点node的地址属性值\nfdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)\neg：fdtdec_get_addr(blob, node, “reg”);\n\n// 获得config节点下的整形属性、bool属性、字符串等等\nfdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string\n\n// 获得chosen下的name节点的偏移\nint fdtdec_get_chosen_node(const void *blob, const char *name)\n\n// 获得chosen下name属性的值\nconst char *fdtdec_get_chosen_prop(const void *blob, const char *name)\n```\n\n- 定义在lib/fdtdec_common.c文件中\n\n```\n// 获得节点node的某个整形属性值\nint fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)\neg： bus->udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);\n\n// 获得节点node的某个无符号整形属性值\nfdtdec_get_uint\n```\n\n## fdt 命令\n\n对于u-boot提供了fdt的相关命令\n\n```\nfdt - flattened device tree utility commands\n\nUsage:\nfdt addr [-c]  <addr> [<length>]   - Set the [control] fdt location to <addr>\nfdt apply <addr>                    - Apply overlay to the DT\nfdt move   <fdt> <newaddr> <length> - Copy the fdt to <addr> and make it active\nfdt resize [<extrasize>]            - Resize fdt to size + padding to 4k addr + some optional <extrasize> if needed\nfdt print  <path> [<prop>]          - Recursive print starting at <path>\nfdt list   <path> [<prop>]          - Print one level starting at <path>\nfdt get value <var> <path> <prop>   - Get <property> and store in <var>\nfdt get name <var> <path> <index>   - Get name of node <index> and store in <var>\nfdt get addr <var> <path> <prop>    - Get start address of <property> and store in <var>\nfdt get size <var> <path> [<prop>]  - Get size of [<property>] or num nodes and store in <var>\nfdt set    <path> <prop> [<val>]    - Set <property> [to <val>]\nfdt mknode <path> <node>            - Create a new node after <path>\nfdt rm     <path> [<prop>]          - Delete the node or <property>\nfdt header                          - Display header info\nfdt bootcpu <id>                    - Set boot cpuid\nfdt memory <addr> <size>            - Add/Update memory node\nfdt rsvmem print                    - Show current mem reserves\nfdt rsvmem add <addr> <size>        - Add a mem reserve\nfdt rsvmem delete <index>           - Delete a mem reserves\nfdt chosen [<start> <end>]          - Add/update the /chosen branch in the tree\n                                        <start>/<end> - initrd start/end addr\nNOTE: Dereference aliases by omitting the leading '/', e.g. fdt print ethernet0.\n```\n\nfdt print加path参数，则打path内容，如下(其中/memory是path)：\n\n```c\nU-Boot> fdt print /memory\nmemory {\ndevice_type = \"memory\";\nreg = <0x70000000 0x4000000>;\n};\n\nU-Boot> fdt print #不加参数时，打印出整颗树\n```\n\n\n\n二、u-boot 获取GPT分区表\n\n在uboot中通过命令打印分区表\n\n```\npart list mmc 0\n```\n\n3588-android-uboot\n\n```c\n#include <common.h>\n#include <command.h>\n#include <android_image.h>\n#include <mmc.h>\n#include <stdlib.h>\n#include <memalign.h>\n#include <fdtdec.h>\n\n#define PART_MAX_COUNT  128\n#define\tLAB_SIZE\t\t512\n#define\tHEADER_OFFSET\tLAB_SIZE\n#define\tENTRY_OFFSET\t(2 * LAB_SIZE)\n#define\tVAL1_OFFSET\t\tsizeof(u64)\n#define\tVAL2_OFFSET\t\t(2 * sizeof(u64))\n\nstatic u64 get_gpt_blk_cnt_and_print(struct blk_desc *dev_desc,\n\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte) {\n\tchar efi_str[PARTNAME_SZ + 1];\n\tu64 gpt_part_size, gpt_blk_cnt = 0;\n\tgpt_entry *gpt_e;\n\tint i;\n\n\tgpt_e = *gpt_pte;\n\tfor (i = 0; i < gpt_head->num_partition_entries; i++) {\n\n\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,\n\t\t\t\t\t     PARTNAME_SZ + 1);\n\n\t\tprintf(\"%s: part: %2d name - GPT: %16s \",\n\t\t      __func__, i, efi_str);\n\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -\n\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + 1;\n\t\tgpt_blk_cnt += gpt_part_size;\n\t\t\n\t\tif(gpt_part_size == 1) \n\t\t\tbreak;\n\t\t\n\t\tprintf(\"size(LBA) - GPT: %8llu \",\n\t\t      (unsigned long long)gpt_part_size);\n\n\t\tprintf(\"start LBA - GPT: %8llu \\n\",\n\t\t      le64_to_cpu(gpt_e[i].starting_lba));\n\t}\n\n\treturn gpt_blk_cnt + gpt_e[0].starting_lba - 1;\n}\n\nstatic int get_gpt_meta_data(u64 *data_size, void **data)\n{\n    gpt_header *pgpt_head;\n\tgpt_entry *entries;\n\tvoid *meta_data;\n\tu64 meta_data_size, gpt_entries_size;\n\tstruct blk_desc *dev_desc = NULL;\n\tstruct mmc *mmc = NULL;\n\tu64 blk_size = 0;\n\tu64 blk_cnt = 0;\n\tu64 tag = 0x55AA;\n\tlbaint_t lba;\n    \n\tif (!data_size || !data) {\n\t\tprintf(\"%s *** ERROR: Invalid Argument(s) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    mmc = do_returnmmc();\n\tif (!mmc)\n\t\treturn CMD_RET_FAILURE;\n    \n    dev_desc = mmc_get_blk_desc(mmc);\n\tif (!dev_desc) {\n\t\tprintf(\"%s *** ERROR: mmc_get_blk_desc err ***\\n\", __func__);\n\t\treturn -1;\n\t}\n\n\tgpt_entries_size = sizeof(gpt_entry) * PART_MAX_COUNT;\n\tmeta_data_size = LAB_SIZE + sizeof(gpt_header) + gpt_entries_size;\n\tmeta_data = malloc(meta_data_size);\n\tif(!meta_data) {\n\t\tprintf(\"%s *** ERROR: malloc memory (gpt meta data) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    memset(meta_data, 0, meta_data_size);\n\tpgpt_head = (gpt_header *)((char *)meta_data + HEADER_OFFSET);\n\tentries = (gpt_entry *)((char *)meta_data + ENTRY_OFFSET);\n\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc->blksz);\n\n\t/* Read MBR Header from device */\n\tlba = 0; /* MBR is always at 0 */\n\tblk_cnt = 1; /* MBR (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != 1) {\n\t\tprintf(\"*** ERROR: Can't read MBR header ***\\n\");\n\t\tgoto ERROR_OUT;\n\t}\n\n\t/* Read GPT Header from device */\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tblk_cnt = 1; /* GPT Header (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != 1) {\n    \tprintf(\"%s *** ERROR: Can't read GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tif (validate_gpt_header(pgpt_head, lba, dev_desc->lba)) {\n\t\tprintf(\"%s *** ERROR: validate_gpt_header GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tif (dev_desc->sig_type == SIG_TYPE_NONE) {\n\t\tefi_guid_t empty = {};\n\t\tif (memcmp(&pgpt_head->disk_guid, &empty, sizeof(empty))) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_GUID;\n\t\t\tmemcpy(&dev_desc->guid_sig, &pgpt_head->disk_guid,\n\t\t\t      sizeof(empty));\n\t\t} else if (mbr->unique_mbr_signature != 0) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_MBR;\n\t\t\tdev_desc->mbr_sig = mbr->unique_mbr_signature;\n\t\t}\n\t}\n\n\t/* Read GPT Entries from device */\n\tlba = le64_to_cpu(pgpt_head->partition_entry_lba);\n\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head->num_partition_entries) *\n\t\t\t\t   \tle32_to_cpu(pgpt_head->sizeof_partition_entry)),\n\t\t\t\t  \tdev_desc);\n\tif (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) {\n\t\tprintf(\"%s *** ERROR:read entries (lba=%llu) ***\\n\",\n\t\t\t\t__func__, pgpt_head->partition_entry_lba);\n\t\tgoto ERROR_OUT;\n\t}\n\t\n\tblk_size = dev_desc->blksz;\n\tvalidate_gpt_entries(pgpt_head, entries);\n\t\n\tdebug(\"%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n\",\n\t\t\t\t__func__, (unsigned long long)(ulong)lba, blk_cnt, blk_size);\n\t\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n    \n    /* \n\t * build info, layout of meta_data:\n\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries\n\t */\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n\t/*this value makes we known the reserved memory is available*/\n\tmemcpy(meta_data, (void *)&tag, sizeof(u64));\n\tmemcpy(meta_data + VAL1_OFFSET, (void *)&blk_size, sizeof(u64));\n\tmemcpy(meta_data + VAL2_OFFSET, (void *)&blk_cnt, sizeof(u64));\n\n\t*data_size = meta_data_size;\n\t*data = meta_data;\n\n\treturn 0;\n\nERROR_OUT:\n\tfree(meta_data);\n\tmeta_data = NULL;\n\treturn -1;\n}\n```\n\n\n\n参考：\n\n[Device Tree（四）：文件结构解析 (wowotech.net)](http://www.wowotech.net/device_model/dt-code-file-struct-parse.html)\n\n[Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376295326)\n\n[Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376296222)\n\nhttps://www.cnblogs.com/solo666/p/16518154.html","source":"back_posts/uboot之fdt.md","raw":"> \n\nU-Boot官网:`https://docs.u-boot.org/en/latest/`\n\nu-boot启动流程\n\n- 板子上电以后，首先执行的是ROM中的一段启动代码。启动代码**根据寄存器/外部管脚配置**，确定是进入下载模式，还是从某介质(Flash/EMMC/SD卡等存储设备)启动u-boot\n\n> ROM中的代码是固化的，无法修改\n\n# 一、介绍\n\n> FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。\n>\n> uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  \n\n> U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc/README.fdt-control\n\n### dtb在U-boot中的位置\n\n- dtb能够以两种形式编译到U-boot的镜像中\n\n1. dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)\n\n> 通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址\n\n1. dtb集成到u-boot的bin文件内部\n\n> 通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb\n\n1. 获取dts文件的地址gd->fdt_blob\n\n```\n// 宏用来表示是否把dtb文件放在uboot.bin的文件中\nCONFIG_OF_EMBED\n\n// 单独编译dtb文件\nCONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址\n\ngd->fdt_blob = (ulong *)&_end;\n\n// 可以通过fdtcontroladdr环境变量来指定fdt的地址\ngd->fdt_blob = (void *)getenv_ulong(\"fdtcontroladdr\", 16,\n\t\t\t\t\t\t(uintptr_t)gd->fdt_blob); \n```\n\n###  dtb解析接口\n\n- 定义在lib/fdtdec.c文件中，节点变量node中存放的是偏移地址\n\n```\n// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点\nint fdt_path_offset(const void *fdt, const char *path)\neg：node = fdt_path_offset(gd->fdt_blob, “/aliases”);\n\n// 获得节点node的某个字符串属性值\nconst void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)\neg： mac = fdt_getprop(gd->fdt_blob, node, “mac-address”, &len);\n\n// 获得节点node的某个整形数组属性值\nint fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)\neg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));\n\n// 获得节点node的地址属性值\nfdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)\neg：fdtdec_get_addr(blob, node, “reg”);\n\n// 获得config节点下的整形属性、bool属性、字符串等等\nfdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string\n\n// 获得chosen下的name节点的偏移\nint fdtdec_get_chosen_node(const void *blob, const char *name)\n\n// 获得chosen下name属性的值\nconst char *fdtdec_get_chosen_prop(const void *blob, const char *name)\n```\n\n- 定义在lib/fdtdec_common.c文件中\n\n```\n// 获得节点node的某个整形属性值\nint fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)\neg： bus->udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);\n\n// 获得节点node的某个无符号整形属性值\nfdtdec_get_uint\n```\n\n## fdt 命令\n\n对于u-boot提供了fdt的相关命令\n\n```\nfdt - flattened device tree utility commands\n\nUsage:\nfdt addr [-c]  <addr> [<length>]   - Set the [control] fdt location to <addr>\nfdt apply <addr>                    - Apply overlay to the DT\nfdt move   <fdt> <newaddr> <length> - Copy the fdt to <addr> and make it active\nfdt resize [<extrasize>]            - Resize fdt to size + padding to 4k addr + some optional <extrasize> if needed\nfdt print  <path> [<prop>]          - Recursive print starting at <path>\nfdt list   <path> [<prop>]          - Print one level starting at <path>\nfdt get value <var> <path> <prop>   - Get <property> and store in <var>\nfdt get name <var> <path> <index>   - Get name of node <index> and store in <var>\nfdt get addr <var> <path> <prop>    - Get start address of <property> and store in <var>\nfdt get size <var> <path> [<prop>]  - Get size of [<property>] or num nodes and store in <var>\nfdt set    <path> <prop> [<val>]    - Set <property> [to <val>]\nfdt mknode <path> <node>            - Create a new node after <path>\nfdt rm     <path> [<prop>]          - Delete the node or <property>\nfdt header                          - Display header info\nfdt bootcpu <id>                    - Set boot cpuid\nfdt memory <addr> <size>            - Add/Update memory node\nfdt rsvmem print                    - Show current mem reserves\nfdt rsvmem add <addr> <size>        - Add a mem reserve\nfdt rsvmem delete <index>           - Delete a mem reserves\nfdt chosen [<start> <end>]          - Add/update the /chosen branch in the tree\n                                        <start>/<end> - initrd start/end addr\nNOTE: Dereference aliases by omitting the leading '/', e.g. fdt print ethernet0.\n```\n\nfdt print加path参数，则打path内容，如下(其中/memory是path)：\n\n```c\nU-Boot> fdt print /memory\nmemory {\ndevice_type = \"memory\";\nreg = <0x70000000 0x4000000>;\n};\n\nU-Boot> fdt print #不加参数时，打印出整颗树\n```\n\n\n\n二、u-boot 获取GPT分区表\n\n在uboot中通过命令打印分区表\n\n```\npart list mmc 0\n```\n\n3588-android-uboot\n\n```c\n#include <common.h>\n#include <command.h>\n#include <android_image.h>\n#include <mmc.h>\n#include <stdlib.h>\n#include <memalign.h>\n#include <fdtdec.h>\n\n#define PART_MAX_COUNT  128\n#define\tLAB_SIZE\t\t512\n#define\tHEADER_OFFSET\tLAB_SIZE\n#define\tENTRY_OFFSET\t(2 * LAB_SIZE)\n#define\tVAL1_OFFSET\t\tsizeof(u64)\n#define\tVAL2_OFFSET\t\t(2 * sizeof(u64))\n\nstatic u64 get_gpt_blk_cnt_and_print(struct blk_desc *dev_desc,\n\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte) {\n\tchar efi_str[PARTNAME_SZ + 1];\n\tu64 gpt_part_size, gpt_blk_cnt = 0;\n\tgpt_entry *gpt_e;\n\tint i;\n\n\tgpt_e = *gpt_pte;\n\tfor (i = 0; i < gpt_head->num_partition_entries; i++) {\n\n\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,\n\t\t\t\t\t     PARTNAME_SZ + 1);\n\n\t\tprintf(\"%s: part: %2d name - GPT: %16s \",\n\t\t      __func__, i, efi_str);\n\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -\n\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + 1;\n\t\tgpt_blk_cnt += gpt_part_size;\n\t\t\n\t\tif(gpt_part_size == 1) \n\t\t\tbreak;\n\t\t\n\t\tprintf(\"size(LBA) - GPT: %8llu \",\n\t\t      (unsigned long long)gpt_part_size);\n\n\t\tprintf(\"start LBA - GPT: %8llu \\n\",\n\t\t      le64_to_cpu(gpt_e[i].starting_lba));\n\t}\n\n\treturn gpt_blk_cnt + gpt_e[0].starting_lba - 1;\n}\n\nstatic int get_gpt_meta_data(u64 *data_size, void **data)\n{\n    gpt_header *pgpt_head;\n\tgpt_entry *entries;\n\tvoid *meta_data;\n\tu64 meta_data_size, gpt_entries_size;\n\tstruct blk_desc *dev_desc = NULL;\n\tstruct mmc *mmc = NULL;\n\tu64 blk_size = 0;\n\tu64 blk_cnt = 0;\n\tu64 tag = 0x55AA;\n\tlbaint_t lba;\n    \n\tif (!data_size || !data) {\n\t\tprintf(\"%s *** ERROR: Invalid Argument(s) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    mmc = do_returnmmc();\n\tif (!mmc)\n\t\treturn CMD_RET_FAILURE;\n    \n    dev_desc = mmc_get_blk_desc(mmc);\n\tif (!dev_desc) {\n\t\tprintf(\"%s *** ERROR: mmc_get_blk_desc err ***\\n\", __func__);\n\t\treturn -1;\n\t}\n\n\tgpt_entries_size = sizeof(gpt_entry) * PART_MAX_COUNT;\n\tmeta_data_size = LAB_SIZE + sizeof(gpt_header) + gpt_entries_size;\n\tmeta_data = malloc(meta_data_size);\n\tif(!meta_data) {\n\t\tprintf(\"%s *** ERROR: malloc memory (gpt meta data) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    memset(meta_data, 0, meta_data_size);\n\tpgpt_head = (gpt_header *)((char *)meta_data + HEADER_OFFSET);\n\tentries = (gpt_entry *)((char *)meta_data + ENTRY_OFFSET);\n\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc->blksz);\n\n\t/* Read MBR Header from device */\n\tlba = 0; /* MBR is always at 0 */\n\tblk_cnt = 1; /* MBR (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != 1) {\n\t\tprintf(\"*** ERROR: Can't read MBR header ***\\n\");\n\t\tgoto ERROR_OUT;\n\t}\n\n\t/* Read GPT Header from device */\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tblk_cnt = 1; /* GPT Header (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != 1) {\n    \tprintf(\"%s *** ERROR: Can't read GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tif (validate_gpt_header(pgpt_head, lba, dev_desc->lba)) {\n\t\tprintf(\"%s *** ERROR: validate_gpt_header GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tif (dev_desc->sig_type == SIG_TYPE_NONE) {\n\t\tefi_guid_t empty = {};\n\t\tif (memcmp(&pgpt_head->disk_guid, &empty, sizeof(empty))) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_GUID;\n\t\t\tmemcpy(&dev_desc->guid_sig, &pgpt_head->disk_guid,\n\t\t\t      sizeof(empty));\n\t\t} else if (mbr->unique_mbr_signature != 0) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_MBR;\n\t\t\tdev_desc->mbr_sig = mbr->unique_mbr_signature;\n\t\t}\n\t}\n\n\t/* Read GPT Entries from device */\n\tlba = le64_to_cpu(pgpt_head->partition_entry_lba);\n\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head->num_partition_entries) *\n\t\t\t\t   \tle32_to_cpu(pgpt_head->sizeof_partition_entry)),\n\t\t\t\t  \tdev_desc);\n\tif (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) {\n\t\tprintf(\"%s *** ERROR:read entries (lba=%llu) ***\\n\",\n\t\t\t\t__func__, pgpt_head->partition_entry_lba);\n\t\tgoto ERROR_OUT;\n\t}\n\t\n\tblk_size = dev_desc->blksz;\n\tvalidate_gpt_entries(pgpt_head, entries);\n\t\n\tdebug(\"%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n\",\n\t\t\t\t__func__, (unsigned long long)(ulong)lba, blk_cnt, blk_size);\n\t\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n    \n    /* \n\t * build info, layout of meta_data:\n\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries\n\t */\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n\t/*this value makes we known the reserved memory is available*/\n\tmemcpy(meta_data, (void *)&tag, sizeof(u64));\n\tmemcpy(meta_data + VAL1_OFFSET, (void *)&blk_size, sizeof(u64));\n\tmemcpy(meta_data + VAL2_OFFSET, (void *)&blk_cnt, sizeof(u64));\n\n\t*data_size = meta_data_size;\n\t*data = meta_data;\n\n\treturn 0;\n\nERROR_OUT:\n\tfree(meta_data);\n\tmeta_data = NULL;\n\treturn -1;\n}\n```\n\n\n\n参考：\n\n[Device Tree（四）：文件结构解析 (wowotech.net)](http://www.wowotech.net/device_model/dt-code-file-struct-parse.html)\n\n[Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376295326)\n\n[Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376296222)\n\nhttps://www.cnblogs.com/solo666/p/16518154.html","date":"2024-05-15T06:11:08.992Z","updated":"2024-05-15T06:11:08.992Z","path":"back_posts/uboot之fdt.html","title":"","comments":1,"layout":"page","_id":"clw7fflkt000ax2w03qcob16u","content":"<blockquote>\n</blockquote>\n<p>U-Boot官网:<code>https://docs.u-boot.org/en/latest/</code></p>\n<p>u-boot启动流程</p>\n<ul>\n<li>板子上电以后，首先执行的是ROM中的一段启动代码。启动代码<strong>根据寄存器&#x2F;外部管脚配置</strong>，确定是进入下载模式，还是从某介质(Flash&#x2F;EMMC&#x2F;SD卡等存储设备)启动u-boot</li>\n</ul>\n<blockquote>\n<p>ROM中的代码是固化的，无法修改</p>\n</blockquote>\n<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><blockquote>\n<p>FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。</p>\n<p>uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  </p>\n</blockquote>\n<blockquote>\n<p>U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc&#x2F;README.fdt-control</p>\n</blockquote>\n<h3 id=\"dtb在U-boot中的位置\"><a href=\"#dtb在U-boot中的位置\" class=\"headerlink\" title=\"dtb在U-boot中的位置\"></a>dtb在U-boot中的位置</h3><ul>\n<li>dtb能够以两种形式编译到U-boot的镜像中</li>\n</ul>\n<ol>\n<li>dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址</p>\n</blockquote>\n<ol>\n<li>dtb集成到u-boot的bin文件内部</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb</p>\n</blockquote>\n<ol>\n<li>获取dts文件的地址gd-&gt;fdt_blob</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 宏用来表示是否把dtb文件放在uboot.bin的文件中</span><br><span class=\"line\">CONFIG_OF_EMBED</span><br><span class=\"line\"></span><br><span class=\"line\">// 单独编译dtb文件</span><br><span class=\"line\">CONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址</span><br><span class=\"line\"></span><br><span class=\"line\">gd-&gt;fdt_blob = (ulong *)&amp;_end;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以通过fdtcontroladdr环境变量来指定fdt的地址</span><br><span class=\"line\">gd-&gt;fdt_blob = (void *)getenv_ulong(&quot;fdtcontroladdr&quot;, 16,</span><br><span class=\"line\">\t\t\t\t\t\t(uintptr_t)gd-&gt;fdt_blob); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dtb解析接口\"><a href=\"#dtb解析接口\" class=\"headerlink\" title=\"dtb解析接口\"></a>dtb解析接口</h3><ul>\n<li>定义在lib&#x2F;fdtdec.c文件中，节点变量node中存放的是偏移地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点</span><br><span class=\"line\">int fdt_path_offset(const void *fdt, const char *path)</span><br><span class=\"line\">eg：node = fdt_path_offset(gd-&gt;fdt_blob, “/aliases”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个字符串属性值</span><br><span class=\"line\">const void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)</span><br><span class=\"line\">eg： mac = fdt_getprop(gd-&gt;fdt_blob, node, “mac-address”, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个整形数组属性值</span><br><span class=\"line\">int fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)</span><br><span class=\"line\">eg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的地址属性值</span><br><span class=\"line\">fdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)</span><br><span class=\"line\">eg：fdtdec_get_addr(blob, node, “reg”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得config节点下的整形属性、bool属性、字符串等等</span><br><span class=\"line\">fdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下的name节点的偏移</span><br><span class=\"line\">int fdtdec_get_chosen_node(const void *blob, const char *name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下name属性的值</span><br><span class=\"line\">const char *fdtdec_get_chosen_prop(const void *blob, const char *name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义在lib&#x2F;fdtdec_common.c文件中</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得节点node的某个整形属性值</span><br><span class=\"line\">int fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)</span><br><span class=\"line\">eg： bus-&gt;udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个无符号整形属性值</span><br><span class=\"line\">fdtdec_get_uint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fdt-命令\"><a href=\"#fdt-命令\" class=\"headerlink\" title=\"fdt 命令\"></a>fdt 命令</h2><p>对于u-boot提供了fdt的相关命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdt - flattened device tree utility commands</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">fdt addr [-c]  &lt;addr&gt; [&lt;length&gt;]   - Set the [control] fdt location to &lt;addr&gt;</span><br><span class=\"line\">fdt apply &lt;addr&gt;                    - Apply overlay to the DT</span><br><span class=\"line\">fdt move   &lt;fdt&gt; &lt;newaddr&gt; &lt;length&gt; - Copy the fdt to &lt;addr&gt; and make it active</span><br><span class=\"line\">fdt resize [&lt;extrasize&gt;]            - Resize fdt to size + padding to 4k addr + some optional &lt;extrasize&gt; if needed</span><br><span class=\"line\">fdt print  &lt;path&gt; [&lt;prop&gt;]          - Recursive print starting at &lt;path&gt;</span><br><span class=\"line\">fdt list   &lt;path&gt; [&lt;prop&gt;]          - Print one level starting at &lt;path&gt;</span><br><span class=\"line\">fdt get value &lt;var&gt; &lt;path&gt; &lt;prop&gt;   - Get &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get name &lt;var&gt; &lt;path&gt; &lt;index&gt;   - Get name of node &lt;index&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get addr &lt;var&gt; &lt;path&gt; &lt;prop&gt;    - Get start address of &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get size &lt;var&gt; &lt;path&gt; [&lt;prop&gt;]  - Get size of [&lt;property&gt;] or num nodes and store in &lt;var&gt;</span><br><span class=\"line\">fdt set    &lt;path&gt; &lt;prop&gt; [&lt;val&gt;]    - Set &lt;property&gt; [to &lt;val&gt;]</span><br><span class=\"line\">fdt mknode &lt;path&gt; &lt;node&gt;            - Create a new node after &lt;path&gt;</span><br><span class=\"line\">fdt rm     &lt;path&gt; [&lt;prop&gt;]          - Delete the node or &lt;property&gt;</span><br><span class=\"line\">fdt header                          - Display header info</span><br><span class=\"line\">fdt bootcpu &lt;id&gt;                    - Set boot cpuid</span><br><span class=\"line\">fdt memory &lt;addr&gt; &lt;size&gt;            - Add/Update memory node</span><br><span class=\"line\">fdt rsvmem print                    - Show current mem reserves</span><br><span class=\"line\">fdt rsvmem add &lt;addr&gt; &lt;size&gt;        - Add a mem reserve</span><br><span class=\"line\">fdt rsvmem delete &lt;index&gt;           - Delete a mem reserves</span><br><span class=\"line\">fdt chosen [&lt;start&gt; &lt;end&gt;]          - Add/update the /chosen branch in the tree</span><br><span class=\"line\">                                        &lt;start&gt;/&lt;end&gt; - initrd start/end addr</span><br><span class=\"line\">NOTE: Dereference aliases by omitting the leading &#x27;/&#x27;, e.g. fdt print ethernet0.</span><br></pre></td></tr></table></figure>\n\n<p>fdt print加path参数，则打path内容，如下(其中&#x2F;memory是path)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U-Boot&gt; fdt print /memory</span><br><span class=\"line\">memory &#123;</span><br><span class=\"line\">device_type = <span class=\"string\">&quot;memory&quot;</span>;</span><br><span class=\"line\">reg = &lt;<span class=\"number\">0x70000000</span> <span class=\"number\">0x4000000</span>&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">U-Boot&gt; fdt print #不加参数时，打印出整颗树</span><br></pre></td></tr></table></figure>\n\n\n\n<p>二、u-boot 获取GPT分区表</p>\n<p>在uboot中通过命令打印分区表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part list mmc 0</span><br></pre></td></tr></table></figure>\n\n<p>3588-android-uboot</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;command.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;android_image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mmc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memalign.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fdtdec.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PART_MAX_COUNT  128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tLAB_SIZE\t\t512</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tHEADER_OFFSET\tLAB_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tENTRY_OFFSET\t(2 * LAB_SIZE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL1_OFFSET\t\tsizeof(u64)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL2_OFFSET\t\t(2 * sizeof(u64))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> u64 <span class=\"title function_\">get_gpt_blk_cnt_and_print</span><span class=\"params\">(<span class=\"keyword\">struct</span> blk_desc *dev_desc,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> efi_str[PARTNAME_SZ + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tu64 gpt_part_size, gpt_blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgpt_entry *gpt_e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_e = *gpt_pte;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gpt_head-&gt;num_partition_entries; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,</span><br><span class=\"line\">\t\t\t\t\t     PARTNAME_SZ + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: part: %2d name - GPT: %16s &quot;</span>,</span><br><span class=\"line\">\t\t      __func__, i, efi_str);</span><br><span class=\"line\">\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -</span><br><span class=\"line\">\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tgpt_blk_cnt += gpt_part_size;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(gpt_part_size == <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size(LBA) - GPT: %8llu &quot;</span>,</span><br><span class=\"line\">\t\t      (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)gpt_part_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start LBA - GPT: %8llu \\n&quot;</span>,</span><br><span class=\"line\">\t\t      le64_to_cpu(gpt_e[i].starting_lba));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gpt_blk_cnt + gpt_e[<span class=\"number\">0</span>].starting_lba - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">get_gpt_meta_data</span><span class=\"params\">(u64 *data_size, <span class=\"type\">void</span> **data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gpt_header *pgpt_head;</span><br><span class=\"line\">\tgpt_entry *entries;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *meta_data;</span><br><span class=\"line\">\tu64 meta_data_size, gpt_entries_size;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">blk_desc</span> *<span class=\"title\">dev_desc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mmc</span> *<span class=\"title\">mmc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tu64 blk_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 tag = <span class=\"number\">0x55AA</span>;</span><br><span class=\"line\">\t<span class=\"type\">lbaint_t</span> lba;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data_size || !data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Invalid Argument(s) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mmc = do_returnmmc();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mmc)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> CMD_RET_FAILURE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dev_desc = mmc_get_blk_desc(mmc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dev_desc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: mmc_get_blk_desc err ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_entries_size = <span class=\"keyword\">sizeof</span>(gpt_entry) * PART_MAX_COUNT;</span><br><span class=\"line\">\tmeta_data_size = LAB_SIZE + <span class=\"keyword\">sizeof</span>(gpt_header) + gpt_entries_size;</span><br><span class=\"line\">\tmeta_data = <span class=\"built_in\">malloc</span>(meta_data_size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!meta_data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: malloc memory (gpt meta data) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(meta_data, <span class=\"number\">0</span>, meta_data_size);</span><br><span class=\"line\">\tpgpt_head = (gpt_header *)((<span class=\"type\">char</span> *)meta_data + HEADER_OFFSET);</span><br><span class=\"line\">\tentries = (gpt_entry *)((<span class=\"type\">char</span> *)meta_data + ENTRY_OFFSET);</span><br><span class=\"line\">\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc-&gt;blksz);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read MBR Header from device */</span></span><br><span class=\"line\">\tlba = <span class=\"number\">0</span>; <span class=\"comment\">/* MBR is always at 0 */</span></span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* MBR (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*** ERROR: Can&#x27;t read MBR header ***\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Header from device */</span></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* GPT Header (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Can&#x27;t read GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (validate_gpt_header(pgpt_head, lba, dev_desc-&gt;lba)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: validate_gpt_header GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dev_desc-&gt;sig_type == SIG_TYPE_NONE) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">efi_guid_t</span> empty = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(&amp;pgpt_head-&gt;disk_guid, &amp;empty, <span class=\"keyword\">sizeof</span>(empty))) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_GUID;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(&amp;dev_desc-&gt;guid_sig, &amp;pgpt_head-&gt;disk_guid,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">sizeof</span>(empty));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbr-&gt;unique_mbr_signature != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_MBR;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;mbr_sig = mbr-&gt;unique_mbr_signature;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Entries from device */</span></span><br><span class=\"line\">\tlba = le64_to_cpu(pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head-&gt;num_partition_entries) *</span><br><span class=\"line\">\t\t\t\t   \tle32_to_cpu(pgpt_head-&gt;sizeof_partition_entry)),</span><br><span class=\"line\">\t\t\t\t  \tdev_desc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR:read entries (lba=%llu) ***\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_size = dev_desc-&gt;blksz;</span><br><span class=\"line\">\tvalidate_gpt_entries(pgpt_head, entries);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdebug(<span class=\"string\">&quot;%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)(ulong)lba, blk_cnt, blk_size);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t * build info, layout of meta_data:</span></span><br><span class=\"line\"><span class=\"comment\">\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">\t<span class=\"comment\">/*this value makes we known the reserved memory is available*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data, (<span class=\"type\">void</span> *)&amp;tag, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL1_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_size, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL2_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_cnt, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*data_size = meta_data_size;</span><br><span class=\"line\">\t*data = meta_data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_OUT:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(meta_data);</span><br><span class=\"line\">\tmeta_data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"http://www.wowotech.net/device_model/dt-code-file-struct-parse.html\">Device Tree（四）：文件结构解析 (wowotech.net)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376295326\">Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376296222\">Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/solo666/p/16518154.html\">https://www.cnblogs.com/solo666/p/16518154.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n</blockquote>\n<p>U-Boot官网:<code>https://docs.u-boot.org/en/latest/</code></p>\n<p>u-boot启动流程</p>\n<ul>\n<li>板子上电以后，首先执行的是ROM中的一段启动代码。启动代码<strong>根据寄存器&#x2F;外部管脚配置</strong>，确定是进入下载模式，还是从某介质(Flash&#x2F;EMMC&#x2F;SD卡等存储设备)启动u-boot</li>\n</ul>\n<blockquote>\n<p>ROM中的代码是固化的，无法修改</p>\n</blockquote>\n<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><blockquote>\n<p>FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。</p>\n<p>uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  </p>\n</blockquote>\n<blockquote>\n<p>U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc&#x2F;README.fdt-control</p>\n</blockquote>\n<h3 id=\"dtb在U-boot中的位置\"><a href=\"#dtb在U-boot中的位置\" class=\"headerlink\" title=\"dtb在U-boot中的位置\"></a>dtb在U-boot中的位置</h3><ul>\n<li>dtb能够以两种形式编译到U-boot的镜像中</li>\n</ul>\n<ol>\n<li>dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址</p>\n</blockquote>\n<ol>\n<li>dtb集成到u-boot的bin文件内部</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb</p>\n</blockquote>\n<ol>\n<li>获取dts文件的地址gd-&gt;fdt_blob</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 宏用来表示是否把dtb文件放在uboot.bin的文件中</span><br><span class=\"line\">CONFIG_OF_EMBED</span><br><span class=\"line\"></span><br><span class=\"line\">// 单独编译dtb文件</span><br><span class=\"line\">CONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址</span><br><span class=\"line\"></span><br><span class=\"line\">gd-&gt;fdt_blob = (ulong *)&amp;_end;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以通过fdtcontroladdr环境变量来指定fdt的地址</span><br><span class=\"line\">gd-&gt;fdt_blob = (void *)getenv_ulong(&quot;fdtcontroladdr&quot;, 16,</span><br><span class=\"line\">\t\t\t\t\t\t(uintptr_t)gd-&gt;fdt_blob); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dtb解析接口\"><a href=\"#dtb解析接口\" class=\"headerlink\" title=\"dtb解析接口\"></a>dtb解析接口</h3><ul>\n<li>定义在lib&#x2F;fdtdec.c文件中，节点变量node中存放的是偏移地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点</span><br><span class=\"line\">int fdt_path_offset(const void *fdt, const char *path)</span><br><span class=\"line\">eg：node = fdt_path_offset(gd-&gt;fdt_blob, “/aliases”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个字符串属性值</span><br><span class=\"line\">const void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)</span><br><span class=\"line\">eg： mac = fdt_getprop(gd-&gt;fdt_blob, node, “mac-address”, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个整形数组属性值</span><br><span class=\"line\">int fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)</span><br><span class=\"line\">eg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的地址属性值</span><br><span class=\"line\">fdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)</span><br><span class=\"line\">eg：fdtdec_get_addr(blob, node, “reg”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得config节点下的整形属性、bool属性、字符串等等</span><br><span class=\"line\">fdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下的name节点的偏移</span><br><span class=\"line\">int fdtdec_get_chosen_node(const void *blob, const char *name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下name属性的值</span><br><span class=\"line\">const char *fdtdec_get_chosen_prop(const void *blob, const char *name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义在lib&#x2F;fdtdec_common.c文件中</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得节点node的某个整形属性值</span><br><span class=\"line\">int fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)</span><br><span class=\"line\">eg： bus-&gt;udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个无符号整形属性值</span><br><span class=\"line\">fdtdec_get_uint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fdt-命令\"><a href=\"#fdt-命令\" class=\"headerlink\" title=\"fdt 命令\"></a>fdt 命令</h2><p>对于u-boot提供了fdt的相关命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdt - flattened device tree utility commands</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">fdt addr [-c]  &lt;addr&gt; [&lt;length&gt;]   - Set the [control] fdt location to &lt;addr&gt;</span><br><span class=\"line\">fdt apply &lt;addr&gt;                    - Apply overlay to the DT</span><br><span class=\"line\">fdt move   &lt;fdt&gt; &lt;newaddr&gt; &lt;length&gt; - Copy the fdt to &lt;addr&gt; and make it active</span><br><span class=\"line\">fdt resize [&lt;extrasize&gt;]            - Resize fdt to size + padding to 4k addr + some optional &lt;extrasize&gt; if needed</span><br><span class=\"line\">fdt print  &lt;path&gt; [&lt;prop&gt;]          - Recursive print starting at &lt;path&gt;</span><br><span class=\"line\">fdt list   &lt;path&gt; [&lt;prop&gt;]          - Print one level starting at &lt;path&gt;</span><br><span class=\"line\">fdt get value &lt;var&gt; &lt;path&gt; &lt;prop&gt;   - Get &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get name &lt;var&gt; &lt;path&gt; &lt;index&gt;   - Get name of node &lt;index&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get addr &lt;var&gt; &lt;path&gt; &lt;prop&gt;    - Get start address of &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get size &lt;var&gt; &lt;path&gt; [&lt;prop&gt;]  - Get size of [&lt;property&gt;] or num nodes and store in &lt;var&gt;</span><br><span class=\"line\">fdt set    &lt;path&gt; &lt;prop&gt; [&lt;val&gt;]    - Set &lt;property&gt; [to &lt;val&gt;]</span><br><span class=\"line\">fdt mknode &lt;path&gt; &lt;node&gt;            - Create a new node after &lt;path&gt;</span><br><span class=\"line\">fdt rm     &lt;path&gt; [&lt;prop&gt;]          - Delete the node or &lt;property&gt;</span><br><span class=\"line\">fdt header                          - Display header info</span><br><span class=\"line\">fdt bootcpu &lt;id&gt;                    - Set boot cpuid</span><br><span class=\"line\">fdt memory &lt;addr&gt; &lt;size&gt;            - Add/Update memory node</span><br><span class=\"line\">fdt rsvmem print                    - Show current mem reserves</span><br><span class=\"line\">fdt rsvmem add &lt;addr&gt; &lt;size&gt;        - Add a mem reserve</span><br><span class=\"line\">fdt rsvmem delete &lt;index&gt;           - Delete a mem reserves</span><br><span class=\"line\">fdt chosen [&lt;start&gt; &lt;end&gt;]          - Add/update the /chosen branch in the tree</span><br><span class=\"line\">                                        &lt;start&gt;/&lt;end&gt; - initrd start/end addr</span><br><span class=\"line\">NOTE: Dereference aliases by omitting the leading &#x27;/&#x27;, e.g. fdt print ethernet0.</span><br></pre></td></tr></table></figure>\n\n<p>fdt print加path参数，则打path内容，如下(其中&#x2F;memory是path)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U-Boot&gt; fdt print /memory</span><br><span class=\"line\">memory &#123;</span><br><span class=\"line\">device_type = <span class=\"string\">&quot;memory&quot;</span>;</span><br><span class=\"line\">reg = &lt;<span class=\"number\">0x70000000</span> <span class=\"number\">0x4000000</span>&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">U-Boot&gt; fdt print #不加参数时，打印出整颗树</span><br></pre></td></tr></table></figure>\n\n\n\n<p>二、u-boot 获取GPT分区表</p>\n<p>在uboot中通过命令打印分区表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part list mmc 0</span><br></pre></td></tr></table></figure>\n\n<p>3588-android-uboot</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;command.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;android_image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mmc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memalign.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fdtdec.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PART_MAX_COUNT  128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tLAB_SIZE\t\t512</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tHEADER_OFFSET\tLAB_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tENTRY_OFFSET\t(2 * LAB_SIZE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL1_OFFSET\t\tsizeof(u64)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL2_OFFSET\t\t(2 * sizeof(u64))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> u64 <span class=\"title function_\">get_gpt_blk_cnt_and_print</span><span class=\"params\">(<span class=\"keyword\">struct</span> blk_desc *dev_desc,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> efi_str[PARTNAME_SZ + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tu64 gpt_part_size, gpt_blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgpt_entry *gpt_e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_e = *gpt_pte;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gpt_head-&gt;num_partition_entries; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,</span><br><span class=\"line\">\t\t\t\t\t     PARTNAME_SZ + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: part: %2d name - GPT: %16s &quot;</span>,</span><br><span class=\"line\">\t\t      __func__, i, efi_str);</span><br><span class=\"line\">\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -</span><br><span class=\"line\">\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tgpt_blk_cnt += gpt_part_size;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(gpt_part_size == <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size(LBA) - GPT: %8llu &quot;</span>,</span><br><span class=\"line\">\t\t      (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)gpt_part_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start LBA - GPT: %8llu \\n&quot;</span>,</span><br><span class=\"line\">\t\t      le64_to_cpu(gpt_e[i].starting_lba));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gpt_blk_cnt + gpt_e[<span class=\"number\">0</span>].starting_lba - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">get_gpt_meta_data</span><span class=\"params\">(u64 *data_size, <span class=\"type\">void</span> **data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gpt_header *pgpt_head;</span><br><span class=\"line\">\tgpt_entry *entries;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *meta_data;</span><br><span class=\"line\">\tu64 meta_data_size, gpt_entries_size;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">blk_desc</span> *<span class=\"title\">dev_desc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mmc</span> *<span class=\"title\">mmc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tu64 blk_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 tag = <span class=\"number\">0x55AA</span>;</span><br><span class=\"line\">\t<span class=\"type\">lbaint_t</span> lba;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data_size || !data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Invalid Argument(s) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mmc = do_returnmmc();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mmc)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> CMD_RET_FAILURE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dev_desc = mmc_get_blk_desc(mmc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dev_desc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: mmc_get_blk_desc err ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_entries_size = <span class=\"keyword\">sizeof</span>(gpt_entry) * PART_MAX_COUNT;</span><br><span class=\"line\">\tmeta_data_size = LAB_SIZE + <span class=\"keyword\">sizeof</span>(gpt_header) + gpt_entries_size;</span><br><span class=\"line\">\tmeta_data = <span class=\"built_in\">malloc</span>(meta_data_size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!meta_data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: malloc memory (gpt meta data) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(meta_data, <span class=\"number\">0</span>, meta_data_size);</span><br><span class=\"line\">\tpgpt_head = (gpt_header *)((<span class=\"type\">char</span> *)meta_data + HEADER_OFFSET);</span><br><span class=\"line\">\tentries = (gpt_entry *)((<span class=\"type\">char</span> *)meta_data + ENTRY_OFFSET);</span><br><span class=\"line\">\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc-&gt;blksz);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read MBR Header from device */</span></span><br><span class=\"line\">\tlba = <span class=\"number\">0</span>; <span class=\"comment\">/* MBR is always at 0 */</span></span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* MBR (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*** ERROR: Can&#x27;t read MBR header ***\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Header from device */</span></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* GPT Header (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Can&#x27;t read GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (validate_gpt_header(pgpt_head, lba, dev_desc-&gt;lba)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: validate_gpt_header GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dev_desc-&gt;sig_type == SIG_TYPE_NONE) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">efi_guid_t</span> empty = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(&amp;pgpt_head-&gt;disk_guid, &amp;empty, <span class=\"keyword\">sizeof</span>(empty))) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_GUID;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(&amp;dev_desc-&gt;guid_sig, &amp;pgpt_head-&gt;disk_guid,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">sizeof</span>(empty));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbr-&gt;unique_mbr_signature != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_MBR;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;mbr_sig = mbr-&gt;unique_mbr_signature;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Entries from device */</span></span><br><span class=\"line\">\tlba = le64_to_cpu(pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head-&gt;num_partition_entries) *</span><br><span class=\"line\">\t\t\t\t   \tle32_to_cpu(pgpt_head-&gt;sizeof_partition_entry)),</span><br><span class=\"line\">\t\t\t\t  \tdev_desc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR:read entries (lba=%llu) ***\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_size = dev_desc-&gt;blksz;</span><br><span class=\"line\">\tvalidate_gpt_entries(pgpt_head, entries);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdebug(<span class=\"string\">&quot;%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)(ulong)lba, blk_cnt, blk_size);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t * build info, layout of meta_data:</span></span><br><span class=\"line\"><span class=\"comment\">\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">\t<span class=\"comment\">/*this value makes we known the reserved memory is available*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data, (<span class=\"type\">void</span> *)&amp;tag, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL1_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_size, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL2_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_cnt, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*data_size = meta_data_size;</span><br><span class=\"line\">\t*data = meta_data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_OUT:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(meta_data);</span><br><span class=\"line\">\tmeta_data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"http://www.wowotech.net/device_model/dt-code-file-struct-parse.html\">Device Tree（四）：文件结构解析 (wowotech.net)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376295326\">Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376296222\">Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/solo666/p/16518154.html\">https://www.cnblogs.com/solo666/p/16518154.html</a></p>\n"},{"_content":"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\n\n磁盘上的哪些结构存储文件系统的数据和元数据？\n\n当一个进程打开一个文件时会发生什么？\n\n在读取或写入期间访问哪些磁盘结构？","source":"back_posts/OSTEP-40-文件系统实现.md","raw":"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\n\n磁盘上的哪些结构存储文件系统的数据和元数据？\n\n当一个进程打开一个文件时会发生什么？\n\n在读取或写入期间访问哪些磁盘结构？","date":"2024-05-15T06:11:08.982Z","updated":"2024-05-15T06:11:08.982Z","path":"back_posts/OSTEP-40-文件系统实现.html","title":"","comments":1,"layout":"page","_id":"clw7fflkt000bx2w0bmaie0nz","content":"<p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf</a></p>\n<p>磁盘上的哪些结构存储文件系统的数据和元数据？</p>\n<p>当一个进程打开一个文件时会发生什么？</p>\n<p>在读取或写入期间访问哪些磁盘结构？</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf</a></p>\n<p>磁盘上的哪些结构存储文件系统的数据和元数据？</p>\n<p>当一个进程打开一个文件时会发生什么？</p>\n<p>在读取或写入期间访问哪些磁盘结构？</p>\n"},{"title":"Hexo在多台电脑上提交和更新","date":"2023-09-13T07:35:30.000Z","categories":["test"],"tags":["test"],"_content":"\n[toc]\n\n\n\n# 1.博客搭建\n\nhttps://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\n\n# 2.创建一个新文件夹new，用于上传hexo博客目录\n\n将以下目录（除了红色方框的目录）拷贝到新目录中\n\n![image-20230913154437526](../imgs/image-20230913154437526.png)\n\n参考：https://blog.csdn.net/K1052176873/article/details/122879462 \n\n# 3.github上创建hexo分支并设置为默认分支\n\n## 创建hexo分支\n\n![image-20230913154510439](../imgs/image-20230913154510439.png)\n\n## 将hexo分支设置为默认分支\n\n![image-20230913154524492](../imgs/image-20230913154524492.png)\n\n# 4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\n\n基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题\n当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接\n\n```\ncd new\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\n```\n\n\n\n## 1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n## 2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\n\n![image-20230913154559571](../imgs/image-20230913154559571.png)\n\n## 3.送new目录中的相关文件到远程仓库 hexo分支\n\n```\ngit add .\ngit commit –m add_branch\ngit push        \n\n```\n\n\n\n# 5.！新环境中快速搭建博客环境！\n\n## 1.设置ssh\n\n参考：https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\n\n```\nssh-keygen -t ed25519 -C \"your_email@gmail.com\"\ncat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n\n## 2.安装nodejs和hexo\n\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm  \n```\n\n## 3.拉取hexo博客目录\n\n```\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git        #不需要hexo init这条指令\nnpm i hexo-renderer-marked\n\n\n#更新博客 添加新文章 hello-world\nhexo new \"hello-world\"\ngit add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world \ngit commit –m \"hello-world\"\ngit push         #或者git push origin hexo\n\nhexo g        #生成静态页面\nhexo s        #启动本地服务器 预览\nhexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好\n```\n\n# 6.遇到的问题\n\n## 问题1.nodejs版本过低\n\nnpm WARN notsup Unsupported engine for hexo@6.3.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo@6.3.0\nnpm WARN notsup Unsupported engine for hexo-front-matter@3.0.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-front-matter@3.0.0\nnpm WARN notsup Unsupported engine for hexo-cli@4.3.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-cli@4.3.1\nnpm WARN notsup Unsupported engine for hexo-log@3.2.0: wanted: {\"node\":\">=12.4.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@3.2.0\nnpm WARN notsup Unsupported engine for abbrev@2.0.0: wanted: {\"node\":\"^14.17.0 || ^16.13.0 || >=18.0.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: abbrev@2.0.0\nnpm WARN notsup Unsupported engine for hexo-fs@4.1.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-fs@4.1.1\nnpm WARN notsup Unsupported engine for hexo-log@4.1.0: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@4.1.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.3 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n## 升级nodejs\n\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm\nsource ~/.bashrc            #加载 nvm\nnvm install node            #使用 nvm 安装最新版本的 Node.js\nnode -v                     #验证 Node.js 版本\n```\n\n\n\n\n\n## 问题2.hexo博客图片不显示\n\nhttps://blog.csdn.net/QRLYLETITBE/article/details/127737904 \n\n```\nnpm i hexo-renderer-marked\n\n```\n\n## 新建imgs文件夹\n\n![image-20230913161638961](../imgs/image-20230913161638961.png)\n\n```\nmarked:\n  prependRoot: true\n  postAsset: true\n\n```\n## 修改图片路径\n\n![image-20230913161842174](../imgs/image-20230913161842174.png)\n","source":"back_posts/Hexo在多台电脑上提交和更新.md","raw":"---\ntitle: Hexo在多台电脑上提交和更新\ndate: 2023-09-13 15:35:30\ncategories:\n- test\ntags:\n- test\n---\n\n[toc]\n\n\n\n# 1.博客搭建\n\nhttps://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\n\n# 2.创建一个新文件夹new，用于上传hexo博客目录\n\n将以下目录（除了红色方框的目录）拷贝到新目录中\n\n![image-20230913154437526](../imgs/image-20230913154437526.png)\n\n参考：https://blog.csdn.net/K1052176873/article/details/122879462 \n\n# 3.github上创建hexo分支并设置为默认分支\n\n## 创建hexo分支\n\n![image-20230913154510439](../imgs/image-20230913154510439.png)\n\n## 将hexo分支设置为默认分支\n\n![image-20230913154524492](../imgs/image-20230913154524492.png)\n\n# 4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\n\n基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题\n当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接\n\n```\ncd new\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\n```\n\n\n\n## 1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n## 2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\n\n![image-20230913154559571](../imgs/image-20230913154559571.png)\n\n## 3.送new目录中的相关文件到远程仓库 hexo分支\n\n```\ngit add .\ngit commit –m add_branch\ngit push        \n\n```\n\n\n\n# 5.！新环境中快速搭建博客环境！\n\n## 1.设置ssh\n\n参考：https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\n\n```\nssh-keygen -t ed25519 -C \"your_email@gmail.com\"\ncat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n\n## 2.安装nodejs和hexo\n\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm  \n```\n\n## 3.拉取hexo博客目录\n\n```\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git        #不需要hexo init这条指令\nnpm i hexo-renderer-marked\n\n\n#更新博客 添加新文章 hello-world\nhexo new \"hello-world\"\ngit add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world \ngit commit –m \"hello-world\"\ngit push         #或者git push origin hexo\n\nhexo g        #生成静态页面\nhexo s        #启动本地服务器 预览\nhexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好\n```\n\n# 6.遇到的问题\n\n## 问题1.nodejs版本过低\n\nnpm WARN notsup Unsupported engine for hexo@6.3.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo@6.3.0\nnpm WARN notsup Unsupported engine for hexo-front-matter@3.0.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-front-matter@3.0.0\nnpm WARN notsup Unsupported engine for hexo-cli@4.3.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-cli@4.3.1\nnpm WARN notsup Unsupported engine for hexo-log@3.2.0: wanted: {\"node\":\">=12.4.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@3.2.0\nnpm WARN notsup Unsupported engine for abbrev@2.0.0: wanted: {\"node\":\"^14.17.0 || ^16.13.0 || >=18.0.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: abbrev@2.0.0\nnpm WARN notsup Unsupported engine for hexo-fs@4.1.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-fs@4.1.1\nnpm WARN notsup Unsupported engine for hexo-log@4.1.0: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@4.1.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.3 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n## 升级nodejs\n\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm\nsource ~/.bashrc            #加载 nvm\nnvm install node            #使用 nvm 安装最新版本的 Node.js\nnode -v                     #验证 Node.js 版本\n```\n\n\n\n\n\n## 问题2.hexo博客图片不显示\n\nhttps://blog.csdn.net/QRLYLETITBE/article/details/127737904 \n\n```\nnpm i hexo-renderer-marked\n\n```\n\n## 新建imgs文件夹\n\n![image-20230913161638961](../imgs/image-20230913161638961.png)\n\n```\nmarked:\n  prependRoot: true\n  postAsset: true\n\n```\n## 修改图片路径\n\n![image-20230913161842174](../imgs/image-20230913161842174.png)\n","updated":"2024-05-15T06:11:08.981Z","path":"back_posts/Hexo在多台电脑上提交和更新.html","comments":1,"layout":"page","_id":"clw7fflku000cx2w08gypa6ej","content":"<p>[toc]</p>\n<h1 id=\"1-博客搭建\"><a href=\"#1-博客搭建\" class=\"headerlink\" title=\"1.博客搭建\"></a>1.博客搭建</h1><p><a href=\"https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\">https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a></p>\n<h1 id=\"2-创建一个新文件夹new，用于上传hexo博客目录\"><a href=\"#2-创建一个新文件夹new，用于上传hexo博客目录\" class=\"headerlink\" title=\"2.创建一个新文件夹new，用于上传hexo博客目录\"></a>2.创建一个新文件夹new，用于上传hexo博客目录</h1><p>将以下目录（除了红色方框的目录）拷贝到新目录中</p>\n<p><img src=\"/../imgs/image-20230913154437526.png\" alt=\"image-20230913154437526\"></p>\n<p>参考：<a href=\"https://blog.csdn.net/K1052176873/article/details/122879462\">https://blog.csdn.net/K1052176873/article/details/122879462</a> </p>\n<h1 id=\"3-github上创建hexo分支并设置为默认分支\"><a href=\"#3-github上创建hexo分支并设置为默认分支\" class=\"headerlink\" title=\"3.github上创建hexo分支并设置为默认分支\"></a>3.github上创建hexo分支并设置为默认分支</h1><h2 id=\"创建hexo分支\"><a href=\"#创建hexo分支\" class=\"headerlink\" title=\"创建hexo分支\"></a>创建hexo分支</h2><p><img src=\"/../imgs/image-20230913154510439.png\" alt=\"image-20230913154510439\"></p>\n<h2 id=\"将hexo分支设置为默认分支\"><a href=\"#将hexo分支设置为默认分支\" class=\"headerlink\" title=\"将hexo分支设置为默认分支\"></a>将hexo分支设置为默认分支</h2><p><img src=\"/../imgs/image-20230913154524492.png\" alt=\"image-20230913154524492\"></p>\n<h1 id=\"4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\"><a href=\"#4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\" class=\"headerlink\" title=\"4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\"></a>4.进入新建的文件夹中git clone，再上传相关文件至hexo分支</h1><p>基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题<br>当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd new</span><br><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"><a href=\"#1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\" class=\"headerlink\" title=\"1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"></a>1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\"><a href=\"#2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\" class=\"headerlink\" title=\"2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\"></a>2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录</h2><p><img src=\"/../imgs/image-20230913154559571.png\" alt=\"image-20230913154559571\"></p>\n<h2 id=\"3-送new目录中的相关文件到远程仓库-hexo分支\"><a href=\"#3-送new目录中的相关文件到远程仓库-hexo分支\" class=\"headerlink\" title=\"3.送new目录中的相关文件到远程仓库 hexo分支\"></a>3.送new目录中的相关文件到远程仓库 hexo分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m add_branch</span><br><span class=\"line\">git push        </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-！新环境中快速搭建博客环境！\"><a href=\"#5-！新环境中快速搭建博客环境！\" class=\"headerlink\" title=\"5.！新环境中快速搭建博客环境！\"></a>5.！新环境中快速搭建博客环境！</h1><h2 id=\"1-设置ssh\"><a href=\"#1-设置ssh\" class=\"headerlink\" title=\"1.设置ssh\"></a>1.设置ssh</h2><p>参考：<a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -C &quot;your_email@gmail.com&quot;</span><br><span class=\"line\">cat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装nodejs和hexo\"><a href=\"#2-安装nodejs和hexo\" class=\"headerlink\" title=\"2.安装nodejs和hexo\"></a>2.安装nodejs和hexo</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取hexo博客目录\"><a href=\"#3-拉取hexo博客目录\" class=\"headerlink\" title=\"3.拉取hexo博客目录\"></a>3.拉取hexo博客目录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git        #不需要hexo init这条指令</span><br><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#更新博客 添加新文章 hello-world</span><br><span class=\"line\">hexo new &quot;hello-world&quot;</span><br><span class=\"line\">git add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world </span><br><span class=\"line\">git commit –m &quot;hello-world&quot;</span><br><span class=\"line\">git push         #或者git push origin hexo</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g        #生成静态页面</span><br><span class=\"line\">hexo s        #启动本地服务器 预览</span><br><span class=\"line\">hexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6.遇到的问题\"></a>6.遇到的问题</h1><h2 id=\"问题1-nodejs版本过低\"><a href=\"#问题1-nodejs版本过低\" class=\"headerlink\" title=\"问题1.nodejs版本过低\"></a>问题1.nodejs版本过低</h2><p>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#64;&#x36;&#46;&#51;&#x2e;&#48;\">&#x68;&#x65;&#x78;&#x6f;&#64;&#x36;&#46;&#51;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#x6f;&#x40;&#54;&#46;&#x33;&#x2e;&#x30;\">&#x68;&#101;&#x78;&#x6f;&#x40;&#54;&#46;&#x33;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#101;&#120;&#111;&#45;&#102;&#114;&#111;&#x6e;&#116;&#x2d;&#109;&#x61;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#x30;\">&#x68;&#101;&#120;&#111;&#45;&#102;&#114;&#111;&#x6e;&#116;&#x2d;&#109;&#x61;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#x2d;&#x66;&#114;&#x6f;&#x6e;&#x74;&#x2d;&#109;&#97;&#116;&#x74;&#101;&#114;&#x40;&#x33;&#x2e;&#x30;&#x2e;&#x30;\">&#x68;&#x65;&#120;&#111;&#x2d;&#x66;&#114;&#x6f;&#x6e;&#x74;&#x2d;&#109;&#97;&#116;&#x74;&#101;&#114;&#x40;&#x33;&#x2e;&#x30;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#x65;&#120;&#x6f;&#45;&#99;&#108;&#105;&#x40;&#52;&#x2e;&#51;&#x2e;&#x31;\">&#104;&#x65;&#120;&#x6f;&#45;&#99;&#108;&#105;&#x40;&#52;&#x2e;&#51;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#45;&#99;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#51;&#x2e;&#x31;\">&#x68;&#x65;&#x78;&#x6f;&#45;&#99;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#51;&#x2e;&#x31;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#120;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#x40;&#x33;&#46;&#x32;&#46;&#48;\">&#x68;&#x65;&#120;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#x40;&#x33;&#46;&#x32;&#46;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.4.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#x78;&#111;&#x2d;&#108;&#111;&#103;&#x40;&#x33;&#x2e;&#x32;&#46;&#x30;\">&#104;&#x65;&#x78;&#111;&#x2d;&#108;&#111;&#103;&#x40;&#x33;&#x2e;&#x32;&#46;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x61;&#x62;&#x62;&#114;&#101;&#118;&#64;&#50;&#x2e;&#x30;&#46;&#x30;\">&#x61;&#x62;&#x62;&#114;&#101;&#118;&#64;&#50;&#x2e;&#x30;&#46;&#x30;</a>: wanted: {“node”:”^14.17.0 || ^16.13.0 || &gt;&#x3D;18.0.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#97;&#98;&#x62;&#114;&#101;&#x76;&#x40;&#50;&#46;&#x30;&#46;&#48;\">&#97;&#98;&#x62;&#114;&#101;&#x76;&#x40;&#50;&#46;&#x30;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#45;&#x66;&#x73;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;\">&#104;&#101;&#120;&#x6f;&#45;&#x66;&#x73;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#111;&#x2d;&#102;&#x73;&#64;&#x34;&#46;&#49;&#46;&#49;\">&#x68;&#101;&#x78;&#111;&#x2d;&#102;&#x73;&#64;&#x34;&#46;&#49;&#46;&#49;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#111;&#x2d;&#108;&#x6f;&#x67;&#64;&#52;&#46;&#x31;&#46;&#48;\">&#x68;&#x65;&#x78;&#111;&#x2d;&#108;&#x6f;&#x67;&#64;&#52;&#46;&#x31;&#46;&#48;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#120;&#111;&#x2d;&#x6c;&#111;&#103;&#x40;&#52;&#46;&#x31;&#x2e;&#48;\">&#104;&#x65;&#120;&#111;&#x2d;&#x6c;&#111;&#103;&#x40;&#52;&#46;&#x31;&#x2e;&#48;</a><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:&#102;&#x73;&#x65;&#118;&#x65;&#x6e;&#x74;&#x73;&#64;&#x32;&#x2e;&#51;&#46;&#x33;\">&#102;&#x73;&#x65;&#118;&#x65;&#x6e;&#x74;&#x73;&#64;&#x32;&#x2e;&#51;&#46;&#x33;</a> (node_modules&#x2F;fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:&#102;&#x73;&#101;&#118;&#101;&#x6e;&#x74;&#115;&#x40;&#x32;&#46;&#51;&#x2e;&#51;\">&#102;&#x73;&#101;&#118;&#101;&#x6e;&#x74;&#115;&#x40;&#x32;&#46;&#51;&#x2e;&#51;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p>\n<h2 id=\"升级nodejs\"><a href=\"#升级nodejs\" class=\"headerlink\" title=\"升级nodejs\"></a>升级nodejs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm</span><br><span class=\"line\">source ~/.bashrc            #加载 nvm</span><br><span class=\"line\">nvm install node            #使用 nvm 安装最新版本的 Node.js</span><br><span class=\"line\">node -v                     #验证 Node.js 版本</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题2-hexo博客图片不显示\"><a href=\"#问题2-hexo博客图片不显示\" class=\"headerlink\" title=\"问题2.hexo博客图片不显示\"></a>问题2.hexo博客图片不显示</h2><p><a href=\"https://blog.csdn.net/QRLYLETITBE/article/details/127737904\">https://blog.csdn.net/QRLYLETITBE/article/details/127737904</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建imgs文件夹\"><a href=\"#新建imgs文件夹\" class=\"headerlink\" title=\"新建imgs文件夹\"></a>新建imgs文件夹</h2><p><img src=\"/../imgs/image-20230913161638961.png\" alt=\"image-20230913161638961\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改图片路径\"><a href=\"#修改图片路径\" class=\"headerlink\" title=\"修改图片路径\"></a>修改图片路径</h2><p><img src=\"/../imgs/image-20230913161842174.png\" alt=\"image-20230913161842174\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-博客搭建\"><a href=\"#1-博客搭建\" class=\"headerlink\" title=\"1.博客搭建\"></a>1.博客搭建</h1><p><a href=\"https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\">https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a></p>\n<h1 id=\"2-创建一个新文件夹new，用于上传hexo博客目录\"><a href=\"#2-创建一个新文件夹new，用于上传hexo博客目录\" class=\"headerlink\" title=\"2.创建一个新文件夹new，用于上传hexo博客目录\"></a>2.创建一个新文件夹new，用于上传hexo博客目录</h1><p>将以下目录（除了红色方框的目录）拷贝到新目录中</p>\n<p><img src=\"/../imgs/image-20230913154437526.png\" alt=\"image-20230913154437526\"></p>\n<p>参考：<a href=\"https://blog.csdn.net/K1052176873/article/details/122879462\">https://blog.csdn.net/K1052176873/article/details/122879462</a> </p>\n<h1 id=\"3-github上创建hexo分支并设置为默认分支\"><a href=\"#3-github上创建hexo分支并设置为默认分支\" class=\"headerlink\" title=\"3.github上创建hexo分支并设置为默认分支\"></a>3.github上创建hexo分支并设置为默认分支</h1><h2 id=\"创建hexo分支\"><a href=\"#创建hexo分支\" class=\"headerlink\" title=\"创建hexo分支\"></a>创建hexo分支</h2><p><img src=\"/../imgs/image-20230913154510439.png\" alt=\"image-20230913154510439\"></p>\n<h2 id=\"将hexo分支设置为默认分支\"><a href=\"#将hexo分支设置为默认分支\" class=\"headerlink\" title=\"将hexo分支设置为默认分支\"></a>将hexo分支设置为默认分支</h2><p><img src=\"/../imgs/image-20230913154524492.png\" alt=\"image-20230913154524492\"></p>\n<h1 id=\"4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\"><a href=\"#4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\" class=\"headerlink\" title=\"4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\"></a>4.进入新建的文件夹中git clone，再上传相关文件至hexo分支</h1><p>基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题<br>当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd new</span><br><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"><a href=\"#1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\" class=\"headerlink\" title=\"1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"></a>1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\"><a href=\"#2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\" class=\"headerlink\" title=\"2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\"></a>2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录</h2><p><img src=\"/../imgs/image-20230913154559571.png\" alt=\"image-20230913154559571\"></p>\n<h2 id=\"3-送new目录中的相关文件到远程仓库-hexo分支\"><a href=\"#3-送new目录中的相关文件到远程仓库-hexo分支\" class=\"headerlink\" title=\"3.送new目录中的相关文件到远程仓库 hexo分支\"></a>3.送new目录中的相关文件到远程仓库 hexo分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m add_branch</span><br><span class=\"line\">git push        </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-！新环境中快速搭建博客环境！\"><a href=\"#5-！新环境中快速搭建博客环境！\" class=\"headerlink\" title=\"5.！新环境中快速搭建博客环境！\"></a>5.！新环境中快速搭建博客环境！</h1><h2 id=\"1-设置ssh\"><a href=\"#1-设置ssh\" class=\"headerlink\" title=\"1.设置ssh\"></a>1.设置ssh</h2><p>参考：<a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -C &quot;your_email@gmail.com&quot;</span><br><span class=\"line\">cat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装nodejs和hexo\"><a href=\"#2-安装nodejs和hexo\" class=\"headerlink\" title=\"2.安装nodejs和hexo\"></a>2.安装nodejs和hexo</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取hexo博客目录\"><a href=\"#3-拉取hexo博客目录\" class=\"headerlink\" title=\"3.拉取hexo博客目录\"></a>3.拉取hexo博客目录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git        #不需要hexo init这条指令</span><br><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#更新博客 添加新文章 hello-world</span><br><span class=\"line\">hexo new &quot;hello-world&quot;</span><br><span class=\"line\">git add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world </span><br><span class=\"line\">git commit –m &quot;hello-world&quot;</span><br><span class=\"line\">git push         #或者git push origin hexo</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g        #生成静态页面</span><br><span class=\"line\">hexo s        #启动本地服务器 预览</span><br><span class=\"line\">hexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6.遇到的问题\"></a>6.遇到的问题</h1><h2 id=\"问题1-nodejs版本过低\"><a href=\"#问题1-nodejs版本过低\" class=\"headerlink\" title=\"问题1.nodejs版本过低\"></a>问题1.nodejs版本过低</h2><p>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#64;&#x36;&#46;&#51;&#x2e;&#48;\">&#x68;&#x65;&#x78;&#x6f;&#64;&#x36;&#46;&#51;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#x6f;&#x40;&#54;&#46;&#x33;&#x2e;&#x30;\">&#x68;&#101;&#x78;&#x6f;&#x40;&#54;&#46;&#x33;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#101;&#120;&#111;&#45;&#102;&#114;&#111;&#x6e;&#116;&#x2d;&#109;&#x61;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#x30;\">&#x68;&#101;&#120;&#111;&#45;&#102;&#114;&#111;&#x6e;&#116;&#x2d;&#109;&#x61;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#x30;&#46;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#x2d;&#x66;&#114;&#x6f;&#x6e;&#x74;&#x2d;&#109;&#97;&#116;&#x74;&#101;&#114;&#x40;&#x33;&#x2e;&#x30;&#x2e;&#x30;\">&#x68;&#x65;&#120;&#111;&#x2d;&#x66;&#114;&#x6f;&#x6e;&#x74;&#x2d;&#109;&#97;&#116;&#x74;&#101;&#114;&#x40;&#x33;&#x2e;&#x30;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#x65;&#120;&#x6f;&#45;&#99;&#108;&#105;&#x40;&#52;&#x2e;&#51;&#x2e;&#x31;\">&#104;&#x65;&#120;&#x6f;&#45;&#99;&#108;&#105;&#x40;&#52;&#x2e;&#51;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#45;&#99;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#51;&#x2e;&#x31;\">&#x68;&#x65;&#x78;&#x6f;&#45;&#99;&#x6c;&#x69;&#x40;&#x34;&#x2e;&#51;&#x2e;&#x31;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#120;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#x40;&#x33;&#46;&#x32;&#46;&#48;\">&#x68;&#x65;&#120;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#x40;&#x33;&#46;&#x32;&#46;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.4.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#x78;&#111;&#x2d;&#108;&#111;&#103;&#x40;&#x33;&#x2e;&#x32;&#46;&#x30;\">&#104;&#x65;&#x78;&#111;&#x2d;&#108;&#111;&#103;&#x40;&#x33;&#x2e;&#x32;&#46;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x61;&#x62;&#x62;&#114;&#101;&#118;&#64;&#50;&#x2e;&#x30;&#46;&#x30;\">&#x61;&#x62;&#x62;&#114;&#101;&#118;&#64;&#50;&#x2e;&#x30;&#46;&#x30;</a>: wanted: {“node”:”^14.17.0 || ^16.13.0 || &gt;&#x3D;18.0.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#97;&#98;&#x62;&#114;&#101;&#x76;&#x40;&#50;&#46;&#x30;&#46;&#48;\">&#97;&#98;&#x62;&#114;&#101;&#x76;&#x40;&#50;&#46;&#x30;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#45;&#x66;&#x73;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;\">&#104;&#101;&#120;&#x6f;&#45;&#x66;&#x73;&#x40;&#x34;&#x2e;&#x31;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#111;&#x2d;&#102;&#x73;&#64;&#x34;&#46;&#49;&#46;&#49;\">&#x68;&#101;&#x78;&#111;&#x2d;&#102;&#x73;&#64;&#x34;&#46;&#49;&#46;&#49;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#111;&#x2d;&#108;&#x6f;&#x67;&#64;&#52;&#46;&#x31;&#46;&#48;\">&#x68;&#x65;&#x78;&#111;&#x2d;&#108;&#x6f;&#x67;&#64;&#52;&#46;&#x31;&#46;&#48;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#120;&#111;&#x2d;&#x6c;&#111;&#103;&#x40;&#52;&#46;&#x31;&#x2e;&#48;\">&#104;&#x65;&#120;&#111;&#x2d;&#x6c;&#111;&#103;&#x40;&#52;&#46;&#x31;&#x2e;&#48;</a><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:&#102;&#x73;&#x65;&#118;&#x65;&#x6e;&#x74;&#x73;&#64;&#x32;&#x2e;&#51;&#46;&#x33;\">&#102;&#x73;&#x65;&#118;&#x65;&#x6e;&#x74;&#x73;&#64;&#x32;&#x2e;&#51;&#46;&#x33;</a> (node_modules&#x2F;fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:&#102;&#x73;&#101;&#118;&#101;&#x6e;&#x74;&#115;&#x40;&#x32;&#46;&#51;&#x2e;&#51;\">&#102;&#x73;&#101;&#118;&#101;&#x6e;&#x74;&#115;&#x40;&#x32;&#46;&#51;&#x2e;&#51;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p>\n<h2 id=\"升级nodejs\"><a href=\"#升级nodejs\" class=\"headerlink\" title=\"升级nodejs\"></a>升级nodejs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm</span><br><span class=\"line\">source ~/.bashrc            #加载 nvm</span><br><span class=\"line\">nvm install node            #使用 nvm 安装最新版本的 Node.js</span><br><span class=\"line\">node -v                     #验证 Node.js 版本</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题2-hexo博客图片不显示\"><a href=\"#问题2-hexo博客图片不显示\" class=\"headerlink\" title=\"问题2.hexo博客图片不显示\"></a>问题2.hexo博客图片不显示</h2><p><a href=\"https://blog.csdn.net/QRLYLETITBE/article/details/127737904\">https://blog.csdn.net/QRLYLETITBE/article/details/127737904</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建imgs文件夹\"><a href=\"#新建imgs文件夹\" class=\"headerlink\" title=\"新建imgs文件夹\"></a>新建imgs文件夹</h2><p><img src=\"/../imgs/image-20230913161638961.png\" alt=\"image-20230913161638961\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改图片路径\"><a href=\"#修改图片路径\" class=\"headerlink\" title=\"修改图片路径\"></a>修改图片路径</h2><p><img src=\"/../imgs/image-20230913161842174.png\" alt=\"image-20230913161842174\"></p>\n"},{"title":"00-rust学习网站","date":"2023-08-26T08:08:57.000Z","categories":["rust"],"tags":["学习网站","rust"],"_content":"\n\n\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","source":"back_posts/00-rust学习网站.md","raw":"---\ntitle: 00-rust学习网站\ndate: 2023-08-26 16:08:57\ncategories:\n- rust\ntags:\n- 学习网站\n- rust\n---\n\n\n\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","updated":"2024-05-15T06:11:08.946Z","path":"back_posts/00-rust学习网站.html","comments":1,"layout":"page","_id":"clw7fflku000dx2w0bwyfbvqe","content":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n"}],"Post":[{"title":"00-rust学习网站","date":"2023-08-26T08:08:57.000Z","_content":"\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","source":"_posts/00-rust学习网站.md","raw":"---\ntitle: 00-rust学习网站\ndate: 2023-08-26 16:08:57\ncategories:\n- rust\ntags:\n- 学习网站\n- rust\n---\n\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","slug":"00-rust学习网站","published":1,"updated":"2024-05-15T06:26:36.420Z","_id":"clvjcoaak0000r9w096yq3vus","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n"},{"title":"01-rust环境搭建","date":"2023-08-26T09:03:59.000Z","_content":"\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","source":"_posts/01-rust环境搭建.md","raw":"---\ntitle: 01-rust环境搭建\ndate: 2023-08-26 17:03:59\ncategories:\n- rust\ntags:\n- rust环境搭建\n- rust\n---\n\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","slug":"01-rust环境搭建","published":1,"updated":"2024-04-28T07:13:38.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaao0001r9w0de539y4w","content":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"github+hexo 博客搭建","date":"2023-08-25T11:32:35.000Z","_content":"\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","source":"_posts/github+hexo博客搭建.md","raw":"---\ntitle: github+hexo 博客搭建\ndate: 2023-08-25 19:32:35\ncategories:\n- test\ntags:\n- test\n---\n\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","slug":"github+hexo博客搭建","published":1,"updated":"2024-04-28T07:13:38.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaar0004r9w0en6ne5w9","content":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n"},{"title":"cpufreq","date":"2024-04-28T09:04:13.000Z","_content":"\n[toc]\n\n# cpufreq\n\n\n\nCPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：\n\n- cpufreq driver\n- cpufreq framework (core)\n- cpufreq governor\n\n一些基本概念：\n\nP-state: voltage and frequency point\n\n总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。\n\n另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。\n\n下面分开来看每个部分。\n\n## Driver\n\n\n\nCpufreq Driver主要负责底层调频的操作，核心是实现 `cpufreq_dirver` 对象，并通过 `cpufreq_register_driver` 将驱动注册到系统，供core部分使用。\n\n其中，最核心的几个回调包括：\n\n- online: hotplug callback\n- offline: hotplug callback\n- target_index: set freq\n- set_boost: enter into boost mode\n\n以 `mediatek-cpufreq-hw.c` 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。\n\ndb845c使用的 `qcom-cpufreq-hw.c` 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。\n\n\\* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。\n\n## Core\n\n\n\nCore部分核心文件是 `/drivers/cpufreq/cpufreq.c`\n\n这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。\n\n`cpufreq_register_driver` (cpufreq_driver* cpufreq_driver)\n\n`cpufreq_register_governor` (cpufreq_governor_list)\n\n`cpufreq_register_notifier` (cpufreq_transition_notifier_list)\n\n`cpufreq_policy_alloc` (cpufreq_policy* PERCPU:cpufreq_cpu_data)\n\n`cpufreq_policy` 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。\n\n每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（`cpufreq_cpu_data`）\n\nMainflow：\n\n1、cpufreq driver注册\n\n2、governor注册（每个policy初始化自己的governor）\n\n3、cpu hotplug state: \"cpufreq:online\"，`cpuhp_cpufreq_online`、`cpuhp_cpufreq_offline`，创建出percpu policy，绑定driver、governor\n\n4、向sysfs创建节点，提供功能\n\n5、governor开始工作，通过 `__cpufreq_driver_target` 进行调频。\n\n- Qos是调频投票机制，用来实现max_freq、min_freq limitation。(`cpufreq_notifier_min` `cpufreq_notifier_max`)，在其他module有需求投票后，freq constrants会被更新。\n\n## Sysfs\n\n\n\n```\n/sys/devices/system/cpu/cpu0/cpufreq/policyX\nscaling_driver\t\t\tr\t# cpufreq driver name\naffected_cpus\t\t\tr\t# cpu\nrelated_cpus\t\t\tr\t# <?>\nscaling_cur_freq\t\trw\t# cur freq\nscaling_min_freq\t\trw\t# min freq limit\nscaling_max_freq\t\trw\t# max freq limit\nscaling_governor\t\trw\t# selected governor\nscaling_available_governors\tr\t# available governors\nscaling_setspeed\t\tr\t# <not supported>\ncpuinfo_min_freq\t\tr\t# hardware min freq\ncpuinfo_max_freq\t\tr\t# hardware max freq\ncpuinfo_transition_latency\tr\t# hardware latency\n```\n\n\n\n## Governors\n\n\n\nGovernor负责从系统收集信息，并触发调频动作。\n\n**powersave**\n\nalways lowest frequency\n\n**performance**\n\nalways highest frequency\n\n**schedutil**\n\nuses CPU utilization data from scheduler to determine target frequence\n\n待完成\n\n**userspace**\n\nallow user space set the frequency\n\n**ondemand**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target by CPU load, 0->min, 100->max\n\n**conservative**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target step by step, up_threshold->up, down_threshold->down\n\n## Files\n\n\n\n```\n- /drivers/cpufreq/cpufreq.c\n- /drivers/cpufreq/cpufreq-dt.c\n- /drivers/cpufreq/cpufreq_stats.c\n- /drivers/cpufreq/cpufreq_conservative.c\n- /drivers/cpufreq/cpufreq_governor.c\n- /drivers/cpufreq/cpufreq_ondemand.c\n- /drivers/cpufreq/cpufreq_powersave.c\n- /drivers/cpufreq/cpufreq_performance.c\n- /drivers/cpufreq/cpufreq_userspace.c\n- /kernel/sched/cpufreq_schedutil.c\n- /kernel/power/qos.c\n```\n\n\n\n## Reference\n\n\n\nhttps://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\n\nhttps://docs.kernel.org/scheduler/schedutil.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_overview.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_driver.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_core.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_governor.html","source":"_posts/cpufreq.md","raw":"---\ntitle: cpufreq\ndate: 2024-04-28 17:04:13\ncategories:\n- kernel\ntags:\n- power\n- cpufreq\n---\n\n[toc]\n\n# cpufreq\n\n\n\nCPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：\n\n- cpufreq driver\n- cpufreq framework (core)\n- cpufreq governor\n\n一些基本概念：\n\nP-state: voltage and frequency point\n\n总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。\n\n另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。\n\n下面分开来看每个部分。\n\n## Driver\n\n\n\nCpufreq Driver主要负责底层调频的操作，核心是实现 `cpufreq_dirver` 对象，并通过 `cpufreq_register_driver` 将驱动注册到系统，供core部分使用。\n\n其中，最核心的几个回调包括：\n\n- online: hotplug callback\n- offline: hotplug callback\n- target_index: set freq\n- set_boost: enter into boost mode\n\n以 `mediatek-cpufreq-hw.c` 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。\n\ndb845c使用的 `qcom-cpufreq-hw.c` 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。\n\n\\* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。\n\n## Core\n\n\n\nCore部分核心文件是 `/drivers/cpufreq/cpufreq.c`\n\n这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。\n\n`cpufreq_register_driver` (cpufreq_driver* cpufreq_driver)\n\n`cpufreq_register_governor` (cpufreq_governor_list)\n\n`cpufreq_register_notifier` (cpufreq_transition_notifier_list)\n\n`cpufreq_policy_alloc` (cpufreq_policy* PERCPU:cpufreq_cpu_data)\n\n`cpufreq_policy` 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。\n\n每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（`cpufreq_cpu_data`）\n\nMainflow：\n\n1、cpufreq driver注册\n\n2、governor注册（每个policy初始化自己的governor）\n\n3、cpu hotplug state: \"cpufreq:online\"，`cpuhp_cpufreq_online`、`cpuhp_cpufreq_offline`，创建出percpu policy，绑定driver、governor\n\n4、向sysfs创建节点，提供功能\n\n5、governor开始工作，通过 `__cpufreq_driver_target` 进行调频。\n\n- Qos是调频投票机制，用来实现max_freq、min_freq limitation。(`cpufreq_notifier_min` `cpufreq_notifier_max`)，在其他module有需求投票后，freq constrants会被更新。\n\n## Sysfs\n\n\n\n```\n/sys/devices/system/cpu/cpu0/cpufreq/policyX\nscaling_driver\t\t\tr\t# cpufreq driver name\naffected_cpus\t\t\tr\t# cpu\nrelated_cpus\t\t\tr\t# <?>\nscaling_cur_freq\t\trw\t# cur freq\nscaling_min_freq\t\trw\t# min freq limit\nscaling_max_freq\t\trw\t# max freq limit\nscaling_governor\t\trw\t# selected governor\nscaling_available_governors\tr\t# available governors\nscaling_setspeed\t\tr\t# <not supported>\ncpuinfo_min_freq\t\tr\t# hardware min freq\ncpuinfo_max_freq\t\tr\t# hardware max freq\ncpuinfo_transition_latency\tr\t# hardware latency\n```\n\n\n\n## Governors\n\n\n\nGovernor负责从系统收集信息，并触发调频动作。\n\n**powersave**\n\nalways lowest frequency\n\n**performance**\n\nalways highest frequency\n\n**schedutil**\n\nuses CPU utilization data from scheduler to determine target frequence\n\n待完成\n\n**userspace**\n\nallow user space set the frequency\n\n**ondemand**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target by CPU load, 0->min, 100->max\n\n**conservative**\n\nuses CPU load as a CPU frequency selection metric\n\nit reaches the target step by step, up_threshold->up, down_threshold->down\n\n## Files\n\n\n\n```\n- /drivers/cpufreq/cpufreq.c\n- /drivers/cpufreq/cpufreq-dt.c\n- /drivers/cpufreq/cpufreq_stats.c\n- /drivers/cpufreq/cpufreq_conservative.c\n- /drivers/cpufreq/cpufreq_governor.c\n- /drivers/cpufreq/cpufreq_ondemand.c\n- /drivers/cpufreq/cpufreq_powersave.c\n- /drivers/cpufreq/cpufreq_performance.c\n- /drivers/cpufreq/cpufreq_userspace.c\n- /kernel/sched/cpufreq_schedutil.c\n- /kernel/power/qos.c\n```\n\n\n\n## Reference\n\n\n\nhttps://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\n\nhttps://docs.kernel.org/scheduler/schedutil.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_overview.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_driver.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_core.html\n\nhttp://www.wowotech.net/pm_subsystem/cpufreq_governor.html","slug":"cpufreq","published":1,"updated":"2024-04-28T09:07:20.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaas0005r9w0fujveufw","content":"<p>[toc]</p>\n<h1 id=\"cpufreq\"><a href=\"#cpufreq\" class=\"headerlink\" title=\"cpufreq\"></a>cpufreq</h1><p>CPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：</p>\n<ul>\n<li>cpufreq driver</li>\n<li>cpufreq framework (core)</li>\n<li>cpufreq governor</li>\n</ul>\n<p>一些基本概念：</p>\n<p>P-state: voltage and frequency point</p>\n<p>总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。</p>\n<p>另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。</p>\n<p>下面分开来看每个部分。</p>\n<h2 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h2><p>Cpufreq Driver主要负责底层调频的操作，核心是实现 <code>cpufreq_dirver</code> 对象，并通过 <code>cpufreq_register_driver</code> 将驱动注册到系统，供core部分使用。</p>\n<p>其中，最核心的几个回调包括：</p>\n<ul>\n<li>online: hotplug callback</li>\n<li>offline: hotplug callback</li>\n<li>target_index: set freq</li>\n<li>set_boost: enter into boost mode</li>\n</ul>\n<p>以 <code>mediatek-cpufreq-hw.c</code> 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。</p>\n<p>db845c使用的 <code>qcom-cpufreq-hw.c</code> 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。</p>\n<p>* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。</p>\n<h2 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h2><p>Core部分核心文件是 <code>/drivers/cpufreq/cpufreq.c</code></p>\n<p>这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。</p>\n<p><code>cpufreq_register_driver</code> (cpufreq_driver* cpufreq_driver)</p>\n<p><code>cpufreq_register_governor</code> (cpufreq_governor_list)</p>\n<p><code>cpufreq_register_notifier</code> (cpufreq_transition_notifier_list)</p>\n<p><code>cpufreq_policy_alloc</code> (cpufreq_policy* PERCPU:cpufreq_cpu_data)</p>\n<p><code>cpufreq_policy</code> 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。</p>\n<p>每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（<code>cpufreq_cpu_data</code>）</p>\n<p>Mainflow：</p>\n<p>1、cpufreq driver注册</p>\n<p>2、governor注册（每个policy初始化自己的governor）</p>\n<p>3、cpu hotplug state: “cpufreq:online”，<code>cpuhp_cpufreq_online</code>、<code>cpuhp_cpufreq_offline</code>，创建出percpu policy，绑定driver、governor</p>\n<p>4、向sysfs创建节点，提供功能</p>\n<p>5、governor开始工作，通过 <code>__cpufreq_driver_target</code> 进行调频。</p>\n<ul>\n<li>Qos是调频投票机制，用来实现max_freq、min_freq limitation。(<code>cpufreq_notifier_min</code> <code>cpufreq_notifier_max</code>)，在其他module有需求投票后，freq constrants会被更新。</li>\n</ul>\n<h2 id=\"Sysfs\"><a href=\"#Sysfs\" class=\"headerlink\" title=\"Sysfs\"></a>Sysfs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sys/devices/system/cpu/cpu0/cpufreq/policyX</span><br><span class=\"line\">scaling_driver\t\t\tr\t# cpufreq driver name</span><br><span class=\"line\">affected_cpus\t\t\tr\t# cpu</span><br><span class=\"line\">related_cpus\t\t\tr\t# &lt;?&gt;</span><br><span class=\"line\">scaling_cur_freq\t\trw\t# cur freq</span><br><span class=\"line\">scaling_min_freq\t\trw\t# min freq limit</span><br><span class=\"line\">scaling_max_freq\t\trw\t# max freq limit</span><br><span class=\"line\">scaling_governor\t\trw\t# selected governor</span><br><span class=\"line\">scaling_available_governors\tr\t# available governors</span><br><span class=\"line\">scaling_setspeed\t\tr\t# &lt;not supported&gt;</span><br><span class=\"line\">cpuinfo_min_freq\t\tr\t# hardware min freq</span><br><span class=\"line\">cpuinfo_max_freq\t\tr\t# hardware max freq</span><br><span class=\"line\">cpuinfo_transition_latency\tr\t# hardware latency</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Governors\"><a href=\"#Governors\" class=\"headerlink\" title=\"Governors\"></a>Governors</h2><p>Governor负责从系统收集信息，并触发调频动作。</p>\n<p><strong>powersave</strong></p>\n<p>always lowest frequency</p>\n<p><strong>performance</strong></p>\n<p>always highest frequency</p>\n<p><strong>schedutil</strong></p>\n<p>uses CPU utilization data from scheduler to determine target frequence</p>\n<p>待完成</p>\n<p><strong>userspace</strong></p>\n<p>allow user space set the frequency</p>\n<p><strong>ondemand</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target by CPU load, 0-&gt;min, 100-&gt;max</p>\n<p><strong>conservative</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target step by step, up_threshold-&gt;up, down_threshold-&gt;down</p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- /drivers/cpufreq/cpufreq.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq-dt.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_stats.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_conservative.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_governor.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_ondemand.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_powersave.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_performance.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_userspace.c</span><br><span class=\"line\">- /kernel/sched/cpufreq_schedutil.c</span><br><span class=\"line\">- /kernel/power/qos.c</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\">https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html</a></p>\n<p><a href=\"https://docs.kernel.org/scheduler/schedutil.html\">https://docs.kernel.org/scheduler/schedutil.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_overview.html\">http://www.wowotech.net/pm_subsystem/cpufreq_overview.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_driver.html\">http://www.wowotech.net/pm_subsystem/cpufreq_driver.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_core.html\">http://www.wowotech.net/pm_subsystem/cpufreq_core.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_governor.html\">http://www.wowotech.net/pm_subsystem/cpufreq_governor.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"cpufreq\"><a href=\"#cpufreq\" class=\"headerlink\" title=\"cpufreq\"></a>cpufreq</h1><p>CPUFreq框架是内核的CPU调频框架，整个调频框架由以下几个部分组成：</p>\n<ul>\n<li>cpufreq driver</li>\n<li>cpufreq framework (core)</li>\n<li>cpufreq governor</li>\n</ul>\n<p>一些基本概念：</p>\n<p>P-state: voltage and frequency point</p>\n<p>总体上，CPU Freq主要在sysfs向userspace提供了调频操作和策略设置节点。当使用一些自动调频的governor时，允许governor从系统获取信息，自动触发调频动作。</p>\n<p>另外，还向其他模块提供了qos频率投票，以及调频事件的notifier机制。</p>\n<p>下面分开来看每个部分。</p>\n<h2 id=\"Driver\"><a href=\"#Driver\" class=\"headerlink\" title=\"Driver\"></a>Driver</h2><p>Cpufreq Driver主要负责底层调频的操作，核心是实现 <code>cpufreq_dirver</code> 对象，并通过 <code>cpufreq_register_driver</code> 将驱动注册到系统，供core部分使用。</p>\n<p>其中，最核心的几个回调包括：</p>\n<ul>\n<li>online: hotplug callback</li>\n<li>offline: hotplug callback</li>\n<li>target_index: set freq</li>\n<li>set_boost: enter into boost mode</li>\n</ul>\n<p>以 <code>mediatek-cpufreq-hw.c</code> 为例，其freq table保存在硬件寄存器中，driver初始化时，从硬件中读出freq table，并实现相关调频回调，最终注册到core。</p>\n<p>db845c使用的 <code>qcom-cpufreq-hw.c</code> 为例，其freq table保存在dts中，driver使用OPP框架来读取这些配置，并实现cpufreq回调。</p>\n<p>* OPP（Operating Performance Point，提供dts的freq-valt-table配置，及获取接口。</p>\n<h2 id=\"Core\"><a href=\"#Core\" class=\"headerlink\" title=\"Core\"></a>Core</h2><p>Core部分核心文件是 <code>/drivers/cpufreq/cpufreq.c</code></p>\n<p>这个文件主要实现了BOOST，DRIVER，SYSFS，FREQ，NOTIFIER，GOVERNOR，POLICY相关功能的操作接口。</p>\n<p><code>cpufreq_register_driver</code> (cpufreq_driver* cpufreq_driver)</p>\n<p><code>cpufreq_register_governor</code> (cpufreq_governor_list)</p>\n<p><code>cpufreq_register_notifier</code> (cpufreq_transition_notifier_list)</p>\n<p><code>cpufreq_policy_alloc</code> (cpufreq_policy* PERCPU:cpufreq_cpu_data)</p>\n<p><code>cpufreq_policy</code> 是一个调频实体，对应一个调频域（freq domain），一般为一个cluster，这个结构保存了每个调频实体（通常是一个cluster）调频相关的所有私有信息。同时，他作为调频操作的句柄，cpufreq顶层操作接口使用policy来对一个调频实体进行操作。</p>\n<p>每个CPU有一个percpu的指针指向其所属的policy，cluster中的多个CPU共享一个policy。（<code>cpufreq_cpu_data</code>）</p>\n<p>Mainflow：</p>\n<p>1、cpufreq driver注册</p>\n<p>2、governor注册（每个policy初始化自己的governor）</p>\n<p>3、cpu hotplug state: “cpufreq:online”，<code>cpuhp_cpufreq_online</code>、<code>cpuhp_cpufreq_offline</code>，创建出percpu policy，绑定driver、governor</p>\n<p>4、向sysfs创建节点，提供功能</p>\n<p>5、governor开始工作，通过 <code>__cpufreq_driver_target</code> 进行调频。</p>\n<ul>\n<li>Qos是调频投票机制，用来实现max_freq、min_freq limitation。(<code>cpufreq_notifier_min</code> <code>cpufreq_notifier_max</code>)，在其他module有需求投票后，freq constrants会被更新。</li>\n</ul>\n<h2 id=\"Sysfs\"><a href=\"#Sysfs\" class=\"headerlink\" title=\"Sysfs\"></a>Sysfs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/sys/devices/system/cpu/cpu0/cpufreq/policyX</span><br><span class=\"line\">scaling_driver\t\t\tr\t# cpufreq driver name</span><br><span class=\"line\">affected_cpus\t\t\tr\t# cpu</span><br><span class=\"line\">related_cpus\t\t\tr\t# &lt;?&gt;</span><br><span class=\"line\">scaling_cur_freq\t\trw\t# cur freq</span><br><span class=\"line\">scaling_min_freq\t\trw\t# min freq limit</span><br><span class=\"line\">scaling_max_freq\t\trw\t# max freq limit</span><br><span class=\"line\">scaling_governor\t\trw\t# selected governor</span><br><span class=\"line\">scaling_available_governors\tr\t# available governors</span><br><span class=\"line\">scaling_setspeed\t\tr\t# &lt;not supported&gt;</span><br><span class=\"line\">cpuinfo_min_freq\t\tr\t# hardware min freq</span><br><span class=\"line\">cpuinfo_max_freq\t\tr\t# hardware max freq</span><br><span class=\"line\">cpuinfo_transition_latency\tr\t# hardware latency</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Governors\"><a href=\"#Governors\" class=\"headerlink\" title=\"Governors\"></a>Governors</h2><p>Governor负责从系统收集信息，并触发调频动作。</p>\n<p><strong>powersave</strong></p>\n<p>always lowest frequency</p>\n<p><strong>performance</strong></p>\n<p>always highest frequency</p>\n<p><strong>schedutil</strong></p>\n<p>uses CPU utilization data from scheduler to determine target frequence</p>\n<p>待完成</p>\n<p><strong>userspace</strong></p>\n<p>allow user space set the frequency</p>\n<p><strong>ondemand</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target by CPU load, 0-&gt;min, 100-&gt;max</p>\n<p><strong>conservative</strong></p>\n<p>uses CPU load as a CPU frequency selection metric</p>\n<p>it reaches the target step by step, up_threshold-&gt;up, down_threshold-&gt;down</p>\n<h2 id=\"Files\"><a href=\"#Files\" class=\"headerlink\" title=\"Files\"></a>Files</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- /drivers/cpufreq/cpufreq.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq-dt.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_stats.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_conservative.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_governor.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_ondemand.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_powersave.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_performance.c</span><br><span class=\"line\">- /drivers/cpufreq/cpufreq_userspace.c</span><br><span class=\"line\">- /kernel/sched/cpufreq_schedutil.c</span><br><span class=\"line\">- /kernel/power/qos.c</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html\">https://www.kernel.org/doc/html/latest/admin-guide/pm/cpufreq.html</a></p>\n<p><a href=\"https://docs.kernel.org/scheduler/schedutil.html\">https://docs.kernel.org/scheduler/schedutil.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_overview.html\">http://www.wowotech.net/pm_subsystem/cpufreq_overview.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_driver.html\">http://www.wowotech.net/pm_subsystem/cpufreq_driver.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_core.html\">http://www.wowotech.net/pm_subsystem/cpufreq_core.html</a></p>\n<p><a href=\"http://www.wowotech.net/pm_subsystem/cpufreq_governor.html\">http://www.wowotech.net/pm_subsystem/cpufreq_governor.html</a></p>\n"},{"title":"Hello World","date":"2023-08-24T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-08-25 00:00:00\ncategories:\n- test\ntags:\n- test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-04-28T07:13:38.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaas0006r9w0ciswdc7c","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo在多台电脑上提交和更新","date":"2023-09-13T07:35:30.000Z","_content":"\n[toc]\n\n\n\n# 1.博客搭建\n\nhttps://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\n\n# 2.创建一个新文件夹new，用于上传hexo博客目录\n\n将以下目录（除了红色方框的目录）拷贝到新目录中\n\n![image-20230913154437526](../imgs/image-20230913154437526.png)\n\n参考：https://blog.csdn.net/K1052176873/article/details/122879462 \n\n# 3.github上创建hexo分支并设置为默认分支\n\n## 创建hexo分支\n\n![image-20230913154510439](../imgs/image-20230913154510439.png)\n\n## 将hexo分支设置为默认分支\n\n![image-20230913154524492](../imgs/image-20230913154524492.png)\n\n# 4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\n\n基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题\n当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接\n\n```\ncd new\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\n```\n\n\n\n## 1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n## 2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\n\n![image-20230913154559571](../imgs/image-20230913154559571.png)\n\n## 3.送new目录中的相关文件到远程仓库 hexo分支\n\n```\ngit add .\ngit commit –m add_branch\ngit push        \n\n```\n\n\n\n# 5.！新环境中快速搭建博客环境！\n\n## 1.设置ssh\n\n参考：https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\n\n```\nssh-keygen -t ed25519 -C \"your_email@gmail.com\"\ncat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n\n## 2.安装nodejs和hexo\n\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm  \n```\n\n## 3.拉取hexo博客目录\n\n```\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git        #不需要hexo init这条指令\nnpm i hexo-renderer-marked\n\n\n#更新博客 添加新文章 hello-world\nhexo new \"hello-world\"\ngit add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world \ngit commit –m \"hello-world\"\ngit push         #或者git push origin hexo\n\nhexo g        #生成静态页面\nhexo s        #启动本地服务器 预览\nhexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好\n```\n\n# 6.遇到的问题\n\n## 问题1.nodejs版本过低\n\nnpm WARN notsup Unsupported engine for hexo@6.3.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo@6.3.0\nnpm WARN notsup Unsupported engine for hexo-front-matter@3.0.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-front-matter@3.0.0\nnpm WARN notsup Unsupported engine for hexo-cli@4.3.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-cli@4.3.1\nnpm WARN notsup Unsupported engine for hexo-log@3.2.0: wanted: {\"node\":\">=12.4.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@3.2.0\nnpm WARN notsup Unsupported engine for abbrev@2.0.0: wanted: {\"node\":\"^14.17.0 || ^16.13.0 || >=18.0.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: abbrev@2.0.0\nnpm WARN notsup Unsupported engine for hexo-fs@4.1.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-fs@4.1.1\nnpm WARN notsup Unsupported engine for hexo-log@4.1.0: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@4.1.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.3 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n## 升级nodejs\n\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm\nsource ~/.bashrc            #加载 nvm\nnvm install node            #使用 nvm 安装最新版本的 Node.js\nnode -v                     #验证 Node.js 版本\n```\n\n\n\n\n\n## 问题2.hexo博客图片不显示\n\nhttps://blog.csdn.net/QRLYLETITBE/article/details/127737904 \n\n```\nnpm i hexo-renderer-marked\n\n```\n\n## 新建imgs文件夹\n\n![image-20230913161638961](../imgs/image-20230913161638961.png)\n\n```\nmarked:\n  prependRoot: true\n  postAsset: true\n\n```\n## 修改图片路径\n\n![image-20230913161842174](../imgs/image-20230913161842174.png)\n","source":"_posts/Hexo在多台电脑上提交和更新.md","raw":"---\ntitle: Hexo在多台电脑上提交和更新\ndate: 2023-09-13 15:35:30\ncategories:\n- test\ntags:\n- test\n---\n\n[toc]\n\n\n\n# 1.博客搭建\n\nhttps://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\n\n# 2.创建一个新文件夹new，用于上传hexo博客目录\n\n将以下目录（除了红色方框的目录）拷贝到新目录中\n\n![image-20230913154437526](../imgs/image-20230913154437526.png)\n\n参考：https://blog.csdn.net/K1052176873/article/details/122879462 \n\n# 3.github上创建hexo分支并设置为默认分支\n\n## 创建hexo分支\n\n![image-20230913154510439](../imgs/image-20230913154510439.png)\n\n## 将hexo分支设置为默认分支\n\n![image-20230913154524492](../imgs/image-20230913154524492.png)\n\n# 4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\n\n基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题\n当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接\n\n```\ncd new\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\n```\n\n\n\n## 1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n## 2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\n\n![image-20230913154559571](../imgs/image-20230913154559571.png)\n\n## 3.送new目录中的相关文件到远程仓库 hexo分支\n\n```\ngit add .\ngit commit –m add_branch\ngit push        \n\n```\n\n\n\n# 5.！新环境中快速搭建博客环境！\n\n## 1.设置ssh\n\n参考：https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\n\n```\nssh-keygen -t ed25519 -C \"your_email@gmail.com\"\ncat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n\n## 2.安装nodejs和hexo\n\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm  \n```\n\n## 3.拉取hexo博客目录\n\n```\ngit clone git@github.com:<username>/<username>.github.io.git #<username> 用户名\ngit branch    #查看分支，显示 * hexo\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git        #不需要hexo init这条指令\nnpm i hexo-renderer-marked\n\n\n#更新博客 添加新文章 hello-world\nhexo new \"hello-world\"\ngit add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world \ngit commit –m \"hello-world\"\ngit push         #或者git push origin hexo\n\nhexo g        #生成静态页面\nhexo s        #启动本地服务器 预览\nhexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好\n```\n\n# 6.遇到的问题\n\n## 问题1.nodejs版本过低\n\nnpm WARN notsup Unsupported engine for hexo@6.3.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo@6.3.0\nnpm WARN notsup Unsupported engine for hexo-front-matter@3.0.0: wanted: {\"node\":\">=12.13.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-front-matter@3.0.0\nnpm WARN notsup Unsupported engine for hexo-cli@4.3.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-cli@4.3.1\nnpm WARN notsup Unsupported engine for hexo-log@3.2.0: wanted: {\"node\":\">=12.4.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@3.2.0\nnpm WARN notsup Unsupported engine for abbrev@2.0.0: wanted: {\"node\":\"^14.17.0 || ^16.13.0 || >=18.0.0\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: abbrev@2.0.0\nnpm WARN notsup Unsupported engine for hexo-fs@4.1.1: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-fs@4.1.1\nnpm WARN notsup Unsupported engine for hexo-log@4.1.0: wanted: {\"node\":\">=14\"} (current: {\"node\":\"10.19.0\",\"npm\":\"6.14.4\"})\nnpm WARN notsup Not compatible with your version of node/npm: hexo-log@4.1.0\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.3 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.3: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n## 升级nodejs\n\n```\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm\nsource ~/.bashrc            #加载 nvm\nnvm install node            #使用 nvm 安装最新版本的 Node.js\nnode -v                     #验证 Node.js 版本\n```\n\n\n\n\n\n## 问题2.hexo博客图片不显示\n\nhttps://blog.csdn.net/QRLYLETITBE/article/details/127737904 \n\n```\nnpm i hexo-renderer-marked\n\n```\n\n## 新建imgs文件夹\n\n![image-20230913161638961](../imgs/image-20230913161638961.png)\n\n```\nmarked:\n  prependRoot: true\n  postAsset: true\n\n```\n## 修改图片路径\n\n![image-20230913161842174](../imgs/image-20230913161842174.png)\n","slug":"Hexo在多台电脑上提交和更新","published":1,"updated":"2024-04-28T07:17:56.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaau0009r9w09xzi7r99","content":"<p>[toc]</p>\n<h1 id=\"1-博客搭建\"><a href=\"#1-博客搭建\" class=\"headerlink\" title=\"1.博客搭建\"></a>1.博客搭建</h1><p><a href=\"https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\">https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a></p>\n<h1 id=\"2-创建一个新文件夹new，用于上传hexo博客目录\"><a href=\"#2-创建一个新文件夹new，用于上传hexo博客目录\" class=\"headerlink\" title=\"2.创建一个新文件夹new，用于上传hexo博客目录\"></a>2.创建一个新文件夹new，用于上传hexo博客目录</h1><p>将以下目录（除了红色方框的目录）拷贝到新目录中</p>\n<p><img src=\"/../imgs/image-20230913154437526.png\" alt=\"image-20230913154437526\"></p>\n<p>参考：<a href=\"https://blog.csdn.net/K1052176873/article/details/122879462\">https://blog.csdn.net/K1052176873/article/details/122879462</a> </p>\n<h1 id=\"3-github上创建hexo分支并设置为默认分支\"><a href=\"#3-github上创建hexo分支并设置为默认分支\" class=\"headerlink\" title=\"3.github上创建hexo分支并设置为默认分支\"></a>3.github上创建hexo分支并设置为默认分支</h1><h2 id=\"创建hexo分支\"><a href=\"#创建hexo分支\" class=\"headerlink\" title=\"创建hexo分支\"></a>创建hexo分支</h2><p><img src=\"/../imgs/image-20230913154510439.png\" alt=\"image-20230913154510439\"></p>\n<h2 id=\"将hexo分支设置为默认分支\"><a href=\"#将hexo分支设置为默认分支\" class=\"headerlink\" title=\"将hexo分支设置为默认分支\"></a>将hexo分支设置为默认分支</h2><p><img src=\"/../imgs/image-20230913154524492.png\" alt=\"image-20230913154524492\"></p>\n<h1 id=\"4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\"><a href=\"#4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\" class=\"headerlink\" title=\"4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\"></a>4.进入新建的文件夹中git clone，再上传相关文件至hexo分支</h1><p>基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题<br>当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd new</span><br><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"><a href=\"#1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\" class=\"headerlink\" title=\"1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"></a>1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\"><a href=\"#2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\" class=\"headerlink\" title=\"2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\"></a>2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录</h2><p><img src=\"/../imgs/image-20230913154559571.png\" alt=\"image-20230913154559571\"></p>\n<h2 id=\"3-送new目录中的相关文件到远程仓库-hexo分支\"><a href=\"#3-送new目录中的相关文件到远程仓库-hexo分支\" class=\"headerlink\" title=\"3.送new目录中的相关文件到远程仓库 hexo分支\"></a>3.送new目录中的相关文件到远程仓库 hexo分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m add_branch</span><br><span class=\"line\">git push        </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-！新环境中快速搭建博客环境！\"><a href=\"#5-！新环境中快速搭建博客环境！\" class=\"headerlink\" title=\"5.！新环境中快速搭建博客环境！\"></a>5.！新环境中快速搭建博客环境！</h1><h2 id=\"1-设置ssh\"><a href=\"#1-设置ssh\" class=\"headerlink\" title=\"1.设置ssh\"></a>1.设置ssh</h2><p>参考：<a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -C &quot;your_email@gmail.com&quot;</span><br><span class=\"line\">cat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装nodejs和hexo\"><a href=\"#2-安装nodejs和hexo\" class=\"headerlink\" title=\"2.安装nodejs和hexo\"></a>2.安装nodejs和hexo</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取hexo博客目录\"><a href=\"#3-拉取hexo博客目录\" class=\"headerlink\" title=\"3.拉取hexo博客目录\"></a>3.拉取hexo博客目录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git        #不需要hexo init这条指令</span><br><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#更新博客 添加新文章 hello-world</span><br><span class=\"line\">hexo new &quot;hello-world&quot;</span><br><span class=\"line\">git add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world </span><br><span class=\"line\">git commit –m &quot;hello-world&quot;</span><br><span class=\"line\">git push         #或者git push origin hexo</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g        #生成静态页面</span><br><span class=\"line\">hexo s        #启动本地服务器 预览</span><br><span class=\"line\">hexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6.遇到的问题\"></a>6.遇到的问题</h1><h2 id=\"问题1-nodejs版本过低\"><a href=\"#问题1-nodejs版本过低\" class=\"headerlink\" title=\"问题1.nodejs版本过低\"></a>问题1.nodejs版本过低</h2><p>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#x40;&#x36;&#x2e;&#51;&#x2e;&#48;\">&#104;&#101;&#120;&#x6f;&#x40;&#x36;&#x2e;&#51;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#64;&#x36;&#46;&#x33;&#46;&#48;\">&#104;&#101;&#120;&#x6f;&#64;&#x36;&#46;&#x33;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#x6f;&#110;&#116;&#45;&#109;&#x61;&#x74;&#116;&#x65;&#114;&#x40;&#x33;&#46;&#48;&#x2e;&#x30;\">&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#x6f;&#110;&#116;&#45;&#109;&#x61;&#x74;&#116;&#x65;&#114;&#x40;&#x33;&#46;&#48;&#x2e;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#111;&#x6e;&#x74;&#x2d;&#x6d;&#97;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#48;&#46;&#48;\">&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#111;&#x6e;&#x74;&#x2d;&#x6d;&#97;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#48;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#x2d;&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;\">&#x68;&#x65;&#120;&#111;&#x2d;&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#45;&#99;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#46;&#49;\">&#x68;&#x65;&#120;&#111;&#45;&#99;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#46;&#49;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#64;&#x33;&#x2e;&#x32;&#x2e;&#x30;\">&#x68;&#x65;&#x78;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#64;&#x33;&#x2e;&#x32;&#x2e;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.4.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#x6f;&#45;&#108;&#x6f;&#103;&#64;&#x33;&#x2e;&#50;&#x2e;&#48;\">&#x68;&#101;&#x78;&#x6f;&#45;&#108;&#x6f;&#103;&#64;&#x33;&#x2e;&#50;&#x2e;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#97;&#x62;&#x62;&#114;&#101;&#118;&#64;&#x32;&#x2e;&#48;&#46;&#48;\">&#97;&#x62;&#x62;&#114;&#101;&#118;&#64;&#x32;&#x2e;&#48;&#46;&#48;</a>: wanted: {“node”:”^14.17.0 || ^16.13.0 || &gt;&#x3D;18.0.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x61;&#x62;&#98;&#114;&#101;&#118;&#x40;&#x32;&#x2e;&#x30;&#x2e;&#x30;\">&#x61;&#x62;&#98;&#114;&#101;&#118;&#x40;&#x32;&#x2e;&#x30;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#101;&#120;&#x6f;&#45;&#102;&#x73;&#64;&#52;&#x2e;&#49;&#46;&#x31;\">&#x68;&#101;&#120;&#x6f;&#45;&#102;&#x73;&#64;&#52;&#x2e;&#49;&#46;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#45;&#102;&#x73;&#x40;&#x34;&#46;&#x31;&#x2e;&#x31;\">&#x68;&#x65;&#120;&#111;&#45;&#102;&#x73;&#x40;&#x34;&#46;&#x31;&#x2e;&#x31;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#111;&#x2d;&#x6c;&#111;&#x67;&#x40;&#52;&#x2e;&#x31;&#x2e;&#48;\">&#104;&#101;&#120;&#111;&#x2d;&#x6c;&#111;&#x67;&#x40;&#52;&#x2e;&#x31;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#120;&#x6f;&#x2d;&#x6c;&#111;&#x67;&#64;&#52;&#46;&#49;&#46;&#48;\">&#104;&#x65;&#120;&#x6f;&#x2d;&#x6c;&#111;&#x67;&#64;&#52;&#46;&#49;&#46;&#48;</a><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:&#x66;&#115;&#101;&#x76;&#101;&#110;&#116;&#115;&#64;&#50;&#x2e;&#51;&#x2e;&#x33;\">&#x66;&#115;&#101;&#x76;&#101;&#110;&#116;&#115;&#64;&#50;&#x2e;&#51;&#x2e;&#x33;</a> (node_modules&#x2F;fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:&#102;&#x73;&#x65;&#118;&#101;&#110;&#116;&#115;&#x40;&#x32;&#x2e;&#51;&#x2e;&#x33;\">&#102;&#x73;&#x65;&#118;&#101;&#110;&#116;&#115;&#x40;&#x32;&#x2e;&#51;&#x2e;&#x33;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p>\n<h2 id=\"升级nodejs\"><a href=\"#升级nodejs\" class=\"headerlink\" title=\"升级nodejs\"></a>升级nodejs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm</span><br><span class=\"line\">source ~/.bashrc            #加载 nvm</span><br><span class=\"line\">nvm install node            #使用 nvm 安装最新版本的 Node.js</span><br><span class=\"line\">node -v                     #验证 Node.js 版本</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题2-hexo博客图片不显示\"><a href=\"#问题2-hexo博客图片不显示\" class=\"headerlink\" title=\"问题2.hexo博客图片不显示\"></a>问题2.hexo博客图片不显示</h2><p><a href=\"https://blog.csdn.net/QRLYLETITBE/article/details/127737904\">https://blog.csdn.net/QRLYLETITBE/article/details/127737904</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建imgs文件夹\"><a href=\"#新建imgs文件夹\" class=\"headerlink\" title=\"新建imgs文件夹\"></a>新建imgs文件夹</h2><p><img src=\"/../imgs/image-20230913161638961.png\" alt=\"image-20230913161638961\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改图片路径\"><a href=\"#修改图片路径\" class=\"headerlink\" title=\"修改图片路径\"></a>修改图片路径</h2><p><img src=\"/../imgs/image-20230913161842174.png\" alt=\"image-20230913161842174\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-博客搭建\"><a href=\"#1-博客搭建\" class=\"headerlink\" title=\"1.博客搭建\"></a>1.博客搭建</h1><p><a href=\"https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/\">https://yyheroi.github.io/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</a></p>\n<h1 id=\"2-创建一个新文件夹new，用于上传hexo博客目录\"><a href=\"#2-创建一个新文件夹new，用于上传hexo博客目录\" class=\"headerlink\" title=\"2.创建一个新文件夹new，用于上传hexo博客目录\"></a>2.创建一个新文件夹new，用于上传hexo博客目录</h1><p>将以下目录（除了红色方框的目录）拷贝到新目录中</p>\n<p><img src=\"/../imgs/image-20230913154437526.png\" alt=\"image-20230913154437526\"></p>\n<p>参考：<a href=\"https://blog.csdn.net/K1052176873/article/details/122879462\">https://blog.csdn.net/K1052176873/article/details/122879462</a> </p>\n<h1 id=\"3-github上创建hexo分支并设置为默认分支\"><a href=\"#3-github上创建hexo分支并设置为默认分支\" class=\"headerlink\" title=\"3.github上创建hexo分支并设置为默认分支\"></a>3.github上创建hexo分支并设置为默认分支</h1><h2 id=\"创建hexo分支\"><a href=\"#创建hexo分支\" class=\"headerlink\" title=\"创建hexo分支\"></a>创建hexo分支</h2><p><img src=\"/../imgs/image-20230913154510439.png\" alt=\"image-20230913154510439\"></p>\n<h2 id=\"将hexo分支设置为默认分支\"><a href=\"#将hexo分支设置为默认分支\" class=\"headerlink\" title=\"将hexo分支设置为默认分支\"></a>将hexo分支设置为默认分支</h2><p><img src=\"/../imgs/image-20230913154524492.png\" alt=\"image-20230913154524492\"></p>\n<h1 id=\"4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\"><a href=\"#4-进入新建的文件夹中git-clone，再上传相关文件至hexo分支\" class=\"headerlink\" title=\"4.进入新建的文件夹中git clone，再上传相关文件至hexo分支\"></a>4.进入新建的文件夹中git clone，再上传相关文件至hexo分支</h1><p>基本原理：github仓库开两个分支，main分支存放的是hexo生成的静态页面，hexo分支存放基本的 Hexo 博客项目的结构和默认配置文件，如文章，主题<br>当需要重新搭建环境时，直接拉取hexo分支中Hexo博客目录以及相关配置文件，当需要更新博客时直接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd new</span><br><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"><a href=\"#1-clone下来的文件夹内应该有个-gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\" class=\"headerlink\" title=\"1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：\"></a>1.clone下来的文件夹内应该有个.gitignore文件，用来忽略一些不需要的文件，表示这些类型文件不需要git。如果没有，右键新建，内容如下：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.DS_Store</span><br><span class=\"line\">Thumbs.db</span><br><span class=\"line\">db.json</span><br><span class=\"line\">*.log</span><br><span class=\"line\">node_modules/</span><br><span class=\"line\">public/</span><br><span class=\"line\">.deploy*/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\"><a href=\"#2-如果已经clone过主题文件，那么需要把theme主题文件夹里的-git-也删除，我这里已经删除了theme主题的-git目录\" class=\"headerlink\" title=\"2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录\"></a>2.如果已经clone过主题文件，那么需要把theme主题文件夹里的 .git 也删除，我这里已经删除了theme主题的.git目录</h2><p><img src=\"/../imgs/image-20230913154559571.png\" alt=\"image-20230913154559571\"></p>\n<h2 id=\"3-送new目录中的相关文件到远程仓库-hexo分支\"><a href=\"#3-送new目录中的相关文件到远程仓库-hexo分支\" class=\"headerlink\" title=\"3.送new目录中的相关文件到远程仓库 hexo分支\"></a>3.送new目录中的相关文件到远程仓库 hexo分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit –m add_branch</span><br><span class=\"line\">git push        </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"5-！新环境中快速搭建博客环境！\"><a href=\"#5-！新环境中快速搭建博客环境！\" class=\"headerlink\" title=\"5.！新环境中快速搭建博客环境！\"></a>5.！新环境中快速搭建博客环境！</h1><h2 id=\"1-设置ssh\"><a href=\"#1-设置ssh\" class=\"headerlink\" title=\"1.设置ssh\"></a>1.设置ssh</h2><p>参考：<a href=\"https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t ed25519 -C &quot;your_email@gmail.com&quot;</span><br><span class=\"line\">cat ~/.ssh/id_ed25519.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装nodejs和hexo\"><a href=\"#2-安装nodejs和hexo\" class=\"headerlink\" title=\"2.安装nodejs和hexo\"></a>2.安装nodejs和hexo</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-拉取hexo博客目录\"><a href=\"#3-拉取hexo博客目录\" class=\"headerlink\" title=\"3.拉取hexo博客目录\"></a>3.拉取hexo博客目录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;username&gt;/&lt;username&gt;.github.io.git #&lt;username&gt; 用户名</span><br><span class=\"line\">git branch    #查看分支，显示 * hexo</span><br><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git        #不需要hexo init这条指令</span><br><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#更新博客 添加新文章 hello-world</span><br><span class=\"line\">hexo new &quot;hello-world&quot;</span><br><span class=\"line\">git add .        #将文章备份至 hexo分支  或者git add source/_posts/hello-world </span><br><span class=\"line\">git commit –m &quot;hello-world&quot;</span><br><span class=\"line\">git push         #或者git push origin hexo</span><br><span class=\"line\"></span><br><span class=\"line\">hexo g        #生成静态页面</span><br><span class=\"line\">hexo s        #启动本地服务器 预览</span><br><span class=\"line\">hexo d        #将生成的博客文件部署到 github main分支，Hexo博客项目配置文件中_config.yml已设置好</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-遇到的问题\"><a href=\"#6-遇到的问题\" class=\"headerlink\" title=\"6.遇到的问题\"></a>6.遇到的问题</h1><h2 id=\"问题1-nodejs版本过低\"><a href=\"#问题1-nodejs版本过低\" class=\"headerlink\" title=\"问题1.nodejs版本过低\"></a>问题1.nodejs版本过低</h2><p>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#x40;&#x36;&#x2e;&#51;&#x2e;&#48;\">&#104;&#101;&#120;&#x6f;&#x40;&#x36;&#x2e;&#51;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#101;&#120;&#x6f;&#64;&#x36;&#46;&#x33;&#46;&#48;\">&#104;&#101;&#120;&#x6f;&#64;&#x36;&#46;&#x33;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#x6f;&#110;&#116;&#45;&#109;&#x61;&#x74;&#116;&#x65;&#114;&#x40;&#x33;&#46;&#48;&#x2e;&#x30;\">&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#x6f;&#110;&#116;&#45;&#109;&#x61;&#x74;&#116;&#x65;&#114;&#x40;&#x33;&#46;&#48;&#x2e;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.13.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#111;&#x6e;&#x74;&#x2d;&#x6d;&#97;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#48;&#46;&#48;\">&#104;&#101;&#120;&#111;&#45;&#102;&#x72;&#111;&#x6e;&#x74;&#x2d;&#x6d;&#97;&#116;&#x74;&#x65;&#114;&#64;&#x33;&#x2e;&#48;&#46;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#x2d;&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;\">&#x68;&#x65;&#120;&#111;&#x2d;&#x63;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#x2e;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#45;&#99;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#46;&#49;\">&#x68;&#x65;&#120;&#111;&#45;&#99;&#108;&#x69;&#64;&#52;&#x2e;&#51;&#46;&#49;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#x65;&#x78;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#64;&#x33;&#x2e;&#x32;&#x2e;&#x30;\">&#x68;&#x65;&#x78;&#x6f;&#45;&#x6c;&#x6f;&#x67;&#64;&#x33;&#x2e;&#x32;&#x2e;&#x30;</a>: wanted: {“node”:”&gt;&#x3D;12.4.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#101;&#x78;&#x6f;&#45;&#108;&#x6f;&#103;&#64;&#x33;&#x2e;&#50;&#x2e;&#48;\">&#x68;&#101;&#x78;&#x6f;&#45;&#108;&#x6f;&#103;&#64;&#x33;&#x2e;&#50;&#x2e;&#48;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#97;&#x62;&#x62;&#114;&#101;&#118;&#64;&#x32;&#x2e;&#48;&#46;&#48;\">&#97;&#x62;&#x62;&#114;&#101;&#118;&#64;&#x32;&#x2e;&#48;&#46;&#48;</a>: wanted: {“node”:”^14.17.0 || ^16.13.0 || &gt;&#x3D;18.0.0”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x61;&#x62;&#98;&#114;&#101;&#118;&#x40;&#x32;&#x2e;&#x30;&#x2e;&#x30;\">&#x61;&#x62;&#98;&#114;&#101;&#118;&#x40;&#x32;&#x2e;&#x30;&#x2e;&#x30;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#x68;&#101;&#120;&#x6f;&#45;&#102;&#x73;&#64;&#52;&#x2e;&#49;&#46;&#x31;\">&#x68;&#101;&#120;&#x6f;&#45;&#102;&#x73;&#64;&#52;&#x2e;&#49;&#46;&#x31;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#x68;&#x65;&#120;&#111;&#45;&#102;&#x73;&#x40;&#x34;&#46;&#x31;&#x2e;&#x31;\">&#x68;&#x65;&#120;&#111;&#45;&#102;&#x73;&#x40;&#x34;&#46;&#x31;&#x2e;&#x31;</a><br>npm WARN notsup Unsupported engine for <a href=\"mailto:&#104;&#101;&#120;&#111;&#x2d;&#x6c;&#111;&#x67;&#x40;&#52;&#x2e;&#x31;&#x2e;&#48;\">&#104;&#101;&#120;&#111;&#x2d;&#x6c;&#111;&#x67;&#x40;&#52;&#x2e;&#x31;&#x2e;&#48;</a>: wanted: {“node”:”&gt;&#x3D;14”} (current: {“node”:”10.19.0”,”npm”:”6.14.4”})<br>npm WARN notsup Not compatible with your version of node&#x2F;npm: <a href=\"mailto:&#104;&#x65;&#120;&#x6f;&#x2d;&#x6c;&#111;&#x67;&#64;&#52;&#46;&#49;&#46;&#48;\">&#104;&#x65;&#120;&#x6f;&#x2d;&#x6c;&#111;&#x67;&#64;&#52;&#46;&#49;&#46;&#48;</a><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href=\"mailto:&#x66;&#115;&#101;&#x76;&#101;&#110;&#116;&#115;&#64;&#50;&#x2e;&#51;&#x2e;&#x33;\">&#x66;&#115;&#101;&#x76;&#101;&#110;&#116;&#115;&#64;&#50;&#x2e;&#51;&#x2e;&#x33;</a> (node_modules&#x2F;fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href=\"mailto:&#102;&#x73;&#x65;&#118;&#101;&#110;&#116;&#115;&#x40;&#x32;&#x2e;&#51;&#x2e;&#x33;\">&#102;&#x73;&#x65;&#118;&#101;&#110;&#116;&#115;&#x40;&#x32;&#x2e;&#51;&#x2e;&#x33;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p>\n<h2 id=\"升级nodejs\"><a href=\"#升级nodejs\" class=\"headerlink\" title=\"升级nodejs\"></a>升级nodejs</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash         #安装 nvm</span><br><span class=\"line\">source ~/.bashrc            #加载 nvm</span><br><span class=\"line\">nvm install node            #使用 nvm 安装最新版本的 Node.js</span><br><span class=\"line\">node -v                     #验证 Node.js 版本</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"问题2-hexo博客图片不显示\"><a href=\"#问题2-hexo博客图片不显示\" class=\"headerlink\" title=\"问题2.hexo博客图片不显示\"></a>问题2.hexo博客图片不显示</h2><p><a href=\"https://blog.csdn.net/QRLYLETITBE/article/details/127737904\">https://blog.csdn.net/QRLYLETITBE/article/details/127737904</a> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-renderer-marked</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新建imgs文件夹\"><a href=\"#新建imgs文件夹\" class=\"headerlink\" title=\"新建imgs文件夹\"></a>新建imgs文件夹</h2><p><img src=\"/../imgs/image-20230913161638961.png\" alt=\"image-20230913161638961\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">marked:</span><br><span class=\"line\">  prependRoot: true</span><br><span class=\"line\">  postAsset: true</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改图片路径\"><a href=\"#修改图片路径\" class=\"headerlink\" title=\"修改图片路径\"></a>修改图片路径</h2><p><img src=\"/../imgs/image-20230913161842174.png\" alt=\"image-20230913161842174\"></p>\n"},{"title":"02-rust基本类型","date":"2023-08-26T13:17:00.000Z","_content":"\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","source":"_posts/02-rust基本类型.md","raw":"---\ntitle: 02-rust基本类型\ndate: 2023-08-26 21:17:00\ncategories:\n- rust\ntags:\n- rust基本类型\n- rust\n\n---\n\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","slug":"02-rust基本类型","published":1,"updated":"2024-04-28T07:13:38.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaav000ar9w07gr4ho88","content":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n"},{"title":"03-rust复合类型","date":"2023-08-28T13:58:27.000Z","_content":"\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n# 3. 元组\n# 4. test\n\n待续。。。\n","source":"_posts/03-rust复合类型.md","raw":"---\ntitle: 03-rust复合类型\ndate: 2023-08-28 21:58:27\ncategories:\n- rust\ntags:\n- rust复合类型\n- rust\n---\n\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n# 3. 元组\n# 4. test\n\n待续。。。\n","slug":"03-rust复合类型","published":1,"updated":"2024-04-28T07:13:38.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvjcoaaw000er9w08cjhb54a","content":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><h1 id=\"3-元组\"><a href=\"#3-元组\" class=\"headerlink\" title=\"3. 元组\"></a>3. 元组</h1><h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4. test\"></a>4. test</h1><p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><h1 id=\"3-元组\"><a href=\"#3-元组\" class=\"headerlink\" title=\"3. 元组\"></a>3. 元组</h1><h1 id=\"4-test\"><a href=\"#4-test\" class=\"headerlink\" title=\"4. test\"></a>4. test</h1><p>待续。。。</p>\n"},{"title":"OSTEP-40-VSFS","date":"2024-05-15T06:40:25.000Z","_content":"\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\n\n磁盘上的哪些结构存储文件系统的数据和元数据？\n\n当一个进程打开一个文件时会发生什么？\n\n在读取或写入期间访问哪些磁盘结构？\n","source":"_posts/OSTEP-40-VSFS.md","raw":"---\ntitle: OSTEP-40-VSFS\ndate: 2024-05-15 14:40:25\ncategories:\n- OSTEP\ntags:\n- vsfs\n---\n\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\n\n磁盘上的哪些结构存储文件系统的数据和元数据？\n\n当一个进程打开一个文件时会发生什么？\n\n在读取或写入期间访问哪些磁盘结构？\n","slug":"OSTEP-40-VSFS","published":1,"updated":"2024-05-15T06:52:52.721Z","_id":"clw7gjvto00004zw06cc94zms","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf</a></p>\n<p>磁盘上的哪些结构存储文件系统的数据和元数据？</p>\n<p>当一个进程打开一个文件时会发生什么？</p>\n<p>在读取或写入期间访问哪些磁盘结构？</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/40.pdf</a></p>\n<p>磁盘上的哪些结构存储文件系统的数据和元数据？</p>\n<p>当一个进程打开一个文件时会发生什么？</p>\n<p>在读取或写入期间访问哪些磁盘结构？</p>\n"},{"title":"linux-block","date":"2024-05-15T06:36:36.000Z","_content":"\n# 块设备驱动\n\n\n\n块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。\n","source":"_posts/linux-block.md","raw":"---\ntitle: linux-block\ndate: 2024-05-15 14:36:36\ncategories:\n- driver\ntags:\n- block\n\n---\n\n# 块设备驱动\n\n\n\n块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。\n","slug":"linux-block","published":1,"updated":"2024-05-15T06:51:56.921Z","_id":"clw7gjvtr00014zw0fnm7f1ci","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"块设备驱动\"><a href=\"#块设备驱动\" class=\"headerlink\" title=\"块设备驱动\"></a>块设备驱动</h1><p>块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"块设备驱动\"><a href=\"#块设备驱动\" class=\"headerlink\" title=\"块设备驱动\"></a>块设备驱动</h1><p>块设备的主要特点是，cpu和总线读写数据所花时间与硬盘硬件的速度不匹配。</p>\n"},{"title":"U-Boot-fdt-GPT","date":"2024-05-15T06:37:05.000Z","_content":"\nU-Boot官网:https://docs.u-boot.org/en/latest/\n\nu-boot启动流程\n\n- 板子上电以后，首先执行的是ROM中的一段启动代码。启动代码**根据寄存器/外部管脚配置**，确定是进入下载模式，还是从某介质(Flash/EMMC/SD卡等存储设备)启动u-boot\n\n> ROM中的代码是固化的，无法修改\n\n# 一、介绍\n\n> FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。\n>\n> uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  \n\n> U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc/README.fdt-control\n\n### dtb在U-boot中的位置\n\n- dtb能够以两种形式编译到U-boot的镜像中\n\n1. dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)\n\n> 通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址\n\n1. dtb集成到u-boot的bin文件内部\n\n> 通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb\n\n1. 获取dts文件的地址gd->fdt_blob\n\n```\n// 宏用来表示是否把dtb文件放在uboot.bin的文件中\nCONFIG_OF_EMBED\n\n// 单独编译dtb文件\nCONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址\n\ngd->fdt_blob = (ulong *)&_end;\n\n// 可以通过fdtcontroladdr环境变量来指定fdt的地址\ngd->fdt_blob = (void *)getenv_ulong(\"fdtcontroladdr\", 16,\n\t\t\t\t\t\t(uintptr_t)gd->fdt_blob); \n```\n\n###  dtb解析接口\n\n- 定义在lib/fdtdec.c文件中，节点变量node中存放的是偏移地址\n\n```\n// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点\nint fdt_path_offset(const void *fdt, const char *path)\neg：node = fdt_path_offset(gd->fdt_blob, “/aliases”);\n\n// 获得节点node的某个字符串属性值\nconst void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)\neg： mac = fdt_getprop(gd->fdt_blob, node, “mac-address”, &len);\n\n// 获得节点node的某个整形数组属性值\nint fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)\neg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));\n\n// 获得节点node的地址属性值\nfdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)\neg：fdtdec_get_addr(blob, node, “reg”);\n\n// 获得config节点下的整形属性、bool属性、字符串等等\nfdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string\n\n// 获得chosen下的name节点的偏移\nint fdtdec_get_chosen_node(const void *blob, const char *name)\n\n// 获得chosen下name属性的值\nconst char *fdtdec_get_chosen_prop(const void *blob, const char *name)\n```\n\n- 定义在lib/fdtdec_common.c文件中\n\n```\n// 获得节点node的某个整形属性值\nint fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)\neg： bus->udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);\n\n// 获得节点node的某个无符号整形属性值\nfdtdec_get_uint\n```\n\n## fdt 命令\n\n对于u-boot提供了fdt的相关命令\n\n```\nfdt - flattened device tree utility commands\n\nUsage:\nfdt addr [-c]  <addr> [<length>]   - Set the [control] fdt location to <addr>\nfdt apply <addr>                    - Apply overlay to the DT\nfdt move   <fdt> <newaddr> <length> - Copy the fdt to <addr> and make it active\nfdt resize [<extrasize>]            - Resize fdt to size + padding to 4k addr + some optional <extrasize> if needed\nfdt print  <path> [<prop>]          - Recursive print starting at <path>\nfdt list   <path> [<prop>]          - Print one level starting at <path>\nfdt get value <var> <path> <prop>   - Get <property> and store in <var>\nfdt get name <var> <path> <index>   - Get name of node <index> and store in <var>\nfdt get addr <var> <path> <prop>    - Get start address of <property> and store in <var>\nfdt get size <var> <path> [<prop>]  - Get size of [<property>] or num nodes and store in <var>\nfdt set    <path> <prop> [<val>]    - Set <property> [to <val>]\nfdt mknode <path> <node>            - Create a new node after <path>\nfdt rm     <path> [<prop>]          - Delete the node or <property>\nfdt header                          - Display header info\nfdt bootcpu <id>                    - Set boot cpuid\nfdt memory <addr> <size>            - Add/Update memory node\nfdt rsvmem print                    - Show current mem reserves\nfdt rsvmem add <addr> <size>        - Add a mem reserve\nfdt rsvmem delete <index>           - Delete a mem reserves\nfdt chosen [<start> <end>]          - Add/update the /chosen branch in the tree\n                                        <start>/<end> - initrd start/end addr\nNOTE: Dereference aliases by omitting the leading '/', e.g. fdt print ethernet0.\n```\n\nfdt print加path参数，则打path内容，如下(其中/memory是path)：\n\n```c\nU-Boot> fdt print /memory\nmemory {\ndevice_type = \"memory\";\nreg = <0x70000000 0x4000000>;\n};\n\nU-Boot> fdt print #不加参数时，打印出整颗树\n```\n\n\n\n# 二、u-boot 获取GPT分区表\n\n在uboot中通过命令打印分区表\n\n```\npart list mmc 0\n```\n\n## 3588-android-uboot\n\n```c\n#include <common.h>\n#include <command.h>\n#include <android_image.h>\n#include <mmc.h>\n#include <stdlib.h>\n#include <memalign.h>\n#include <fdtdec.h>\n\n#define PART_MAX_COUNT  128\n#define\tLAB_SIZE\t\t512\n#define\tHEADER_OFFSET\tLAB_SIZE\n#define\tENTRY_OFFSET\t(2 * LAB_SIZE)\n#define\tVAL1_OFFSET\t\tsizeof(u64)\n#define\tVAL2_OFFSET\t\t(2 * sizeof(u64))\n\nstatic u64 get_gpt_blk_cnt_and_print(struct blk_desc *dev_desc,\n\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte) {\n\tchar efi_str[PARTNAME_SZ + 1];\n\tu64 gpt_part_size, gpt_blk_cnt = 0;\n\tgpt_entry *gpt_e;\n\tint i;\n\n\tgpt_e = *gpt_pte;\n\tfor (i = 0; i < gpt_head->num_partition_entries; i++) {\n\n\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,\n\t\t\t\t\t     PARTNAME_SZ + 1);\n\n\t\tprintf(\"%s: part: %2d name - GPT: %16s \",\n\t\t      __func__, i, efi_str);\n\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -\n\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + 1;\n\t\tgpt_blk_cnt += gpt_part_size;\n\t\t\n\t\tif(gpt_part_size == 1) \n\t\t\tbreak;\n\t\t\n\t\tprintf(\"size(LBA) - GPT: %8llu \",\n\t\t      (unsigned long long)gpt_part_size);\n\n\t\tprintf(\"start LBA - GPT: %8llu \\n\",\n\t\t      le64_to_cpu(gpt_e[i].starting_lba));\n\t}\n\n\treturn gpt_blk_cnt + gpt_e[0].starting_lba - 1;\n}\n\nstatic int get_gpt_meta_data(u64 *data_size, void **data)\n{\n    gpt_header *pgpt_head;\n\tgpt_entry *entries;\n\tvoid *meta_data;\n\tu64 meta_data_size, gpt_entries_size;\n\tstruct blk_desc *dev_desc = NULL;\n\tstruct mmc *mmc = NULL;\n\tu64 blk_size = 0;\n\tu64 blk_cnt = 0;\n\tu64 tag = 0x55AA;\n\tlbaint_t lba;\n    \n\tif (!data_size || !data) {\n\t\tprintf(\"%s *** ERROR: Invalid Argument(s) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    mmc = do_returnmmc();\n\tif (!mmc)\n\t\treturn CMD_RET_FAILURE;\n    \n    dev_desc = mmc_get_blk_desc(mmc);\n\tif (!dev_desc) {\n\t\tprintf(\"%s *** ERROR: mmc_get_blk_desc err ***\\n\", __func__);\n\t\treturn -1;\n\t}\n\n\tgpt_entries_size = sizeof(gpt_entry) * PART_MAX_COUNT;\n\tmeta_data_size = LAB_SIZE + sizeof(gpt_header) + gpt_entries_size;\n\tmeta_data = malloc(meta_data_size);\n\tif(!meta_data) {\n\t\tprintf(\"%s *** ERROR: malloc memory (gpt meta data) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    memset(meta_data, 0, meta_data_size);\n\tpgpt_head = (gpt_header *)((char *)meta_data + HEADER_OFFSET);\n\tentries = (gpt_entry *)((char *)meta_data + ENTRY_OFFSET);\n\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc->blksz);\n\n\t/* Read MBR Header from device */\n\tlba = 0; /* MBR is always at 0 */\n\tblk_cnt = 1; /* MBR (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != 1) {\n\t\tprintf(\"*** ERROR: Can't read MBR header ***\\n\");\n\t\tgoto ERROR_OUT;\n\t}\n\n\t/* Read GPT Header from device */\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tblk_cnt = 1; /* GPT Header (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != 1) {\n    \tprintf(\"%s *** ERROR: Can't read GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tif (validate_gpt_header(pgpt_head, lba, dev_desc->lba)) {\n\t\tprintf(\"%s *** ERROR: validate_gpt_header GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tif (dev_desc->sig_type == SIG_TYPE_NONE) {\n\t\tefi_guid_t empty = {};\n\t\tif (memcmp(&pgpt_head->disk_guid, &empty, sizeof(empty))) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_GUID;\n\t\t\tmemcpy(&dev_desc->guid_sig, &pgpt_head->disk_guid,\n\t\t\t      sizeof(empty));\n\t\t} else if (mbr->unique_mbr_signature != 0) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_MBR;\n\t\t\tdev_desc->mbr_sig = mbr->unique_mbr_signature;\n\t\t}\n\t}\n\n\t/* Read GPT Entries from device */\n\tlba = le64_to_cpu(pgpt_head->partition_entry_lba);\n\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head->num_partition_entries) *\n\t\t\t\t   \tle32_to_cpu(pgpt_head->sizeof_partition_entry)),\n\t\t\t\t  \tdev_desc);\n\tif (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) {\n\t\tprintf(\"%s *** ERROR:read entries (lba=%llu) ***\\n\",\n\t\t\t\t__func__, pgpt_head->partition_entry_lba);\n\t\tgoto ERROR_OUT;\n\t}\n\t\n\tblk_size = dev_desc->blksz;\n\tvalidate_gpt_entries(pgpt_head, entries);\n\t\n\tdebug(\"%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n\",\n\t\t\t\t__func__, (unsigned long long)(ulong)lba, blk_cnt, blk_size);\n\t\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n    \n    /* \n\t * build info, layout of meta_data:\n\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries\n\t */\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n\t/*this value makes we known the reserved memory is available*/\n\tmemcpy(meta_data, (void *)&tag, sizeof(u64));\n\tmemcpy(meta_data + VAL1_OFFSET, (void *)&blk_size, sizeof(u64));\n\tmemcpy(meta_data + VAL2_OFFSET, (void *)&blk_cnt, sizeof(u64));\n\n\t*data_size = meta_data_size;\n\t*data = meta_data;\n\n\treturn 0;\n\nERROR_OUT:\n\tfree(meta_data);\n\tmeta_data = NULL;\n\treturn -1;\n}\n```\n\n\n\n参考：\n\n[Device Tree（四）：文件结构解析 (wowotech.net)](http://www.wowotech.net/device_model/dt-code-file-struct-parse.html)\n\n[Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376295326)\n\n[Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376296222)\n\nhttps://www.cnblogs.com/solo666/p/16518154.html\n","source":"_posts/U-Boot-fdt-GPT.md","raw":"---\ntitle: U-Boot-fdt-GPT\ndate: 2024-05-15 14:37:05\ncategories:\n- uboot\ntags:\n- fdt\n- GPT\n- rk3588\n---\n\nU-Boot官网:https://docs.u-boot.org/en/latest/\n\nu-boot启动流程\n\n- 板子上电以后，首先执行的是ROM中的一段启动代码。启动代码**根据寄存器/外部管脚配置**，确定是进入下载模式，还是从某介质(Flash/EMMC/SD卡等存储设备)启动u-boot\n\n> ROM中的代码是固化的，无法修改\n\n# 一、介绍\n\n> FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。\n>\n> uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  \n\n> U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc/README.fdt-control\n\n### dtb在U-boot中的位置\n\n- dtb能够以两种形式编译到U-boot的镜像中\n\n1. dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)\n\n> 通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址\n\n1. dtb集成到u-boot的bin文件内部\n\n> 通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb\n\n1. 获取dts文件的地址gd->fdt_blob\n\n```\n// 宏用来表示是否把dtb文件放在uboot.bin的文件中\nCONFIG_OF_EMBED\n\n// 单独编译dtb文件\nCONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址\n\ngd->fdt_blob = (ulong *)&_end;\n\n// 可以通过fdtcontroladdr环境变量来指定fdt的地址\ngd->fdt_blob = (void *)getenv_ulong(\"fdtcontroladdr\", 16,\n\t\t\t\t\t\t(uintptr_t)gd->fdt_blob); \n```\n\n###  dtb解析接口\n\n- 定义在lib/fdtdec.c文件中，节点变量node中存放的是偏移地址\n\n```\n// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点\nint fdt_path_offset(const void *fdt, const char *path)\neg：node = fdt_path_offset(gd->fdt_blob, “/aliases”);\n\n// 获得节点node的某个字符串属性值\nconst void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)\neg： mac = fdt_getprop(gd->fdt_blob, node, “mac-address”, &len);\n\n// 获得节点node的某个整形数组属性值\nint fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)\neg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));\n\n// 获得节点node的地址属性值\nfdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)\neg：fdtdec_get_addr(blob, node, “reg”);\n\n// 获得config节点下的整形属性、bool属性、字符串等等\nfdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string\n\n// 获得chosen下的name节点的偏移\nint fdtdec_get_chosen_node(const void *blob, const char *name)\n\n// 获得chosen下name属性的值\nconst char *fdtdec_get_chosen_prop(const void *blob, const char *name)\n```\n\n- 定义在lib/fdtdec_common.c文件中\n\n```\n// 获得节点node的某个整形属性值\nint fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)\neg： bus->udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);\n\n// 获得节点node的某个无符号整形属性值\nfdtdec_get_uint\n```\n\n## fdt 命令\n\n对于u-boot提供了fdt的相关命令\n\n```\nfdt - flattened device tree utility commands\n\nUsage:\nfdt addr [-c]  <addr> [<length>]   - Set the [control] fdt location to <addr>\nfdt apply <addr>                    - Apply overlay to the DT\nfdt move   <fdt> <newaddr> <length> - Copy the fdt to <addr> and make it active\nfdt resize [<extrasize>]            - Resize fdt to size + padding to 4k addr + some optional <extrasize> if needed\nfdt print  <path> [<prop>]          - Recursive print starting at <path>\nfdt list   <path> [<prop>]          - Print one level starting at <path>\nfdt get value <var> <path> <prop>   - Get <property> and store in <var>\nfdt get name <var> <path> <index>   - Get name of node <index> and store in <var>\nfdt get addr <var> <path> <prop>    - Get start address of <property> and store in <var>\nfdt get size <var> <path> [<prop>]  - Get size of [<property>] or num nodes and store in <var>\nfdt set    <path> <prop> [<val>]    - Set <property> [to <val>]\nfdt mknode <path> <node>            - Create a new node after <path>\nfdt rm     <path> [<prop>]          - Delete the node or <property>\nfdt header                          - Display header info\nfdt bootcpu <id>                    - Set boot cpuid\nfdt memory <addr> <size>            - Add/Update memory node\nfdt rsvmem print                    - Show current mem reserves\nfdt rsvmem add <addr> <size>        - Add a mem reserve\nfdt rsvmem delete <index>           - Delete a mem reserves\nfdt chosen [<start> <end>]          - Add/update the /chosen branch in the tree\n                                        <start>/<end> - initrd start/end addr\nNOTE: Dereference aliases by omitting the leading '/', e.g. fdt print ethernet0.\n```\n\nfdt print加path参数，则打path内容，如下(其中/memory是path)：\n\n```c\nU-Boot> fdt print /memory\nmemory {\ndevice_type = \"memory\";\nreg = <0x70000000 0x4000000>;\n};\n\nU-Boot> fdt print #不加参数时，打印出整颗树\n```\n\n\n\n# 二、u-boot 获取GPT分区表\n\n在uboot中通过命令打印分区表\n\n```\npart list mmc 0\n```\n\n## 3588-android-uboot\n\n```c\n#include <common.h>\n#include <command.h>\n#include <android_image.h>\n#include <mmc.h>\n#include <stdlib.h>\n#include <memalign.h>\n#include <fdtdec.h>\n\n#define PART_MAX_COUNT  128\n#define\tLAB_SIZE\t\t512\n#define\tHEADER_OFFSET\tLAB_SIZE\n#define\tENTRY_OFFSET\t(2 * LAB_SIZE)\n#define\tVAL1_OFFSET\t\tsizeof(u64)\n#define\tVAL2_OFFSET\t\t(2 * sizeof(u64))\n\nstatic u64 get_gpt_blk_cnt_and_print(struct blk_desc *dev_desc,\n\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte) {\n\tchar efi_str[PARTNAME_SZ + 1];\n\tu64 gpt_part_size, gpt_blk_cnt = 0;\n\tgpt_entry *gpt_e;\n\tint i;\n\n\tgpt_e = *gpt_pte;\n\tfor (i = 0; i < gpt_head->num_partition_entries; i++) {\n\n\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,\n\t\t\t\t\t     PARTNAME_SZ + 1);\n\n\t\tprintf(\"%s: part: %2d name - GPT: %16s \",\n\t\t      __func__, i, efi_str);\n\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -\n\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + 1;\n\t\tgpt_blk_cnt += gpt_part_size;\n\t\t\n\t\tif(gpt_part_size == 1) \n\t\t\tbreak;\n\t\t\n\t\tprintf(\"size(LBA) - GPT: %8llu \",\n\t\t      (unsigned long long)gpt_part_size);\n\n\t\tprintf(\"start LBA - GPT: %8llu \\n\",\n\t\t      le64_to_cpu(gpt_e[i].starting_lba));\n\t}\n\n\treturn gpt_blk_cnt + gpt_e[0].starting_lba - 1;\n}\n\nstatic int get_gpt_meta_data(u64 *data_size, void **data)\n{\n    gpt_header *pgpt_head;\n\tgpt_entry *entries;\n\tvoid *meta_data;\n\tu64 meta_data_size, gpt_entries_size;\n\tstruct blk_desc *dev_desc = NULL;\n\tstruct mmc *mmc = NULL;\n\tu64 blk_size = 0;\n\tu64 blk_cnt = 0;\n\tu64 tag = 0x55AA;\n\tlbaint_t lba;\n    \n\tif (!data_size || !data) {\n\t\tprintf(\"%s *** ERROR: Invalid Argument(s) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    mmc = do_returnmmc();\n\tif (!mmc)\n\t\treturn CMD_RET_FAILURE;\n    \n    dev_desc = mmc_get_blk_desc(mmc);\n\tif (!dev_desc) {\n\t\tprintf(\"%s *** ERROR: mmc_get_blk_desc err ***\\n\", __func__);\n\t\treturn -1;\n\t}\n\n\tgpt_entries_size = sizeof(gpt_entry) * PART_MAX_COUNT;\n\tmeta_data_size = LAB_SIZE + sizeof(gpt_header) + gpt_entries_size;\n\tmeta_data = malloc(meta_data_size);\n\tif(!meta_data) {\n\t\tprintf(\"%s *** ERROR: malloc memory (gpt meta data) ***\\n\", __func__);\n\t\treturn -1;\n\t}\n    \n    memset(meta_data, 0, meta_data_size);\n\tpgpt_head = (gpt_header *)((char *)meta_data + HEADER_OFFSET);\n\tentries = (gpt_entry *)((char *)meta_data + ENTRY_OFFSET);\n\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc->blksz);\n\n\t/* Read MBR Header from device */\n\tlba = 0; /* MBR is always at 0 */\n\tblk_cnt = 1; /* MBR (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != 1) {\n\t\tprintf(\"*** ERROR: Can't read MBR header ***\\n\");\n\t\tgoto ERROR_OUT;\n\t}\n\n\t/* Read GPT Header from device */\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tblk_cnt = 1; /* GPT Header (1 block) */\n\tif (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != 1) {\n    \tprintf(\"%s *** ERROR: Can't read GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;\n\tif (validate_gpt_header(pgpt_head, lba, dev_desc->lba)) {\n\t\tprintf(\"%s *** ERROR: validate_gpt_header GPT header ***\\n\", __func__);\n\t\tgoto ERROR_OUT;\n\t}\n\n\tif (dev_desc->sig_type == SIG_TYPE_NONE) {\n\t\tefi_guid_t empty = {};\n\t\tif (memcmp(&pgpt_head->disk_guid, &empty, sizeof(empty))) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_GUID;\n\t\t\tmemcpy(&dev_desc->guid_sig, &pgpt_head->disk_guid,\n\t\t\t      sizeof(empty));\n\t\t} else if (mbr->unique_mbr_signature != 0) {\n\t\t\tdev_desc->sig_type = SIG_TYPE_MBR;\n\t\t\tdev_desc->mbr_sig = mbr->unique_mbr_signature;\n\t\t}\n\t}\n\n\t/* Read GPT Entries from device */\n\tlba = le64_to_cpu(pgpt_head->partition_entry_lba);\n\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head->num_partition_entries) *\n\t\t\t\t   \tle32_to_cpu(pgpt_head->sizeof_partition_entry)),\n\t\t\t\t  \tdev_desc);\n\tif (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) {\n\t\tprintf(\"%s *** ERROR:read entries (lba=%llu) ***\\n\",\n\t\t\t\t__func__, pgpt_head->partition_entry_lba);\n\t\tgoto ERROR_OUT;\n\t}\n\t\n\tblk_size = dev_desc->blksz;\n\tvalidate_gpt_entries(pgpt_head, entries);\n\t\n\tdebug(\"%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n\",\n\t\t\t\t__func__, (unsigned long long)(ulong)lba, blk_cnt, blk_size);\n\t\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n    \n    /* \n\t * build info, layout of meta_data:\n\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries\n\t */\n\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &entries);\n\t/*this value makes we known the reserved memory is available*/\n\tmemcpy(meta_data, (void *)&tag, sizeof(u64));\n\tmemcpy(meta_data + VAL1_OFFSET, (void *)&blk_size, sizeof(u64));\n\tmemcpy(meta_data + VAL2_OFFSET, (void *)&blk_cnt, sizeof(u64));\n\n\t*data_size = meta_data_size;\n\t*data = meta_data;\n\n\treturn 0;\n\nERROR_OUT:\n\tfree(meta_data);\n\tmeta_data = NULL;\n\treturn -1;\n}\n```\n\n\n\n参考：\n\n[Device Tree（四）：文件结构解析 (wowotech.net)](http://www.wowotech.net/device_model/dt-code-file-struct-parse.html)\n\n[Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376295326)\n\n[Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/376296222)\n\nhttps://www.cnblogs.com/solo666/p/16518154.html\n","slug":"U-Boot-fdt-GPT","published":1,"updated":"2024-05-15T06:50:22.548Z","_id":"clw7gjvtv00044zw001hi1y1n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>U-Boot官网:<a href=\"https://docs.u-boot.org/en/latest/\">https://docs.u-boot.org/en/latest/</a></p>\n<p>u-boot启动流程</p>\n<ul>\n<li>板子上电以后，首先执行的是ROM中的一段启动代码。启动代码<strong>根据寄存器&#x2F;外部管脚配置</strong>，确定是进入下载模式，还是从某介质(Flash&#x2F;EMMC&#x2F;SD卡等存储设备)启动u-boot</li>\n</ul>\n<blockquote>\n<p>ROM中的代码是固化的，无法修改</p>\n</blockquote>\n<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><blockquote>\n<p>FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。</p>\n<p>uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  </p>\n</blockquote>\n<blockquote>\n<p>U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc&#x2F;README.fdt-control</p>\n</blockquote>\n<h3 id=\"dtb在U-boot中的位置\"><a href=\"#dtb在U-boot中的位置\" class=\"headerlink\" title=\"dtb在U-boot中的位置\"></a>dtb在U-boot中的位置</h3><ul>\n<li>dtb能够以两种形式编译到U-boot的镜像中</li>\n</ul>\n<ol>\n<li>dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址</p>\n</blockquote>\n<ol>\n<li>dtb集成到u-boot的bin文件内部</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb</p>\n</blockquote>\n<ol>\n<li>获取dts文件的地址gd-&gt;fdt_blob</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 宏用来表示是否把dtb文件放在uboot.bin的文件中</span><br><span class=\"line\">CONFIG_OF_EMBED</span><br><span class=\"line\"></span><br><span class=\"line\">// 单独编译dtb文件</span><br><span class=\"line\">CONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址</span><br><span class=\"line\"></span><br><span class=\"line\">gd-&gt;fdt_blob = (ulong *)&amp;_end;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以通过fdtcontroladdr环境变量来指定fdt的地址</span><br><span class=\"line\">gd-&gt;fdt_blob = (void *)getenv_ulong(&quot;fdtcontroladdr&quot;, 16,</span><br><span class=\"line\">\t\t\t\t\t\t(uintptr_t)gd-&gt;fdt_blob); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dtb解析接口\"><a href=\"#dtb解析接口\" class=\"headerlink\" title=\"dtb解析接口\"></a>dtb解析接口</h3><ul>\n<li>定义在lib&#x2F;fdtdec.c文件中，节点变量node中存放的是偏移地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点</span><br><span class=\"line\">int fdt_path_offset(const void *fdt, const char *path)</span><br><span class=\"line\">eg：node = fdt_path_offset(gd-&gt;fdt_blob, “/aliases”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个字符串属性值</span><br><span class=\"line\">const void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)</span><br><span class=\"line\">eg： mac = fdt_getprop(gd-&gt;fdt_blob, node, “mac-address”, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个整形数组属性值</span><br><span class=\"line\">int fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)</span><br><span class=\"line\">eg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的地址属性值</span><br><span class=\"line\">fdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)</span><br><span class=\"line\">eg：fdtdec_get_addr(blob, node, “reg”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得config节点下的整形属性、bool属性、字符串等等</span><br><span class=\"line\">fdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下的name节点的偏移</span><br><span class=\"line\">int fdtdec_get_chosen_node(const void *blob, const char *name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下name属性的值</span><br><span class=\"line\">const char *fdtdec_get_chosen_prop(const void *blob, const char *name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义在lib&#x2F;fdtdec_common.c文件中</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得节点node的某个整形属性值</span><br><span class=\"line\">int fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)</span><br><span class=\"line\">eg： bus-&gt;udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个无符号整形属性值</span><br><span class=\"line\">fdtdec_get_uint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fdt-命令\"><a href=\"#fdt-命令\" class=\"headerlink\" title=\"fdt 命令\"></a>fdt 命令</h2><p>对于u-boot提供了fdt的相关命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdt - flattened device tree utility commands</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">fdt addr [-c]  &lt;addr&gt; [&lt;length&gt;]   - Set the [control] fdt location to &lt;addr&gt;</span><br><span class=\"line\">fdt apply &lt;addr&gt;                    - Apply overlay to the DT</span><br><span class=\"line\">fdt move   &lt;fdt&gt; &lt;newaddr&gt; &lt;length&gt; - Copy the fdt to &lt;addr&gt; and make it active</span><br><span class=\"line\">fdt resize [&lt;extrasize&gt;]            - Resize fdt to size + padding to 4k addr + some optional &lt;extrasize&gt; if needed</span><br><span class=\"line\">fdt print  &lt;path&gt; [&lt;prop&gt;]          - Recursive print starting at &lt;path&gt;</span><br><span class=\"line\">fdt list   &lt;path&gt; [&lt;prop&gt;]          - Print one level starting at &lt;path&gt;</span><br><span class=\"line\">fdt get value &lt;var&gt; &lt;path&gt; &lt;prop&gt;   - Get &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get name &lt;var&gt; &lt;path&gt; &lt;index&gt;   - Get name of node &lt;index&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get addr &lt;var&gt; &lt;path&gt; &lt;prop&gt;    - Get start address of &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get size &lt;var&gt; &lt;path&gt; [&lt;prop&gt;]  - Get size of [&lt;property&gt;] or num nodes and store in &lt;var&gt;</span><br><span class=\"line\">fdt set    &lt;path&gt; &lt;prop&gt; [&lt;val&gt;]    - Set &lt;property&gt; [to &lt;val&gt;]</span><br><span class=\"line\">fdt mknode &lt;path&gt; &lt;node&gt;            - Create a new node after &lt;path&gt;</span><br><span class=\"line\">fdt rm     &lt;path&gt; [&lt;prop&gt;]          - Delete the node or &lt;property&gt;</span><br><span class=\"line\">fdt header                          - Display header info</span><br><span class=\"line\">fdt bootcpu &lt;id&gt;                    - Set boot cpuid</span><br><span class=\"line\">fdt memory &lt;addr&gt; &lt;size&gt;            - Add/Update memory node</span><br><span class=\"line\">fdt rsvmem print                    - Show current mem reserves</span><br><span class=\"line\">fdt rsvmem add &lt;addr&gt; &lt;size&gt;        - Add a mem reserve</span><br><span class=\"line\">fdt rsvmem delete &lt;index&gt;           - Delete a mem reserves</span><br><span class=\"line\">fdt chosen [&lt;start&gt; &lt;end&gt;]          - Add/update the /chosen branch in the tree</span><br><span class=\"line\">                                        &lt;start&gt;/&lt;end&gt; - initrd start/end addr</span><br><span class=\"line\">NOTE: Dereference aliases by omitting the leading &#x27;/&#x27;, e.g. fdt print ethernet0.</span><br></pre></td></tr></table></figure>\n\n<p>fdt print加path参数，则打path内容，如下(其中&#x2F;memory是path)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U-Boot&gt; fdt print /memory</span><br><span class=\"line\">memory &#123;</span><br><span class=\"line\">device_type = <span class=\"string\">&quot;memory&quot;</span>;</span><br><span class=\"line\">reg = &lt;<span class=\"number\">0x70000000</span> <span class=\"number\">0x4000000</span>&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">U-Boot&gt; fdt print #不加参数时，打印出整颗树</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"二、u-boot-获取GPT分区表\"><a href=\"#二、u-boot-获取GPT分区表\" class=\"headerlink\" title=\"二、u-boot 获取GPT分区表\"></a>二、u-boot 获取GPT分区表</h1><p>在uboot中通过命令打印分区表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part list mmc 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3588-android-uboot\"><a href=\"#3588-android-uboot\" class=\"headerlink\" title=\"3588-android-uboot\"></a>3588-android-uboot</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;command.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;android_image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mmc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memalign.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fdtdec.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PART_MAX_COUNT  128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tLAB_SIZE\t\t512</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tHEADER_OFFSET\tLAB_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tENTRY_OFFSET\t(2 * LAB_SIZE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL1_OFFSET\t\tsizeof(u64)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL2_OFFSET\t\t(2 * sizeof(u64))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> u64 <span class=\"title function_\">get_gpt_blk_cnt_and_print</span><span class=\"params\">(<span class=\"keyword\">struct</span> blk_desc *dev_desc,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> efi_str[PARTNAME_SZ + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tu64 gpt_part_size, gpt_blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgpt_entry *gpt_e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_e = *gpt_pte;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gpt_head-&gt;num_partition_entries; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,</span><br><span class=\"line\">\t\t\t\t\t     PARTNAME_SZ + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: part: %2d name - GPT: %16s &quot;</span>,</span><br><span class=\"line\">\t\t      __func__, i, efi_str);</span><br><span class=\"line\">\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -</span><br><span class=\"line\">\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tgpt_blk_cnt += gpt_part_size;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(gpt_part_size == <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size(LBA) - GPT: %8llu &quot;</span>,</span><br><span class=\"line\">\t\t      (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)gpt_part_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start LBA - GPT: %8llu \\n&quot;</span>,</span><br><span class=\"line\">\t\t      le64_to_cpu(gpt_e[i].starting_lba));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gpt_blk_cnt + gpt_e[<span class=\"number\">0</span>].starting_lba - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">get_gpt_meta_data</span><span class=\"params\">(u64 *data_size, <span class=\"type\">void</span> **data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gpt_header *pgpt_head;</span><br><span class=\"line\">\tgpt_entry *entries;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *meta_data;</span><br><span class=\"line\">\tu64 meta_data_size, gpt_entries_size;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">blk_desc</span> *<span class=\"title\">dev_desc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mmc</span> *<span class=\"title\">mmc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tu64 blk_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 tag = <span class=\"number\">0x55AA</span>;</span><br><span class=\"line\">\t<span class=\"type\">lbaint_t</span> lba;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data_size || !data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Invalid Argument(s) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mmc = do_returnmmc();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mmc)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> CMD_RET_FAILURE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dev_desc = mmc_get_blk_desc(mmc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dev_desc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: mmc_get_blk_desc err ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_entries_size = <span class=\"keyword\">sizeof</span>(gpt_entry) * PART_MAX_COUNT;</span><br><span class=\"line\">\tmeta_data_size = LAB_SIZE + <span class=\"keyword\">sizeof</span>(gpt_header) + gpt_entries_size;</span><br><span class=\"line\">\tmeta_data = <span class=\"built_in\">malloc</span>(meta_data_size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!meta_data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: malloc memory (gpt meta data) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(meta_data, <span class=\"number\">0</span>, meta_data_size);</span><br><span class=\"line\">\tpgpt_head = (gpt_header *)((<span class=\"type\">char</span> *)meta_data + HEADER_OFFSET);</span><br><span class=\"line\">\tentries = (gpt_entry *)((<span class=\"type\">char</span> *)meta_data + ENTRY_OFFSET);</span><br><span class=\"line\">\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc-&gt;blksz);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read MBR Header from device */</span></span><br><span class=\"line\">\tlba = <span class=\"number\">0</span>; <span class=\"comment\">/* MBR is always at 0 */</span></span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* MBR (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*** ERROR: Can&#x27;t read MBR header ***\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Header from device */</span></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* GPT Header (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Can&#x27;t read GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (validate_gpt_header(pgpt_head, lba, dev_desc-&gt;lba)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: validate_gpt_header GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dev_desc-&gt;sig_type == SIG_TYPE_NONE) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">efi_guid_t</span> empty = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(&amp;pgpt_head-&gt;disk_guid, &amp;empty, <span class=\"keyword\">sizeof</span>(empty))) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_GUID;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(&amp;dev_desc-&gt;guid_sig, &amp;pgpt_head-&gt;disk_guid,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">sizeof</span>(empty));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbr-&gt;unique_mbr_signature != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_MBR;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;mbr_sig = mbr-&gt;unique_mbr_signature;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Entries from device */</span></span><br><span class=\"line\">\tlba = le64_to_cpu(pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head-&gt;num_partition_entries) *</span><br><span class=\"line\">\t\t\t\t   \tle32_to_cpu(pgpt_head-&gt;sizeof_partition_entry)),</span><br><span class=\"line\">\t\t\t\t  \tdev_desc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR:read entries (lba=%llu) ***\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_size = dev_desc-&gt;blksz;</span><br><span class=\"line\">\tvalidate_gpt_entries(pgpt_head, entries);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdebug(<span class=\"string\">&quot;%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)(ulong)lba, blk_cnt, blk_size);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t * build info, layout of meta_data:</span></span><br><span class=\"line\"><span class=\"comment\">\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">\t<span class=\"comment\">/*this value makes we known the reserved memory is available*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data, (<span class=\"type\">void</span> *)&amp;tag, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL1_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_size, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL2_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_cnt, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*data_size = meta_data_size;</span><br><span class=\"line\">\t*data = meta_data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_OUT:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(meta_data);</span><br><span class=\"line\">\tmeta_data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"http://www.wowotech.net/device_model/dt-code-file-struct-parse.html\">Device Tree（四）：文件结构解析 (wowotech.net)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376295326\">Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376296222\">Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/solo666/p/16518154.html\">https://www.cnblogs.com/solo666/p/16518154.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>U-Boot官网:<a href=\"https://docs.u-boot.org/en/latest/\">https://docs.u-boot.org/en/latest/</a></p>\n<p>u-boot启动流程</p>\n<ul>\n<li>板子上电以后，首先执行的是ROM中的一段启动代码。启动代码<strong>根据寄存器&#x2F;外部管脚配置</strong>，确定是进入下载模式，还是从某介质(Flash&#x2F;EMMC&#x2F;SD卡等存储设备)启动u-boot</li>\n</ul>\n<blockquote>\n<p>ROM中的代码是固化的，无法修改</p>\n</blockquote>\n<h1 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h1><blockquote>\n<p>FDT，flatted device tree，扁平设备树，简单来说，就是将部分设备信息结构存放到device tree文件中。</p>\n<p>uboot最终将其编译成dtb文件，使用过程中通过解析该dtb来获取板级设备信息。  </p>\n</blockquote>\n<blockquote>\n<p>U-boot的dtb和kernel中的dtb是一致的，有关fdt的详细介绍，参考doc&#x2F;README.fdt-control</p>\n</blockquote>\n<h3 id=\"dtb在U-boot中的位置\"><a href=\"#dtb在U-boot中的位置\" class=\"headerlink\" title=\"dtb在U-boot中的位置\"></a>dtb在U-boot中的位置</h3><ul>\n<li>dtb能够以两种形式编译到U-boot的镜像中</li>\n</ul>\n<ol>\n<li>dtb和u-boot的bin文件分离(imx6q中使用的这种方式，在.config文件中可以查看到)</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_SEPARATE宏定义使能，dtb最后会追加到u-boot的bin文件的最后面，通过u-boot的结束地址符号_end符号来获取dtb的地址</p>\n</blockquote>\n<ol>\n<li>dtb集成到u-boot的bin文件内部</li>\n</ol>\n<blockquote>\n<p>通过CONFIG_OF_EMBED宏定义使能，dtb会位于u-boot的.dtb.init.rodata段中，通过__dtb_dt_begin符号来获取dtb</p>\n</blockquote>\n<ol>\n<li>获取dts文件的地址gd-&gt;fdt_blob</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 宏用来表示是否把dtb文件放在uboot.bin的文件中</span><br><span class=\"line\">CONFIG_OF_EMBED</span><br><span class=\"line\"></span><br><span class=\"line\">// 单独编译dtb文件</span><br><span class=\"line\">CONFIG_OF_SEPARATE，编译出来的dtb放在uboot.bin的最后面，就是dtb追加到uboot的bin文件后面时，通过_end符号来获取dtb地址</span><br><span class=\"line\"></span><br><span class=\"line\">gd-&gt;fdt_blob = (ulong *)&amp;_end;</span><br><span class=\"line\"></span><br><span class=\"line\">// 可以通过fdtcontroladdr环境变量来指定fdt的地址</span><br><span class=\"line\">gd-&gt;fdt_blob = (void *)getenv_ulong(&quot;fdtcontroladdr&quot;, 16,</span><br><span class=\"line\">\t\t\t\t\t\t(uintptr_t)gd-&gt;fdt_blob); </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"dtb解析接口\"><a href=\"#dtb解析接口\" class=\"headerlink\" title=\"dtb解析接口\"></a>dtb解析接口</h3><ul>\n<li>定义在lib&#x2F;fdtdec.c文件中，节点变量node中存放的是偏移地址</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得dtb下某个节点的路径path的偏移，偏移就代表这个节点</span><br><span class=\"line\">int fdt_path_offset(const void *fdt, const char *path)</span><br><span class=\"line\">eg：node = fdt_path_offset(gd-&gt;fdt_blob, “/aliases”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个字符串属性值</span><br><span class=\"line\">const void *fdt_getprop(const void *fdt, int nodeoffset, const char *name, int *lenp)</span><br><span class=\"line\">eg： mac = fdt_getprop(gd-&gt;fdt_blob, node, “mac-address”, &amp;len);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个整形数组属性值</span><br><span class=\"line\">int fdtdec_get_int_array(const void *blob, int node, const char *prop_name, u32 *array, int count)</span><br><span class=\"line\">eg： ret = fdtdec_get_int_array(blob, node, “interrupts”, cell, ARRAY_SIZE(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的地址属性值</span><br><span class=\"line\">fdt_addr_t fdtdec_get_addr(const void *blob, int node, const char *prop_name)</span><br><span class=\"line\">eg：fdtdec_get_addr(blob, node, “reg”);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得config节点下的整形属性、bool属性、字符串等等</span><br><span class=\"line\">fdtdec_get_config_int、fdtdec_get_config_bool、fdtdec_get_config_string</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下的name节点的偏移</span><br><span class=\"line\">int fdtdec_get_chosen_node(const void *blob, const char *name)</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得chosen下name属性的值</span><br><span class=\"line\">const char *fdtdec_get_chosen_prop(const void *blob, const char *name)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义在lib&#x2F;fdtdec_common.c文件中</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获得节点node的某个整形属性值</span><br><span class=\"line\">int fdtdec_get_int(const void *blob, int node, const char *prop_name, int default_val)</span><br><span class=\"line\">eg： bus-&gt;udelay = fdtdec_get_int(blob, node, “i2c-gpio,delay-us”, DEFAULT_UDELAY);</span><br><span class=\"line\"></span><br><span class=\"line\">// 获得节点node的某个无符号整形属性值</span><br><span class=\"line\">fdtdec_get_uint</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fdt-命令\"><a href=\"#fdt-命令\" class=\"headerlink\" title=\"fdt 命令\"></a>fdt 命令</h2><p>对于u-boot提供了fdt的相关命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdt - flattened device tree utility commands</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:</span><br><span class=\"line\">fdt addr [-c]  &lt;addr&gt; [&lt;length&gt;]   - Set the [control] fdt location to &lt;addr&gt;</span><br><span class=\"line\">fdt apply &lt;addr&gt;                    - Apply overlay to the DT</span><br><span class=\"line\">fdt move   &lt;fdt&gt; &lt;newaddr&gt; &lt;length&gt; - Copy the fdt to &lt;addr&gt; and make it active</span><br><span class=\"line\">fdt resize [&lt;extrasize&gt;]            - Resize fdt to size + padding to 4k addr + some optional &lt;extrasize&gt; if needed</span><br><span class=\"line\">fdt print  &lt;path&gt; [&lt;prop&gt;]          - Recursive print starting at &lt;path&gt;</span><br><span class=\"line\">fdt list   &lt;path&gt; [&lt;prop&gt;]          - Print one level starting at &lt;path&gt;</span><br><span class=\"line\">fdt get value &lt;var&gt; &lt;path&gt; &lt;prop&gt;   - Get &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get name &lt;var&gt; &lt;path&gt; &lt;index&gt;   - Get name of node &lt;index&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get addr &lt;var&gt; &lt;path&gt; &lt;prop&gt;    - Get start address of &lt;property&gt; and store in &lt;var&gt;</span><br><span class=\"line\">fdt get size &lt;var&gt; &lt;path&gt; [&lt;prop&gt;]  - Get size of [&lt;property&gt;] or num nodes and store in &lt;var&gt;</span><br><span class=\"line\">fdt set    &lt;path&gt; &lt;prop&gt; [&lt;val&gt;]    - Set &lt;property&gt; [to &lt;val&gt;]</span><br><span class=\"line\">fdt mknode &lt;path&gt; &lt;node&gt;            - Create a new node after &lt;path&gt;</span><br><span class=\"line\">fdt rm     &lt;path&gt; [&lt;prop&gt;]          - Delete the node or &lt;property&gt;</span><br><span class=\"line\">fdt header                          - Display header info</span><br><span class=\"line\">fdt bootcpu &lt;id&gt;                    - Set boot cpuid</span><br><span class=\"line\">fdt memory &lt;addr&gt; &lt;size&gt;            - Add/Update memory node</span><br><span class=\"line\">fdt rsvmem print                    - Show current mem reserves</span><br><span class=\"line\">fdt rsvmem add &lt;addr&gt; &lt;size&gt;        - Add a mem reserve</span><br><span class=\"line\">fdt rsvmem delete &lt;index&gt;           - Delete a mem reserves</span><br><span class=\"line\">fdt chosen [&lt;start&gt; &lt;end&gt;]          - Add/update the /chosen branch in the tree</span><br><span class=\"line\">                                        &lt;start&gt;/&lt;end&gt; - initrd start/end addr</span><br><span class=\"line\">NOTE: Dereference aliases by omitting the leading &#x27;/&#x27;, e.g. fdt print ethernet0.</span><br></pre></td></tr></table></figure>\n\n<p>fdt print加path参数，则打path内容，如下(其中&#x2F;memory是path)：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">U-Boot&gt; fdt print /memory</span><br><span class=\"line\">memory &#123;</span><br><span class=\"line\">device_type = <span class=\"string\">&quot;memory&quot;</span>;</span><br><span class=\"line\">reg = &lt;<span class=\"number\">0x70000000</span> <span class=\"number\">0x4000000</span>&gt;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">U-Boot&gt; fdt print #不加参数时，打印出整颗树</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"二、u-boot-获取GPT分区表\"><a href=\"#二、u-boot-获取GPT分区表\" class=\"headerlink\" title=\"二、u-boot 获取GPT分区表\"></a>二、u-boot 获取GPT分区表</h1><p>在uboot中通过命令打印分区表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">part list mmc 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3588-android-uboot\"><a href=\"#3588-android-uboot\" class=\"headerlink\" title=\"3588-android-uboot\"></a>3588-android-uboot</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;common.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;command.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;android_image.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;mmc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;memalign.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fdtdec.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PART_MAX_COUNT  128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tLAB_SIZE\t\t512</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tHEADER_OFFSET\tLAB_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tENTRY_OFFSET\t(2 * LAB_SIZE)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL1_OFFSET\t\tsizeof(u64)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span>\tVAL2_OFFSET\t\t(2 * sizeof(u64))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> u64 <span class=\"title function_\">get_gpt_blk_cnt_and_print</span><span class=\"params\">(<span class=\"keyword\">struct</span> blk_desc *dev_desc,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t  gpt_header *gpt_head, gpt_entry **gpt_pte)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> efi_str[PARTNAME_SZ + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tu64 gpt_part_size, gpt_blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tgpt_entry *gpt_e;</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_e = *gpt_pte;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; gpt_head-&gt;num_partition_entries; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\traite_gpt_convert_efi_name_to_char(efi_str, gpt_e[i].partition_name,</span><br><span class=\"line\">\t\t\t\t\t     PARTNAME_SZ + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: part: %2d name - GPT: %16s &quot;</span>,</span><br><span class=\"line\">\t\t      __func__, i, efi_str);</span><br><span class=\"line\">\t\tgpt_part_size = le64_to_cpu(gpt_e[i].ending_lba) -</span><br><span class=\"line\">\t\t\tle64_to_cpu(gpt_e[i].starting_lba) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tgpt_blk_cnt += gpt_part_size;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(gpt_part_size == <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size(LBA) - GPT: %8llu &quot;</span>,</span><br><span class=\"line\">\t\t      (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)gpt_part_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;start LBA - GPT: %8llu \\n&quot;</span>,</span><br><span class=\"line\">\t\t      le64_to_cpu(gpt_e[i].starting_lba));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> gpt_blk_cnt + gpt_e[<span class=\"number\">0</span>].starting_lba - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">get_gpt_meta_data</span><span class=\"params\">(u64 *data_size, <span class=\"type\">void</span> **data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    gpt_header *pgpt_head;</span><br><span class=\"line\">\tgpt_entry *entries;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *meta_data;</span><br><span class=\"line\">\tu64 meta_data_size, gpt_entries_size;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">blk_desc</span> *<span class=\"title\">dev_desc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mmc</span> *<span class=\"title\">mmc</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tu64 blk_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 blk_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 tag = <span class=\"number\">0x55AA</span>;</span><br><span class=\"line\">\t<span class=\"type\">lbaint_t</span> lba;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!data_size || !data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Invalid Argument(s) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mmc = do_returnmmc();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!mmc)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> CMD_RET_FAILURE;</span><br><span class=\"line\">    </span><br><span class=\"line\">    dev_desc = mmc_get_blk_desc(mmc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!dev_desc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: mmc_get_blk_desc err ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgpt_entries_size = <span class=\"keyword\">sizeof</span>(gpt_entry) * PART_MAX_COUNT;</span><br><span class=\"line\">\tmeta_data_size = LAB_SIZE + <span class=\"keyword\">sizeof</span>(gpt_header) + gpt_entries_size;</span><br><span class=\"line\">\tmeta_data = <span class=\"built_in\">malloc</span>(meta_data_size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!meta_data) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: malloc memory (gpt meta data) ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(meta_data, <span class=\"number\">0</span>, meta_data_size);</span><br><span class=\"line\">\tpgpt_head = (gpt_header *)((<span class=\"type\">char</span> *)meta_data + HEADER_OFFSET);</span><br><span class=\"line\">\tentries = (gpt_entry *)((<span class=\"type\">char</span> *)meta_data + ENTRY_OFFSET);</span><br><span class=\"line\">\tALLOC_CACHE_ALIGN_BUFFER(legacy_mbr, mbr, dev_desc-&gt;blksz);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read MBR Header from device */</span></span><br><span class=\"line\">\tlba = <span class=\"number\">0</span>; <span class=\"comment\">/* MBR is always at 0 */</span></span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* MBR (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, (ulong *)mbr) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;*** ERROR: Can&#x27;t read MBR header ***\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Header from device */</span></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\tblk_cnt = <span class=\"number\">1</span>; <span class=\"comment\">/* GPT Header (1 block) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, pgpt_head) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: Can&#x27;t read GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlba = GPT_PRIMARY_PARTITION_TABLE_LBA;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (validate_gpt_header(pgpt_head, lba, dev_desc-&gt;lba)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR: validate_gpt_header GPT header ***\\n&quot;</span>, __func__);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dev_desc-&gt;sig_type == SIG_TYPE_NONE) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">efi_guid_t</span> empty = &#123;&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">memcmp</span>(&amp;pgpt_head-&gt;disk_guid, &amp;empty, <span class=\"keyword\">sizeof</span>(empty))) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_GUID;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(&amp;dev_desc-&gt;guid_sig, &amp;pgpt_head-&gt;disk_guid,</span><br><span class=\"line\">\t\t\t      <span class=\"keyword\">sizeof</span>(empty));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbr-&gt;unique_mbr_signature != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;sig_type = SIG_TYPE_MBR;</span><br><span class=\"line\">\t\t\tdev_desc-&gt;mbr_sig = mbr-&gt;unique_mbr_signature;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* Read GPT Entries from device */</span></span><br><span class=\"line\">\tlba = le64_to_cpu(pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\tblk_cnt = BLOCK_CNT((le32_to_cpu(pgpt_head-&gt;num_partition_entries) *</span><br><span class=\"line\">\t\t\t\t   \tle32_to_cpu(pgpt_head-&gt;sizeof_partition_entry)),</span><br><span class=\"line\">\t\t\t\t  \tdev_desc);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (blk_dread(dev_desc, lba, blk_cnt, entries) != blk_cnt) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s *** ERROR:read entries (lba=%llu) ***\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, pgpt_head-&gt;partition_entry_lba);</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> ERROR_OUT;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_size = dev_desc-&gt;blksz;</span><br><span class=\"line\">\tvalidate_gpt_entries(pgpt_head, entries);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tdebug(<span class=\"string\">&quot;%s read entries lba %llu (blk_cnt %llu blk_size=%llu)\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\t__func__, (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)(ulong)lba, blk_cnt, blk_size);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t * build info, layout of meta_data:</span></span><br><span class=\"line\"><span class=\"comment\">\t * u64 tag | u64 blk_size | u64 blk_cnt | 488 bytes | gpt header | gpt entries</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tblk_cnt = get_gpt_blk_cnt(dev_desc, pgpt_head, &amp;entries);</span><br><span class=\"line\">\t<span class=\"comment\">/*this value makes we known the reserved memory is available*/</span></span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data, (<span class=\"type\">void</span> *)&amp;tag, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL1_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_size, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\">\t<span class=\"built_in\">memcpy</span>(meta_data + VAL2_OFFSET, (<span class=\"type\">void</span> *)&amp;blk_cnt, <span class=\"keyword\">sizeof</span>(u64));</span><br><span class=\"line\"></span><br><span class=\"line\">\t*data_size = meta_data_size;</span><br><span class=\"line\">\t*data = meta_data;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR_OUT:</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(meta_data);</span><br><span class=\"line\">\tmeta_data = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>参考：</p>\n<p><a href=\"http://www.wowotech.net/device_model/dt-code-file-struct-parse.html\">Device Tree（四）：文件结构解析 (wowotech.net)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376295326\">Linux设备树语法分析详解教程(三)u-boot设备树的传递 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/376296222\">Linux设备树语法分析详解教程(四)kernel的解析 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.cnblogs.com/solo666/p/16518154.html\">https://www.cnblogs.com/solo666/p/16518154.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clvjcoaak0000r9w096yq3vus","category_id":"clvjcoaap0002r9w0crcqdq03","_id":"clvjcoaaw000cr9w08o1qg2p3"},{"post_id":"clvjcoaao0001r9w0de539y4w","category_id":"clvjcoaap0002r9w0crcqdq03","_id":"clvjcoaax000gr9w0ehtae99g"},{"post_id":"clvjcoaav000ar9w07gr4ho88","category_id":"clvjcoaap0002r9w0crcqdq03","_id":"clvjcoaax000kr9w0f4ky7c51"},{"post_id":"clvjcoaaw000er9w08cjhb54a","category_id":"clvjcoaap0002r9w0crcqdq03","_id":"clvjcoaay000lr9w0e3ria1o6"},{"post_id":"clvjcoaar0004r9w0en6ne5w9","category_id":"clvjcoaav000br9w04s5fhod2","_id":"clvjcoaay000or9w00pce3443"},{"post_id":"clvjcoaas0005r9w0fujveufw","category_id":"clvjcoaax000ir9w04u7q98wg","_id":"clvjcoaaz000sr9w0djz70avq"},{"post_id":"clvjcoaas0006r9w0ciswdc7c","category_id":"clvjcoaav000br9w04s5fhod2","_id":"clvjcoaaz000vr9w017tt2vjp"},{"post_id":"clvjcoaau0009r9w09xzi7r99","category_id":"clvjcoaav000br9w04s5fhod2","_id":"clvjcoab0000xr9w0426fd2m5"},{"post_id":"clw7gjvto00004zw06cc94zms","category_id":"clw7gjvtt00024zw0fh4pclyx","_id":"clw7gjvtx00084zw03eyl828h"},{"post_id":"clw7gjvtv00044zw001hi1y1n","category_id":"clw7gupas000164w0bopbhhya","_id":"clw7gupat000564w05o3563ug"},{"post_id":"clw7gjvtr00014zw0fnm7f1ci","category_id":"clw7gupat000364w0drn50ao5","_id":"clw7gupau000664w072cd3et3"}],"PostTag":[{"post_id":"clvjcoaak0000r9w096yq3vus","tag_id":"clvjcoaaq0003r9w08ymn3cfp","_id":"clvjcoaax000fr9w02xtp3tin"},{"post_id":"clvjcoaak0000r9w096yq3vus","tag_id":"clvjcoaat0008r9w05igj2bah","_id":"clvjcoaax000hr9w0gehbfdrt"},{"post_id":"clvjcoaao0001r9w0de539y4w","tag_id":"clvjcoaaw000dr9w04q1p9cdh","_id":"clvjcoaay000pr9w04nsc72sp"},{"post_id":"clvjcoaao0001r9w0de539y4w","tag_id":"clvjcoaat0008r9w05igj2bah","_id":"clvjcoaaz000qr9w0bnjl71ed"},{"post_id":"clvjcoaar0004r9w0en6ne5w9","tag_id":"clvjcoaay000nr9w0c45zbyxp","_id":"clvjcoaaz000ur9w01h1d21ws"},{"post_id":"clvjcoaas0005r9w0fujveufw","tag_id":"clvjcoaaz000tr9w0a5za0wkx","_id":"clvjcoab0000zr9w06rk38a4e"},{"post_id":"clvjcoaas0005r9w0fujveufw","tag_id":"clvjcoaaz000wr9w0a7ntbfe6","_id":"clvjcoab00010r9w0ajuncswp"},{"post_id":"clvjcoaas0006r9w0ciswdc7c","tag_id":"clvjcoaay000nr9w0c45zbyxp","_id":"clvjcoab00012r9w0b9ve9luz"},{"post_id":"clvjcoaau0009r9w09xzi7r99","tag_id":"clvjcoaay000nr9w0c45zbyxp","_id":"clvjcoab10014r9w048v69qhr"},{"post_id":"clvjcoaav000ar9w07gr4ho88","tag_id":"clvjcoab00013r9w0c8xwbm67","_id":"clvjcoab10016r9w07u1chj94"},{"post_id":"clvjcoaav000ar9w07gr4ho88","tag_id":"clvjcoaat0008r9w05igj2bah","_id":"clvjcoab10017r9w06r3w5vfb"},{"post_id":"clvjcoaaw000er9w08cjhb54a","tag_id":"clvjcoab10015r9w0gy9m55qe","_id":"clvjcoab10018r9w00o6f31ht"},{"post_id":"clvjcoaaw000er9w08cjhb54a","tag_id":"clvjcoaat0008r9w05igj2bah","_id":"clvjcoab10019r9w0bne6eeju"},{"post_id":"clw7gjvtv00044zw001hi1y1n","tag_id":"clw7gjvtx00094zw03hlaf5nx","_id":"clw7gjvty000e4zw0hb5cb7g4"},{"post_id":"clw7gjvtv00044zw001hi1y1n","tag_id":"clw7gjvtx000b4zw073y0bgcy","_id":"clw7gjvty000f4zw0114f3d1e"},{"post_id":"clw7gjvtv00044zw001hi1y1n","tag_id":"clw7gjvtx000c4zw04prpfaj1","_id":"clw7gjvty000g4zw06kgv5plx"},{"post_id":"clw7gjvtr00014zw0fnm7f1ci","tag_id":"clw7gjvtu00034zw01k8ceqqd","_id":"clw7gupat000264w0a1wu7io7"},{"post_id":"clw7gjvto00004zw06cc94zms","tag_id":"clw7gupao000064w0fvoobl7z","_id":"clw7gupat000464w0gs92a2g2"}],"Tag":[{"name":"学习网站","_id":"clvjcoaaq0003r9w08ymn3cfp"},{"name":"rust","_id":"clvjcoaat0008r9w05igj2bah"},{"name":"rust环境搭建","_id":"clvjcoaaw000dr9w04q1p9cdh"},{"name":"test","_id":"clvjcoaay000nr9w0c45zbyxp"},{"name":"power","_id":"clvjcoaaz000tr9w0a5za0wkx"},{"name":"cpufreq","_id":"clvjcoaaz000wr9w0a7ntbfe6"},{"name":"rust基本类型","_id":"clvjcoab00013r9w0c8xwbm67"},{"name":"rust复合类型","_id":"clvjcoab10015r9w0gy9m55qe"},{"name":"block","_id":"clw7gjvtu00034zw01k8ceqqd"},{"name":"uboot","_id":"clw7gjvtw00064zw07bp6f6uj"},{"name":"fdt","_id":"clw7gjvtx00094zw03hlaf5nx"},{"name":"GPT","_id":"clw7gjvtx000b4zw073y0bgcy"},{"name":"rk3588","_id":"clw7gjvtx000c4zw04prpfaj1"},{"name":"vsfs","_id":"clw7gupao000064w0fvoobl7z"}]}}