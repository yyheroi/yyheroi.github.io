{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"abfe52bd7857c6997069eef12c9cc7bf35918421","modified":1693037991891},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1692962092099},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1692962096082},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1692962095602},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1692962095588},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1692962096128},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1692962096116},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1692962096144},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1692962096170},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1692962096193},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1692962096185},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1692962096156},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1692962096207},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1692962096214},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1692962096230},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1692962096243},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1692962096267},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1692962096256},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1692962096280},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1692962096289},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1692962096305},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1692962096318},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1692962096331},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1692962096338},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1692962096356},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1692962096373},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1692962096389},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1692962096401},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1692962096427},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1692962096449},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1692962096433},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1692962096411},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1692962096459},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1692962096476},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1692962096485},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1692962096468},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1692962093811},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1692962094042},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1692962096498},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1692962094318},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1692962094427},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1692962094461},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1692962094350},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1692962094592},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1692962095243},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1692962093679},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1692962094006},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1692962094494},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1692962094613},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1692962094565},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1692962093353},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1692962093180},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1692962093441},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1692962093858},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1692962094119},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1692962094185},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1692962094249},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1692962094217},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1692962094381},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1692962094287},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1692962092722},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1692962095686},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1692962094519},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1692962095554},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1692962096076},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1692962095702},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1692962093959},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1692962094403},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1692962094153},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1692962094083},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1692962094546},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1692962094644},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1692962095936},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1692962096007},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1692962095809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1692962095779},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1692962095844},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1692962095860},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1692962096019},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1692962095980},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1692962095940},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1692962096031},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1692962096047},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1692962096058},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1692962095506},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1692962095388},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1692962095179},{"_id":"source/_posts/yyheroi-first.md","hash":"57666b9e4f9f1beb289aa9aa3d708345be5c014a","modified":1692973036962},{"_id":"public/2023/08/25/yyheroi-first/index.html","hash":"736a79bef8c28fc4882d6e1998c4f14e9db28952","modified":1692973048993},{"_id":"public/archives/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/1970/01/01/hello-world/index.html","hash":"8f33a79feadac8ce557073fc96937e6d044223f1","modified":1693033183431},{"_id":"public/archives/2023/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/archives/2023/08/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/archives/1970/01/index.html","hash":"e179ac13b4ed7c7f959e272ddd81cfbba7ad74ff","modified":1693033183431},{"_id":"public/archives/1970/index.html","hash":"e179ac13b4ed7c7f959e272ddd81cfbba7ad74ff","modified":1693033183431},{"_id":"public/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/css/style.css","hash":"c7adbb2af0e65ecd85f8c06851f34d377d4b834c","modified":1692968459628},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1692963246472},{"_id":"public/js/script.js","hash":"61e8ba1228d8441144fa7a655aa02ec546bd1f02","modified":1692968459628},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1692963246472},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1692963246472},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1692963246472},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1692968424439},{"_id":"themes/3-hexo/.gitignore","hash":"86a50fa08e69cab561892aa5edef24f9081bbde1","modified":1692968424455},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1692968424470},{"_id":"themes/3-hexo/README.md","hash":"d2c42534ceabcb7cd2e58ed994bf7d6f734d1f3b","modified":1692968424470},{"_id":"themes/3-hexo/_config.yml","hash":"532328750a1a823899adca0448f3b8176460434a","modified":1693037922473},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"d2c6d86fe2ff03e6ee9bbc16dff8efe5b47ac297","modified":1692968424486},{"_id":"themes/3-hexo/languages/en.yml","hash":"53ae29ae1237fc7822df85a6d2f8da6f0078625e","modified":1692968424478},{"_id":"themes/3-hexo/layout/index.ejs","hash":"27ea3dac053d501b79bbef5117b4f3aff063d8cd","modified":1692968424655},{"_id":"themes/3-hexo/layout/indexs.md","hash":"9aba38b192c510e94f34b37347f120475604a088","modified":1692974038049},{"_id":"themes/3-hexo/layout/post.ejs","hash":"4abd16c0f5e3f51103d23b73710d695dc7fdc5d2","modified":1692968424664},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1692968424669},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0e662956cbfcaf6c1666e5c30a1fe03461de685e","modified":1692968424455},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1692968424835},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"59a4abd36cc8ff2107f1fcb3c0fe48d0492c9030","modified":1692968424955},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1692968424978},{"_id":"themes/3-hexo/source/css/style.styl","hash":"7090b81f34e26172670c68da6a366ca186523779","modified":1692968424955},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1692968425003},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1692968424987},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1692968425003},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1692968425003},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1692968425018},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"516844c4a0e13d6773f6029849f51c59613b6f69","modified":1692968424502},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"0ebb17d001cb7bb7606c616c380049a2e7124496","modified":1692968424502},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1692968424517},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"f66939a8c9d5258948b47842b8b4495e6ec45988","modified":1692968424588},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"d11092791e5c140ff81f2aefa0d1b051f403239d","modified":1692968424607},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ed479aa9affee3b02a76da06de45a7c40a97a706","modified":1692968424598},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"bc94eee27701b67d238f328737b578e8270989eb","modified":1692968424594},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"a734c26d86da6697003ed27672c1b9b82b216c82","modified":1692968424613},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1692968424623},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"cbad17074f7a44520b4c7dad5a515d6aaf5e1e14","modified":1692968424635},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8a9e93f9cbe80763264018290da0b14b4bbe8ac5","modified":1692968424629},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1692968424651},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"76768204853a8a5e030a96d605a247f9686cf994","modified":1692968424618},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"3cf8ba0c6112dfa8089603b8df3e31f70a272715","modified":1692968424645},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"e205f9bb61fd4403d24d863693d4a34ea31b8539","modified":1692968424640},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1692968425081},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1692968425097},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1692968425081},{"_id":"themes/3-hexo/source/js/script.js","hash":"61e8ba1228d8441144fa7a655aa02ec546bd1f02","modified":1692968425097},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1692968424696},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1692968425097},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"2a9b5ffb759be85545a89f6d1194579a800f51a5","modified":1692968424687},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1692968424703},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"c68d6942ed62f9cce8a9042f5a59055a0ee5441c","modified":1692968424717},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0143711c1221cb4e70a3db866754d79c8a81d253","modified":1692968424724},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"d35df7f5e68880d1f1ebec541b816f8257fd42cb","modified":1692968424730},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1692968424750},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"36b47f4221e9bccae8e6f1685ea8942e601766d6","modified":1692968424736},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1692968424742},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"0dd8d208081b92e05d6db3361743c520a2816828","modified":1692968424757},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1692968424770},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1692968424778},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1692968424784},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1692968424793},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1692968424816},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1692968424791},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1692968424808},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1692968424829},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1692968424822},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1692968424835},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1692968424863},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1692968424869},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1692968424850},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1692968424884},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1692968424869},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1692968424891},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1692968424897},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1692968424925},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1692968424897},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1692968424897},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1692968424925},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1692968424918},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1692968424925},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1692968424940},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1692968424955},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1692968424940},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1692968424533},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1692968424549},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1692968424563},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1692968424533},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"e820aa16b5ed4e024616b5e2d424925820d43e56","modified":1692968424572},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"c76773b96860940083baf16470b7b80ac098e645","modified":1692968424581},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1692968425018},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1692968425068},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1692968425050},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1692968459628},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1692968459628},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1692968459628},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1692968459628},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1692968459628},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1692968459628},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1692968459628},{"_id":"public/css/fonts/iconfont.svg","hash":"13974fe35fca836e870a960ecb11b7eca2e036f8","modified":1692968459628},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1692968459628},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1692968459628},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1692968459628},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1692968459628},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1692968459628},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1692968459628},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1692968459628},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1692968459628},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1692968459628},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1692968459628},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1692968459628},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1692968459628},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1692968459628},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1692968459628},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1692968459628},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1692968459628},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1692968459628},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1692968459628},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1692968459628},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1692968459628},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1692968459628},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1692968459628},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1692968459628},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1692968459628},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1692968459628},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1692968459628},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1692968459628},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1692968459628},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1692968459628},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1692968459628},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1692968459628},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1692968459628},{"_id":"public/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1692968459628},{"_id":"source/_posts/github+hexo博客搭建.md","hash":"85bd7eb698db516682385515b622694385fc8e14","modified":1693033181115},{"_id":"public/2023/08/25/github+hexo博客搭建/index.html","hash":"b4cac65928bbc410a52b49c277f1a448c08bd470","modified":1693320517838},{"_id":"public/search.xml","hash":"199410c29400937a7397faf378607c9d3b49f51d","modified":1693320517838},{"_id":"public/tags/test/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/categories/test/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"source/_posts/00-rust学习网站.md","hash":"500dbe6703021598b2540409a0ba6214218c6224","modified":1693107657892},{"_id":"public/2023/08/26/00-rust学习网站/index.html","hash":"07daa1d2bfba78c3662550ea6c8fe0bce25acf06","modified":1693320517838},{"_id":"public/2023/08/25/hello-world/index.html","hash":"03ceba08092819144aa1a53fab659f5db402fb25","modified":1693320517838},{"_id":"public/categories/rust/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/tags/学习网站/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"source/_posts/01-rust环境搭建.md","hash":"4c0f2bf37246a6be0f2a1b4c50da3722a42cc2a9","modified":1693107654390},{"_id":"public/2023/08/26/01-rust环境搭建/index.html","hash":"bbd58a935f3c19e7468b281d773d0b8a149df27d","modified":1693320517838},{"_id":"public/tags/rust环境搭建/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"source/_posts/02-rust基本类型.md","hash":"dd43f2a740d88aa19ed009ea66180206718fbe9e","modified":1693129819989},{"_id":"public/tags/rust/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"public/2023/08/26/02-rust基本类型/index.html","hash":"8ab0009ae317e4f5c34826a780b7d3c7eb90d398","modified":1693320517838},{"_id":"public/tags/rust基本类型/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838},{"_id":"source/_posts/03-rust复合类型.md","hash":"68bfb05972e7cc44f869f81597caa40828cc0bb8","modified":1693320487313},{"_id":"public/2023/08/28/03-rust复合类型/index.html","hash":"afa6f550c3110ecde3ec0f57fab8a6af59447c72","modified":1693320517838},{"_id":"public/tags/rust复合类型/index.html","hash":"e6c6f3aa4884ca2e687dad8a8b35585f0c9a4e56","modified":1693320517838}],"Category":[{"name":"test","_id":"cllrnrzue0000fstzfsp6b4y6"},{"name":"rust","_id":"cllrrbfhc0001umtzgaad9jxj"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2023-08-24T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2023-08-25 00:00:00\ncategories:\n- test\ntags:\n- test\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2023-08-26T08:19:51.891Z","_id":"cllqhycpx00005rtz8jsrewvj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"github+hexo 博客搭建","date":"2023-08-25T11:32:35.000Z","_content":"\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","source":"_posts/github+hexo博客搭建.md","raw":"---\ntitle: github+hexo 博客搭建\ndate: 2023-08-25 19:32:35\ncategories:\n- test\ntags:\n- test\n---\n\n\n@[toc]\n环境：win11+wsl\n## 1.安装Node.js、Git和Hexo\n打开终端安装以下软件\n```\nsudo apt update\nsudo apt-get install git\n\nsudo apt install nodejs\nsudo apt install npm        #Node.js 的包管理器\nsudo npm install -g hexo-cli        #安装hexo\n```\n## 2.创建 GitHub 仓库并配置ssh\n登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 `<username>.github.io`，其中 `<username>` 是你的 GitHub 用户名。将该仓库设置为公开仓库。\n设置ssh\n```\nssh-keygen -t rsa -C 'xxx@xxx.com'  #自己的邮箱\ncat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github ->settings ->SSH and GPC keys ->SSH keys ->New SSH key中\nssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）\n#接着在本地绑定与Github的用户名和邮箱（git）\ngit config --global user.name \"<username>\"    #自己的用户名\ngit config --global user.email 'xxx@xxx.com'  #自己的邮箱\n```\n## 3.初始化Hexo\n创建一个新的文件夹，用于存储你的博客项目。\n在终端中，进入该文件夹，并运行以下命令来初始化 Hexo\n```\nmkdir myblog\nhexo init    \n#或者直接一步到位 \nhexo init myblog\n```\n## 4.配置Hexo\n- 进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。\n- 在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。\n- 根据需要，你还可以配置主题、插件和其他 Hexo 选项。\n编辑_config.yml文件，添加如下内容 \n```\ndeploy:\n        type: git\n        repo: git@github.com: <username>/ <username>.github.io.git  #<username>为自己的用户名\n        branch: main\n```\n```\nnpm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化\n```\n## 5.创建博客内容\n在终端中，运行以下命令来创建新的博客文章：\n```\nhexo new \"My First Post\"\n```\n这将在 Hexo 项目的 source/_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。\n## 6.部署\n```\nhexo s    # 预览\n#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n#用浏览器打开 http://localhost:4000/\nhexo g #生成静态网站文件\nhexo d #将生成的静态网站文件部署到github\n```\n## 7.查看\n浏览器打开`<username>.github.io`即可查看\n\n\n## 8.参考：\nhttps://blog.csdn.net/qq_62928039/article/details/130248518\n\n## 9.选择主题：\nhttps://hexo.io/themes/\nhttps://github.com/yelog/hexo-theme-3-hexo\n```\n#在hexo根目录下\ngit clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo\n#修改hexo根目录的_config.yml，如下\ntheme: 3-hexo\n#博客配置\nhttp://yelog.org/2017/03/23/3-hexo-instruction/\n```\n最终效果：\nhttps://yyheroi.github.io\n","slug":"github+hexo博客搭建","published":1,"updated":"2023-08-26T06:59:41.115Z","_id":"cllqp267u0000intz0as00ps4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>@[toc]<br>环境：win11+wsl</p>\n<h2 id=\"1-安装Node-js、Git和Hexo\"><a href=\"#1-安装Node-js、Git和Hexo\" class=\"headerlink\" title=\"1.安装Node.js、Git和Hexo\"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt-get install git</span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt install nodejs</span><br><span class=\"line\">sudo apt install npm        #Node.js 的包管理器</span><br><span class=\"line\">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建-GitHub-仓库并配置ssh\"><a href=\"#2-创建-GitHub-仓库并配置ssh\" class=\"headerlink\" title=\"2.创建 GitHub 仓库并配置ssh\"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class=\"line\">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class=\"line\">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class=\"line\">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class=\"line\">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-初始化Hexo\"><a href=\"#3-初始化Hexo\" class=\"headerlink\" title=\"3.初始化Hexo\"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir myblog</span><br><span class=\"line\">hexo init    </span><br><span class=\"line\">#或者直接一步到位 </span><br><span class=\"line\">hexo init myblog</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h2><ul>\n<li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li>\n<li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li>\n<li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">        type: git</span><br><span class=\"line\">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class=\"line\">        branch: main</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"5-创建博客内容\"><a href=\"#5-创建博客内容\" class=\"headerlink\" title=\"5.创建博客内容\"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure>\n<p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p>\n<h2 id=\"6-部署\"><a href=\"#6-部署\" class=\"headerlink\" title=\"6.部署\"></a>6.部署</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s    # 预览</span><br><span class=\"line\">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class=\"line\">#用浏览器打开 http://localhost:4000/</span><br><span class=\"line\">hexo g #生成静态网站文件</span><br><span class=\"line\">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure>\n<h2 id=\"7-查看\"><a href=\"#7-查看\" class=\"headerlink\" title=\"7.查看\"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p>\n<h2 id=\"8-参考：\"><a href=\"#8-参考：\" class=\"headerlink\" title=\"8.参考：\"></a>8.参考：</h2><p><a href=\"https://blog.csdn.net/qq_62928039/article/details/130248518\">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p>\n<h2 id=\"9-选择主题：\"><a href=\"#9-选择主题：\" class=\"headerlink\" title=\"9.选择主题：\"></a>9.选择主题：</h2><p><a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a><br><a href=\"https://github.com/yelog/hexo-theme-3-hexo\">https://github.com/yelog/hexo-theme-3-hexo</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在hexo根目录下</span><br><span class=\"line\">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class=\"line\">#修改hexo根目录的_config.yml，如下</span><br><span class=\"line\">theme: 3-hexo</span><br><span class=\"line\">#博客配置</span><br><span class=\"line\">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure>\n<p>最终效果：<br><a href=\"https://yyheroi.github.io/\">https://yyheroi.github.io</a></p>\n"},{"title":"00-rust学习网站","date":"2023-08-26T08:08:57.000Z","_content":"\n\n\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","source":"_posts/00-rust学习网站.md","raw":"---\ntitle: 00-rust学习网站\ndate: 2023-08-26 16:08:57\ncategories:\n- rust\ntags:\n- 学习网站\n- rust\n---\n\n\n\n\n\n# 相关网站\n\n[GitHub-rust](https://github.com/sunface/rust-course)\n\n[关于本书 - Rust语言圣经(Rust Course)](https://course.rs/about-book.html)\n","slug":"00-rust学习网站","published":1,"updated":"2023-08-27T03:40:57.892Z","_id":"cllrrbfh20000umtzcem707v6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"相关网站\"><a href=\"#相关网站\" class=\"headerlink\" title=\"相关网站\"></a>相关网站</h1><p><a href=\"https://github.com/sunface/rust-course\">GitHub-rust</a></p>\n<p><a href=\"https://course.rs/about-book.html\">关于本书 - Rust语言圣经(Rust Course)</a></p>\n"},{"title":"01-rust环境搭建","date":"2023-08-26T09:03:59.000Z","_content":"\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","source":"_posts/01-rust环境搭建.md","raw":"---\ntitle: 01-rust环境搭建\ndate: 2023-08-26 17:03:59\ncategories:\n- rust\ntags:\n- rust环境搭建\n- rust\n---\n\n\n\n\n\n\n\n\n\n\n\n当前环境：win11+wsl+vscode\n\n## 1.安装rustup\n\n```\ncurl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\nsudo apt install build-essential\nrustc -V \ncargo -V\n```\n\n## 2.安装vsocode插件\n\n```\nrust-analyzer ，Rust 语言插件\nEven Better TOML，支持 .toml 文件完整特性\nError Lens, 更好的获得错误展示\nOne Dark Pro, 非常好看的 VSCode 主题\nCodeLLDB, Debugger 程序\n```\n\n## 3.运行hello world!\n\n```\ncargo new world_hello\ncd world_hello\ncargo run\n#编译\ncargo build\n#运行\n./target/debug/world_hello\nHello, world!\n#快速的检查一下代码能否编译通过\ncargo check\n```\n\n## 4.修改 Rust 的下载镜像为国内的镜像地址\n\n```\n#在 $HOME/.cargo/config.toml 添加以下内容：\n\n[source.crates-io]\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n","slug":"01-rust环境搭建","published":1,"updated":"2023-08-27T03:40:54.390Z","_id":"cllrw3kow0000fetz8xcfgdvu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>当前环境：win11+wsl+vscode</p>\n<h2 id=\"1-安装rustup\"><a href=\"#1-安装rustup\" class=\"headerlink\" title=\"1.安装rustup\"></a>1.安装rustup</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class=\"line\">sudo apt install build-essential</span><br><span class=\"line\">rustc -V </span><br><span class=\"line\">cargo -V</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-安装vsocode插件\"><a href=\"#2-安装vsocode插件\" class=\"headerlink\" title=\"2.安装vsocode插件\"></a>2.安装vsocode插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rust-analyzer ，Rust 语言插件</span><br><span class=\"line\">Even Better TOML，支持 .toml 文件完整特性</span><br><span class=\"line\">Error Lens, 更好的获得错误展示</span><br><span class=\"line\">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class=\"line\">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-运行hello-world\"><a href=\"#3-运行hello-world\" class=\"headerlink\" title=\"3.运行hello world!\"></a>3.运行hello world!</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cargo new world_hello</span><br><span class=\"line\">cd world_hello</span><br><span class=\"line\">cargo run</span><br><span class=\"line\">#编译</span><br><span class=\"line\">cargo build</span><br><span class=\"line\">#运行</span><br><span class=\"line\">./target/debug/world_hello</span><br><span class=\"line\">Hello, world!</span><br><span class=\"line\">#快速的检查一下代码能否编译通过</span><br><span class=\"line\">cargo check</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-修改-Rust-的下载镜像为国内的镜像地址\"><a href=\"#4-修改-Rust-的下载镜像为国内的镜像地址\" class=\"headerlink\" title=\"4.修改 Rust 的下载镜像为国内的镜像地址\"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class=\"line\"></span><br><span class=\"line\">[source.crates-io]</span><br><span class=\"line\">replace-with = &#x27;ustc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[source.ustc]</span><br><span class=\"line\">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"02-rust基本类型","date":"2023-08-26T13:17:00.000Z","_content":"\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","source":"_posts/02-rust基本类型.md","raw":"---\ntitle: 02-rust基本类型\ndate: 2023-08-26 21:17:00\ncategories:\n- rust\ntags:\n- rust基本类型\n- rust\n\n---\n\n\n\n\n\n\n\n\n\n[toc]\n\n# Rust基本数据类型\n\nRust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：\n\n- 数值类型: 有符号整数 (`i8`, `i16`, `i32`, `i64`, `isize`)、 无符号整数 (`u8`, `u16`, `u32`, `u64`, `usize`) 、浮点数 (`f32`, `f64`)、以及有理数、复数\n- 字符串：字符串字面量和字符串切片 `&str`\n- 布尔类型： `true`和`false`\n- 字符类型: 表示单个 Unicode 字符，存储为 4 个字节\n- 单元类型: 即 `()` ，其唯一的值也是 `()`\n\n## 1.数值类型\n\n| 长度       | 有符号类型 | 无符号类型 |\n| ---------- | ---------- | ---------- |\n| 8 位       | `i8`       | `u8`       |\n| 16 位      | `i16`      | `u16`      |\n| 32 位      | `i32`      | `u32`      |\n| 64 位      | `i64`      | `u64`      |\n| 128 位     | `i128`     | `u128`     |\n| 视架构而定 | `isize`    | `usize`    |\n\n整形字面量可以用下表的形式书写：\n\n| 数字字面量         | 示例          |\n| ------------------ | ------------- |\n| 十进制             | `98_222`      |\n| 十六进制           | `0xff`        |\n| 八进制             | `0o77`        |\n| 二进制             | `0b1111_0000` |\n| 字节 (仅限于 `u8`) | `b'A'`        |\n\n## 2.[浮点类型](https://course.rs/basic/base-type/numbers.html#浮点类型)\n\n**浮点类型数字** 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： `f32` 和 `f64`，分别为 32 位和 64 位大小。默认浮点类型是 `f64`，在现代的 CPU 中它的速度与 `f32` 几乎相同，但精度更高。\n\n下面是一个演示浮点数的示例：\n\n```rust\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n```\n\n## 3.[序列(Range)](https://course.rs/basic/base-type/numbers.html#序列range)\n\nRust 提供了一个非常简洁的方式，用来生成连续的数值，例如 **`1..5`，生成从 1 到 4 的连续数字，不包含 5** ；`1..=5`，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：\n\n```rust\nfor i in 1..=5 {\n    println!(\"{}\",i);\n}\n```\n\n最终程序输出:\n\n```console\n1\n2\n3\n4\n5\n```\n\n**序列只允许用于数字或字符类型**，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：\n\n```rust\nfor i in 'a'..='z' {\n    println!(\"{}\",i);\n}\n```\n\n## 4.[有理数和复数](https://course.rs/basic/base-type/numbers.html#有理数和复数)\n\nRust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：\n\n- 有理数和复数\n- 任意大小的整数和任意精度的浮点数\n- 固定精度的十进制小数，常用于货币相关的场景\n\n好在社区已经开发出高质量的 Rust 数值库：[num](https://crates.io/crates/num)。\n\n按照以下步骤来引入 `num` 库：\n\n1. 创建新工程 `cargo new complex-num && cd complex-num`\n2. 在 `Cargo.toml` 中的 `[dependencies]` 下添加一行 `num = \"0.4.0\"`\n3. 将 `src/main.rs` 文件中的 `main` 函数替换为下面的代码\n4. 运行 `cargo run`\n\n```rust\nuse num::complex::Complex;\n\n fn main() {\n   let a = Complex { re: 2.1, im: -1.2 };\n   let b = Complex::new(11.1, 22.2);\n   let result = a + b;\n\n   println!(\"{} + {}i\", result.re, result.im)\n }\n```\n\n#### [总结](https://course.rs/basic/base-type/numbers.html#总结)\n\n之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：\n\n- **Rust 拥有相当多的数值类型**. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数\n- **类型转换必须是显式的**. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数\n- **Rust 的数值上可以使用方法**. 例如你可以用以下方法来将 `13.14` 取整：`13.14_f32.round()`，在这里我们使用了类型后缀，因为编译器需要知道 `13.14` 的具体类型\n\n## 5.[函数要点](https://course.rs/basic/base-type/function.html#函数要点)\n\n- 函数名和变量名使用[蛇形命名法(snake case)](https://course.rs/practice/naming.html)，例如 `fn add_two() -> {}`\n- 函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可\n- 每个函数参数都需要标注类型\n\n```\nfn add(i: i32, j: i32) -> i32 {\n   i + j\n }\n\n```\n\n![img](https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png)\n\n### 返回值：\n\n​\t[无返回值`()`](https://course.rs/basic/base-type/function.html#无返回值)\n\n- 函数没有返回值，那么返回一个 `()`\n- 通过 `;` 结尾的表达式返回一个 `()`\n\n​    [永不返回的发散函数 `!`](https://course.rs/basic/base-type/function.html#永不返回的发散函数-)\n\n​\t\t当用 `!` 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：\n\n## 6.练习\n\n[数值类型 - Rust By Practice( Rust 练习实践 )](https://zh.practice.rs/basic-types/numbers.html)\n\n```// 填空\nfn main() {\n    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换\n}\n```\n\n```\n\n// 修改 `assert_eq!` 让代码工作\nfn main() {\n    let x = 5;\t\t//i32\n    assert_eq!(\"i32\".to_string(), type_of(&x)); //\n}\n\n// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  \"i8\", \"u8\", \"i32\", \"u32\"\nfn type_of<T>(_: &T) -> String {\n    format!(\"{}\", std::any::type_name::<T>())\n}\n\n```\n\n```\nfn main() {\n    assert_eq!(i8::MAX, 127); \n    assert_eq!(u8::MAX, 255); \n}\n\n```\n\n```\n\n// 解决代码中的错误和 `panic`\nfn main() {\n   let v1 = 251_u8.wrapping_add(8);\n   let v2 = match u8::checked_add(251, 8) {\n        Some(value) => value,\n        None => {\n            println!(\"Overflow occurred.\");\n            0\n        }\n    };\n   println!(\"{},{}\",v1,v2);\n}\n\n```\n\n```\nfn main() {\n    let x = 1_000.000_1; // f64\n    let y: f32 = 0.12; // f32\n    let z = 0.01_f64; // f64\n}\n```\n\n```c\n#使用两种方法来让下面代码工作\nfn main() {\n    assert!(0.1+0.2==0.3);\n}\n fn main() {\n     assert!(0.1_f32+0.2_f32==0.3_f32);\n }\n//降低精度\nfn main() {\n    let eps=0.001;\n    assert!((0.1_f64+ 0.2 - 0.3).abs() < eps);\n}\n//设置允许误差\n```\n\n### [序列Range](https://zh.practice.rs/basic-types/numbers.html#序列range)\n\n1. 🌟🌟 两个目标: 1. 修改 `assert!` 让它工作 2. 让 `println!` 输出: 97 - 122\n\n```\nfn main() {\n    let mut sum = 0;\n    for i in -3..2 {\n        sum += i\n    }\n\n    assert!(sum == -5);\n\n    for c in 'a'..='z' {\n        println!(\"{}\",c as u8);\n    }\n}\n\n```\n\n```\\// 填空\nuse std::ops::{Range, RangeInclusive};\nfn main() {\n    assert_eq!((1..5), Range{ start: 1, end: 5 });\n    assert_eq!((1..=5), RangeInclusive::new(1, 5));\n}\n///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。\n```\n\n```\nuse std::mem::size_of_val;\nfn main() {\n    let unit: () = ();\n    assert!(size_of_val(&unit) == 0);\t\t//单元类型占用的内存大小 0\n\n    println!(\"Success!\")\n}\n```\n\n### [语句与表达式](https://zh.practice.rs/basic-types/statements-expressions.html#语句与表达式)\n\n```\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2\t\t// 没有返回值  \n   };\n\n   assert_eq!(v, 3);\n}\n正确的做法\nfn main() {\n   let v = {\n       let mut x = 1;\n       x += 2;\n       x\n   };\n\n   assert_eq!(v, 3);\n}\n\nlet z = {\n\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`\n\t2 * x;\n};\nfn main() {\n   let v = { let x = 3; x};\n\n   assert!(v == 3);\n}\n```\n\n### [函数](https://zh.practice.rs/basic-types/functions.html#函数)\n\n\n\n## 7.总结：\n\n1.`let x = 2.0; // f64`\n\n2.比较浮点数`(0.1_f64 + 0.2 - 0.3).abs() < 0.00001`\n\n3.`编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;`\n\n4.按照补码循环溢出规则处理`et b = 255_u8.wrapping_add(20);  // 19`  `在 u8 的情况下，256 变成 0，257 变成 1，`\n\n5.`(1..5)  表示从 1 到 5（不包括 5）半开区间的范围`\n\n6.`(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围`\n\n6.**表达式不能包含分号**。`表达式总要返回值`\n\n7.返回值为！的表达式\n\n```\nloop {}  \npanic!(\"Never return\");  \ntodo!();  \nunimplemented!();  //未实现的占位符函数\n \n```\n","slug":"02-rust基本类型","published":1,"updated":"2023-08-27T09:50:19.989Z","_id":"cllt9kx0t0000b4tz6fyxduiz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Rust基本数据类型\"><a href=\"#Rust基本数据类型\" class=\"headerlink\" title=\"Rust基本数据类型\"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p>\n<ul>\n<li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li>\n<li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li>\n<li>布尔类型： <code>true</code>和<code>false</code></li>\n<li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li>\n<li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li>\n</ul>\n<h2 id=\"1-数值类型\"><a href=\"#1-数值类型\" class=\"headerlink\" title=\"1.数值类型\"></a>1.数值类型</h2><table>\n<thead>\n<tr>\n<th>长度</th>\n<th>有符号类型</th>\n<th>无符号类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>8 位</td>\n<td><code>i8</code></td>\n<td><code>u8</code></td>\n</tr>\n<tr>\n<td>16 位</td>\n<td><code>i16</code></td>\n<td><code>u16</code></td>\n</tr>\n<tr>\n<td>32 位</td>\n<td><code>i32</code></td>\n<td><code>u32</code></td>\n</tr>\n<tr>\n<td>64 位</td>\n<td><code>i64</code></td>\n<td><code>u64</code></td>\n</tr>\n<tr>\n<td>128 位</td>\n<td><code>i128</code></td>\n<td><code>u128</code></td>\n</tr>\n<tr>\n<td>视架构而定</td>\n<td><code>isize</code></td>\n<td><code>usize</code></td>\n</tr>\n</tbody></table>\n<p>整形字面量可以用下表的形式书写：</p>\n<table>\n<thead>\n<tr>\n<th>数字字面量</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>十进制</td>\n<td><code>98_222</code></td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td><code>0xff</code></td>\n</tr>\n<tr>\n<td>八进制</td>\n<td><code>0o77</code></td>\n</tr>\n<tr>\n<td>二进制</td>\n<td><code>0b1111_0000</code></td>\n</tr>\n<tr>\n<td>字节 (仅限于 <code>u8</code>)</td>\n<td><code>b&#39;A&#39;</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-浮点类型\"><a href=\"#2-浮点类型\" class=\"headerlink\" title=\"2.浮点类型\"></a>2.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B\">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p>\n<p>下面是一个演示浮点数的示例：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">x</span> = <span class=\"number\">2.0</span>; <span class=\"comment\">// f64</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">y</span>: <span class=\"type\">f32</span> = <span class=\"number\">3.0</span>; <span class=\"comment\">// f32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-序列-Range\"><a href=\"#3-序列-Range\" class=\"headerlink\" title=\"3.序列(Range)\"></a>3.<a href=\"https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range\">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>..=<span class=\"number\">5</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终程序输出:</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n\n<p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">i</span> <span class=\"keyword\">in</span> <span class=\"string\">&#x27;a&#x27;</span>..=<span class=\"string\">&#x27;z&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-有理数和复数\"><a href=\"#4-有理数和复数\" class=\"headerlink\" title=\"4.有理数和复数\"></a>4.<a href=\"https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0\">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p>\n<ul>\n<li>有理数和复数</li>\n<li>任意大小的整数和任意精度的浮点数</li>\n<li>固定精度的十进制小数，常用于货币相关的场景</li>\n</ul>\n<p>好在社区已经开发出高质量的 Rust 数值库：<a href=\"https://crates.io/crates/num\">num</a>。</p>\n<p>按照以下步骤来引入 <code>num</code> 库：</p>\n<ol>\n<li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li>\n<li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li>\n<li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li>\n<li>运行 <code>cargo run</code></li>\n</ol>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> num::complex::Complex;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">fn</span> <span class=\"title function_\">main</span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">a</span> = Complex &#123; re: <span class=\"number\">2.1</span>, im: -<span class=\"number\">1.2</span> &#125;;</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">b</span> = Complex::<span class=\"title function_ invoke__\">new</span>(<span class=\"number\">11.1</span>, <span class=\"number\">22.2</span>);</span><br><span class=\"line\">   <span class=\"keyword\">let</span> <span class=\"variable\">result</span> = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">println!</span>(<span class=\"string\">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><a href=\"https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93\">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p>\n<ul>\n<li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li>\n<li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li>\n<li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li>\n</ul>\n<h2 id=\"5-函数要点\"><a href=\"#5-函数要点\" class=\"headerlink\" title=\"5.函数要点\"></a>5.<a href=\"https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9\">函数要点</a></h2><ul>\n<li>函数名和变量名使用<a href=\"https://course.rs/practice/naming.html\">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li>\n<li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li>\n<li>每个函数参数都需要标注类型</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class=\"line\">   i + j</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png\" alt=\"img\"></p>\n<h3 id=\"返回值：\"><a href=\"#返回值：\" class=\"headerlink\" title=\"返回值：\"></a>返回值：</h3><p>​\t<a href=\"https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC\">无返回值<code>()</code></a></p>\n<ul>\n<li>函数没有返回值，那么返回一个 <code>()</code></li>\n<li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li>\n</ul>\n<p>​    <a href=\"https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-\">永不返回的发散函数 <code>!</code></a></p>\n<p>​\t\t当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p>\n<h2 id=\"6-练习\"><a href=\"#6-练习\" class=\"headerlink\" title=\"6.练习\"></a>6.练习</h2><p><a href=\"https://zh.practice.rs/basic-types/numbers.html\">数值类型 - Rust By Practice( Rust 练习实践 )</a></p>\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 修改 `assert_eq!` 让代码工作</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 5;\t\t//i32</span><br><span class=\"line\">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class=\"line\">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class=\"line\">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!(i8::MAX, 127); </span><br><span class=\"line\">    assert_eq!(u8::MAX, 255); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 解决代码中的错误和 `panic`</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v1 = 251_u8.wrapping_add(8);</span><br><span class=\"line\">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class=\"line\">        Some(value) =&gt; value,</span><br><span class=\"line\">        None =&gt; &#123;</span><br><span class=\"line\">            println!(&quot;Overflow occurred.&quot;);</span><br><span class=\"line\">            0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let x = 1_000.000_1; // f64</span><br><span class=\"line\">    let y: f32 = 0.12; // f32</span><br><span class=\"line\">    let z = 0.01_f64; // f64</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用两种方法来让下面代码工作</span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    assert!(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>==<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     assert!(<span class=\"number\">0.1</span>_f32+<span class=\"number\">0.2</span>_f32==<span class=\"number\">0.3</span>_f32);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"><span class=\"comment\">//降低精度</span></span><br><span class=\"line\">fn <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    let eps=<span class=\"number\">0.001</span>;</span><br><span class=\"line\">    assert!((<span class=\"number\">0.1</span>_f64+ <span class=\"number\">0.2</span> - <span class=\"number\">0.3</span>).<span class=\"built_in\">abs</span>() &lt; eps);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//设置允许误差</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"序列Range\"><a href=\"#序列Range\" class=\"headerlink\" title=\"序列Range\"></a><a href=\"https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range\">序列Range</a></h3><ol>\n<li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut sum = 0;</span><br><span class=\"line\">    for i in -3..2 &#123;</span><br><span class=\"line\">        sum += i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert!(sum == -5);</span><br><span class=\"line\"></span><br><span class=\"line\">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class=\"line\">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>填空</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class=\"line\">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use std::mem::size_of_val;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let unit: () = ();</span><br><span class=\"line\">    assert!(size_of_val(&amp;unit) == 0);\t\t//单元类型占用的内存大小 0</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"语句与表达式\"><a href=\"#语句与表达式\" class=\"headerlink\" title=\"语句与表达式\"></a><a href=\"https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\">语句与表达式</a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2\t\t// 没有返回值  </span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">正确的做法</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123;</span><br><span class=\"line\">       let mut x = 1;</span><br><span class=\"line\">       x += 2;</span><br><span class=\"line\">       x</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert_eq!(v, 3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let z = &#123;</span><br><span class=\"line\">\t// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class=\"line\">\t2 * x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">   let v = &#123; let x = 3; x&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">   assert!(v == 3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a><a href=\"https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0\">函数</a></h3><h2 id=\"7-总结：\"><a href=\"#7-总结：\" class=\"headerlink\" title=\"7.总结：\"></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p>\n<p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p>\n<p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p>\n<p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p>\n<p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p>\n<p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p>\n<p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p>\n<p>7.返回值为！的表达式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loop &#123;&#125;  </span><br><span class=\"line\">panic!(&quot;Never return&quot;);  </span><br><span class=\"line\">todo!();  </span><br><span class=\"line\">unimplemented!();  //未实现的占位符函数</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n"},{"title":"03-rust复合类型","date":"2023-08-28T13:58:27.000Z","_content":"\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n\n\n待续。。。\n","source":"_posts/03-rust复合类型.md","raw":"---\ntitle: 03-rust复合类型\ndate: 2023-08-28 21:58:27\ncategories:\n- rust\ntags:\n- rust复合类型\n- rust\n---\n\n\n\n\n\n# 1.字符串和切片\n\n## [什么是字符串?](https://course.rs/basic/compound-type/string-slice.html#什么是字符串)\n\n**Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)**\n\n`str` 类型是硬编码进可执行文件，也无法被修改，但是 `String` 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，**当 Rust 用户提到字符串时，往往指的就是 `String` 类型和 `&str` 字符串切片类型，这两个类型都是 UTF-8 编码**。\n\n```\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &a[1..3];\n\nassert_eq!(slice, &[2, 3]);\n\n```\n\n\n\n## [String 与 &str 的转换](https://course.rs/basic/compound-type/string-slice.html#string-与-str-的转换)\n\n```\nfn main() {\n    let s = String::from(\"hello,world!\");\n    say_hello(&s);\n    say_hello(&s[..]);\n    say_hello(s.as_str());\n}\n\nfn say_hello(s: &str) {\n    println!(\"{}\",s);\n}\n```\n\n## [字符串索引](https://course.rs/basic/compound-type/string-slice.html#字符串索引)\n\n## [字符串切片](https://course.rs/basic/compound-type/string-slice.html#字符串切片)\n\n通过索引区间来访问字符串时，**需要格外的小心**，一不注意，就会导致你程序的崩溃！\n\n## [操作字符串](https://course.rs/basic/compound-type/string-slice.html#操作字符串)\n\n#### [追加 (Push)](https://course.rs/basic/compound-type/string-slice.html#追加-push)\n\n\n\n#### [插入 (Insert)](https://course.rs/basic/compound-type/string-slice.html#插入-insert)\n\n#### [替换 (Replace)](https://course.rs/basic/compound-type/string-slice.html#替换-replace)\n\n#### [删除 (Delete)](https://course.rs/basic/compound-type/string-slice.html#删除-delete)\n\n#### [连接 (Concatenate)](https://course.rs/basic/compound-type/string-slice.html#连接-concatenate)\n\n## [字符串转义](https://course.rs/basic/compound-type/string-slice.html#字符串转义)\n\n```\nfn main() {\n    println!(\"{}\", \"hello \\\\x52\\\\x75\\\\x73\\\\x74\");\n    let raw_str = r\"Escapes don't work here: \\x3F \\u{211D}\";\n    println!(\"{}\", raw_str);\n\n    // 如果字符串包含双引号，可以在开头和结尾加 #\n    let quotes = r#\"And then I said: \"There is no escape!\"\"#;\n    println!(\"{}\", quotes);\n\n    // 如果还是有歧义，可以继续增加，没有限制\n    let longer_delimiter = r###\"A string with \"# in it. And even \"##!\"###;\n    println!(\"{}\", longer_delimiter);\n}\n```\n\n## [操作 UTF-8 字符串](https://course.rs/basic/compound-type/string-slice.html#操作-utf-8-字符串)\n\n[字符串与切片 - Rust语言圣经(Rust Course)](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n```\nfor c in \"中国人\".chars() {\n    println!(\"{}\", c);\n}\n```\n\n## [课后练习](https://course.rs/basic/compound-type/string-slice.html#课后练习)\n\n> Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。\n>\n> - [字符串](https://zh.practice.rs/compound-types/string.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md)\n> - [切片](https://zh.practice.rs/compound-types/slice.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md)\n> - [String](https://zh.practice.rs/collections/String.html)\n>   - [习题解答](https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md)\n\n```\n\n// 填空并修复错误\nfn main() {\n    let s = String::from(\"hello, 世界\");\n    let slice1 = &s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节\n    assert_eq!(slice1, \"h\");\n\n    let slice2 = &s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节\n    assert_eq!(slice2, \"世\");\n    \n    // 迭代 s 中的所有字符\n    for (i, c) in s.chars().enumerate() {\n        if i == 7 {\n            assert_eq!(c, '世')\n        }\n    }\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nfn main() {\n    let mut s = String::new();\n     s.push_str(\"hello\");\n\n    let v = vec![104, 101, 108, 108, 111];\n\n    // 将字节数组转换成 String\n    let s1 = String::from_utf8(v).unwrap();\n    \n    \n    assert_eq!(s, s1);\n\n    println!(\"Success!\")\n}\n\n\n\n// 填空\nuse std::mem;\n\nfn main() {\n    let story = String::from(\"Rust By Practice\");\n\n    // 阻止 String 的数据被自动 drop\n    let mut story = mem::ManuallyDrop::new(story);\n\n    let ptr = story.as_mut_ptr();\n    let len = story.len();\n    let capacity = story.capacity();\n\n    assert_eq!(16, len);\n\n    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. \n    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的\n    let s = unsafe { String::from_raw_parts(ptr, len, capacity) };\n\n    assert_eq!(*story, s);\n\n    println!(\"Success!\")\n}\n\n```\n\n\n\n# 2.[元组](https://course.rs/basic/compound-type/tuple.html#元组)\n\n\n\n待续。。。\n","slug":"03-rust复合类型","published":1,"updated":"2023-08-29T14:48:07.313Z","_id":"clluzf6bf00009ptzhnyb8zn6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><p>待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-字符串和切片\"><a href=\"#1-字符串和切片\" class=\"headerlink\" title=\"1.字符串和切片\"></a>1.字符串和切片</h1><h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串?\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2\">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p>\n<p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1, 2, 3, 4, 5];</span><br><span class=\"line\"></span><br><span class=\"line\">let slice = &amp;a[1..3];</span><br><span class=\"line\"></span><br><span class=\"line\">assert_eq!(slice, &amp;[2, 3]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"String-与-str-的转换\"><a href=\"#String-与-str-的转换\" class=\"headerlink\" title=\"String 与 &amp;str 的转换\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2\">String 与 &amp;str 的转换</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class=\"line\">    say_hello(&amp;s);</span><br><span class=\"line\">    say_hello(&amp;s[..]);</span><br><span class=\"line\">    say_hello(s.as_str());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn say_hello(s: &amp;str) &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串索引\"><a href=\"#字符串索引\" class=\"headerlink\" title=\"字符串索引\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95\">字符串索引</a></h2><h2 id=\"字符串切片\"><a href=\"#字符串切片\" class=\"headerlink\" title=\"字符串切片\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87\">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p>\n<h2 id=\"操作字符串\"><a href=\"#操作字符串\" class=\"headerlink\" title=\"操作字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作字符串</a></h2><h4 id=\"追加-Push\"><a href=\"#追加-Push\" class=\"headerlink\" title=\"追加 (Push)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push\">追加 (Push)</a></h4><h4 id=\"插入-Insert\"><a href=\"#插入-Insert\" class=\"headerlink\" title=\"插入 (Insert)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert\">插入 (Insert)</a></h4><h4 id=\"替换-Replace\"><a href=\"#替换-Replace\" class=\"headerlink\" title=\"替换 (Replace)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace\">替换 (Replace)</a></h4><h4 id=\"删除-Delete\"><a href=\"#删除-Delete\" class=\"headerlink\" title=\"删除 (Delete)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete\">删除 (Delete)</a></h4><h4 id=\"连接-Concatenate\"><a href=\"#连接-Concatenate\" class=\"headerlink\" title=\"连接 (Concatenate)\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate\">连接 (Concatenate)</a></h4><h2 id=\"字符串转义\"><a href=\"#字符串转义\" class=\"headerlink\" title=\"字符串转义\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89\">字符串转义</a></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\\\x52\\\\x75\\\\x73\\\\x74&quot;);</span><br><span class=\"line\">    let raw_str = r&quot;Escapes don&#x27;t work here: \\x3F \\u&#123;211D&#125;&quot;;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class=\"line\">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class=\"line\">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作-UTF-8-字符串\"><a href=\"#操作-UTF-8-字符串\" class=\"headerlink\" title=\"操作 UTF-8 字符串\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2\">操作 UTF-8 字符串</a></h2><p><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">字符串与切片 - Rust语言圣经(Rust Course)</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class=\"line\">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a><a href=\"https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\">课后练习</a></h2><blockquote>\n<p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p>\n<ul>\n<li><a href=\"https://zh.practice.rs/compound-types/string.html\">字符串</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/compound-types/slice.html\">切片</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md\">习题解答</a></li>\n</ul>\n</li>\n<li><a href=\"https://zh.practice.rs/collections/String.html\">String</a><ul>\n<li><a href=\"https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md\">习题解答</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// 填空并修复错误</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class=\"line\">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class=\"line\">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class=\"line\">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 迭代 s 中的所有字符</span><br><span class=\"line\">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class=\"line\">        if i == 7 &#123;</span><br><span class=\"line\">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let mut s = String::new();</span><br><span class=\"line\">     s.push_str(&quot;hello&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    let v = vec![104, 101, 108, 108, 111];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 将字节数组转换成 String</span><br><span class=\"line\">    let s1 = String::from_utf8(v).unwrap();</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    assert_eq!(s, s1);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 填空</span><br><span class=\"line\">use std::mem;</span><br><span class=\"line\"></span><br><span class=\"line\">fn main() &#123;</span><br><span class=\"line\">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 阻止 String 的数据被自动 drop</span><br><span class=\"line\">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class=\"line\"></span><br><span class=\"line\">    let ptr = story.as_mut_ptr();</span><br><span class=\"line\">    let len = story.len();</span><br><span class=\"line\">    let capacity = story.capacity();</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(16, len);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class=\"line\">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class=\"line\">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert_eq!(*story, s);</span><br><span class=\"line\"></span><br><span class=\"line\">    println!(&quot;Success!&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"2-元组\"><a href=\"#2-元组\" class=\"headerlink\" title=\"2.元组\"></a>2.<a href=\"https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84\">元组</a></h1><p>待续。。。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cllqp267u0000intz0as00ps4","category_id":"cllrnrzue0000fstzfsp6b4y6","_id":"cllrnrzuh0001fstzc0ysbi7b"},{"post_id":"cllrrbfh20000umtzcem707v6","category_id":"cllrrbfhc0001umtzgaad9jxj","_id":"cllrrbfhg0004umtzeif9g8fc"},{"post_id":"cllqhycpx00005rtz8jsrewvj","category_id":"cllrnrzue0000fstzfsp6b4y6","_id":"cllrrbfhj0006umtz7nrk6ezc"},{"post_id":"cllrw3kow0000fetz8xcfgdvu","category_id":"cllrrbfhc0001umtzgaad9jxj","_id":"cllrw3kp90002fetzfm4b6q4e"},{"post_id":"cllt9kx0t0000b4tz6fyxduiz","category_id":"cllrrbfhc0001umtzgaad9jxj","_id":"cllt9kx1a0002b4tz98tg5rfs"},{"post_id":"clluzf6bf00009ptzhnyb8zn6","category_id":"cllrrbfhc0001umtzgaad9jxj","_id":"clluzf6bv00029ptz840v1zb1"}],"PostTag":[{"post_id":"cllqp267u0000intz0as00ps4","tag_id":"cllrn95dt0000dmtzhbahhsl7","_id":"cllrn95dx0001dmtzgmzehuu8"},{"post_id":"cllrrbfh20000umtzcem707v6","tag_id":"cllrrbfhe0002umtzg5ww81ms","_id":"cllrrbfhg0003umtz36av4mhn"},{"post_id":"cllqhycpx00005rtz8jsrewvj","tag_id":"cllrn95dt0000dmtzhbahhsl7","_id":"cllrrbfhj0005umtzen54b04v"},{"post_id":"cllrw3kow0000fetz8xcfgdvu","tag_id":"cllrw3kp50001fetzegpx1t45","_id":"cllrw3kp90003fetz8jziduvo"},{"post_id":"cllrw3kow0000fetz8xcfgdvu","tag_id":"cllt4lgu300005ytz28t9eu50","_id":"cllt4lgu600015ytzcq97cje3"},{"post_id":"cllrrbfh20000umtzcem707v6","tag_id":"cllt4lgu300005ytz28t9eu50","_id":"cllt4lguc00025ytz1ftjcjsq"},{"post_id":"cllt9kx0t0000b4tz6fyxduiz","tag_id":"cllt9kx160001b4tzfj2v4sob","_id":"cllt9kx1b0003b4tz4w9xc6jr"},{"post_id":"cllt9kx0t0000b4tz6fyxduiz","tag_id":"cllt4lgu300005ytz28t9eu50","_id":"cllt9kx1b0004b4tz7ih4305g"},{"post_id":"clluzf6bf00009ptzhnyb8zn6","tag_id":"clluzf6bo00019ptzh7fj9lqu","_id":"clluzf6bv00039ptz46cf9l1k"},{"post_id":"clluzf6bf00009ptzhnyb8zn6","tag_id":"cllt4lgu300005ytz28t9eu50","_id":"clluzf6bw00049ptzawft5dr3"}],"Tag":[{"name":"test","_id":"cllrn95dt0000dmtzhbahhsl7"},{"name":"学习网站","_id":"cllrrbfhe0002umtzg5ww81ms"},{"name":"rust环境搭建","_id":"cllrw3kp50001fetzegpx1t45"},{"name":"rust","_id":"cllt4lgu300005ytz28t9eu50"},{"name":"rust基本类型","_id":"cllt9kx160001b4tzfj2v4sob"},{"name":"rust复合类型","_id":"clluzf6bo00019ptzh7fj9lqu"}]}}