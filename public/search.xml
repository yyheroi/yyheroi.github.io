<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>03-rust复合类型</title>
      <link href="/2023/08/28/03-rust%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/08/28/03-rust%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-字符串和切片"><a href="#1-字符串和切片" class="headerlink" title="1.字符串和切片"></a>1.字符串和切片</h1><h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串?"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2">什么是字符串?</a></h2><p><strong>Rust 中的字符是 Unicode 类型，因此每个字符占据 4 个字节内存空间，但是在字符串中不一样，字符串是 UTF-8 编码，也就是字符串中的字符所占的字节数是变化的(1 - 4)</strong></p><p><code>str</code> 类型是硬编码进可执行文件，也无法被修改，但是 <code>String</code> 则是一个可增长、可改变且具有所有权的 UTF-8 编码字符串，<strong>当 Rust 用户提到字符串时，往往指的就是 <code>String</code> 类型和 <code>&amp;str</code> 字符串切片类型，这两个类型都是 UTF-8 编码</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let a = [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">let slice = &amp;a[1..3];</span><br><span class="line"></span><br><span class="line">assert_eq!(slice, &amp;[2, 3]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="String-与-str-的转换"><a href="#String-与-str-的转换" class="headerlink" title="String 与 &amp;str 的转换"></a><a href="https://course.rs/basic/compound-type/string-slice.html#string-%E4%B8%8E-str-%E7%9A%84%E8%BD%AC%E6%8D%A2">String 与 &amp;str 的转换</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let s = String::from(&quot;hello,world!&quot;);</span><br><span class="line">    say_hello(&amp;s);</span><br><span class="line">    say_hello(&amp;s[..]);</span><br><span class="line">    say_hello(s.as_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn say_hello(s: &amp;str) &#123;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;,s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95">字符串索引</a></h2><h2 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87">字符串切片</a></h2><p>通过索引区间来访问字符串时，<strong>需要格外的小心</strong>，一不注意，就会导致你程序的崩溃！</p><h2 id="操作字符串"><a href="#操作字符串" class="headerlink" title="操作字符串"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2">操作字符串</a></h2><h4 id="追加-Push"><a href="#追加-Push" class="headerlink" title="追加 (Push)"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E8%BF%BD%E5%8A%A0-push">追加 (Push)</a></h4><h4 id="插入-Insert"><a href="#插入-Insert" class="headerlink" title="插入 (Insert)"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E6%8F%92%E5%85%A5-insert">插入 (Insert)</a></h4><h4 id="替换-Replace"><a href="#替换-Replace" class="headerlink" title="替换 (Replace)"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E6%9B%BF%E6%8D%A2-replace">替换 (Replace)</a></h4><h4 id="删除-Delete"><a href="#删除-Delete" class="headerlink" title="删除 (Delete)"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E5%88%A0%E9%99%A4-delete">删除 (Delete)</a></h4><h4 id="连接-Concatenate"><a href="#连接-Concatenate" class="headerlink" title="连接 (Concatenate)"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E8%BF%9E%E6%8E%A5-concatenate">连接 (Concatenate)</a></h4><h2 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89">字符串转义</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, &quot;hello \\x52\\x75\\x73\\x74&quot;);</span><br><span class="line">    let raw_str = r&quot;Escapes don&#x27;t work here: \x3F \u&#123;211D&#125;&quot;;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, raw_str);</span><br><span class="line"></span><br><span class="line">    // 如果字符串包含双引号，可以在开头和结尾加 #</span><br><span class="line">    let quotes = r#&quot;And then I said: &quot;There is no escape!&quot;&quot;#;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, quotes);</span><br><span class="line"></span><br><span class="line">    // 如果还是有歧义，可以继续增加，没有限制</span><br><span class="line">    let longer_delimiter = r###&quot;A string with &quot;# in it. And even &quot;##!&quot;###;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, longer_delimiter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="操作-UTF-8-字符串"><a href="#操作-UTF-8-字符串" class="headerlink" title="操作 UTF-8 字符串"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C-utf-8-%E5%AD%97%E7%AC%A6%E4%B8%B2">操作 UTF-8 字符串</a></h2><p><a href="https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">字符串与切片 - Rust语言圣经(Rust Course)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for c in &quot;中国人&quot;.chars() &#123;</span><br><span class="line">    println!(&quot;&#123;&#125;&quot;, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a><a href="https://course.rs/basic/compound-type/string-slice.html#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0">课后练习</a></h2><blockquote><p>Rust By Practice，支持代码在线编辑和运行，并提供详细的习题解答。</p><ul><li><a href="https://zh.practice.rs/compound-types/string.html">字符串</a><ul><li><a href="https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/string.md">习题解答</a></li></ul></li><li><a href="https://zh.practice.rs/compound-types/slice.html">切片</a><ul><li><a href="https://github.com/sunface/rust-by-practice/blob/master/solutions/compound-types/slice.md">习题解答</a></li></ul></li><li><a href="https://zh.practice.rs/collections/String.html">String</a><ul><li><a href="https://github.com/sunface/rust-by-practice/blob/master/solutions/collections/String.md">习题解答</a></li></ul></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 填空并修复错误</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let s = String::from(&quot;hello, 世界&quot;);</span><br><span class="line">    let slice1 = &amp;s[0..1]; //提示: `h` 在 UTF-8 编码中只占用 1 个字节</span><br><span class="line">    assert_eq!(slice1, &quot;h&quot;);</span><br><span class="line"></span><br><span class="line">    let slice2 = &amp;s[7..10];// 提示: `世` 在 UTF-8 编码中占用 3 个字节</span><br><span class="line">    assert_eq!(slice2, &quot;世&quot;);</span><br><span class="line">    </span><br><span class="line">    // 迭代 s 中的所有字符</span><br><span class="line">    for (i, c) in s.chars().enumerate() &#123;</span><br><span class="line">        if i == 7 &#123;</span><br><span class="line">            assert_eq!(c, &#x27;世&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println!(&quot;Success!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 填空</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let mut s = String::new();</span><br><span class="line">     s.push_str(&quot;hello&quot;);</span><br><span class="line"></span><br><span class="line">    let v = vec![104, 101, 108, 108, 111];</span><br><span class="line"></span><br><span class="line">    // 将字节数组转换成 String</span><br><span class="line">    let s1 = String::from_utf8(v).unwrap();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    assert_eq!(s, s1);</span><br><span class="line"></span><br><span class="line">    println!(&quot;Success!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 填空</span><br><span class="line">use std::mem;</span><br><span class="line"></span><br><span class="line">fn main() &#123;</span><br><span class="line">    let story = String::from(&quot;Rust By Practice&quot;);</span><br><span class="line"></span><br><span class="line">    // 阻止 String 的数据被自动 drop</span><br><span class="line">    let mut story = mem::ManuallyDrop::new(story);</span><br><span class="line"></span><br><span class="line">    let ptr = story.as_mut_ptr();</span><br><span class="line">    let len = story.len();</span><br><span class="line">    let capacity = story.capacity();</span><br><span class="line"></span><br><span class="line">    assert_eq!(16, len);</span><br><span class="line"></span><br><span class="line">    // 我们可以基于 ptr 指针、长度和容量来重新构建 String. </span><br><span class="line">    // 这种操作必须标记为 unsafe，因为我们需要自己来确保这里的操作是安全的</span><br><span class="line">    let s = unsafe &#123; String::from_raw_parts(ptr, len, capacity) &#125;;</span><br><span class="line"></span><br><span class="line">    assert_eq!(*story, s);</span><br><span class="line"></span><br><span class="line">    println!(&quot;Success!&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-元组"><a href="#2-元组" class="headerlink" title="2.元组"></a>2.<a href="https://course.rs/basic/compound-type/tuple.html#%E5%85%83%E7%BB%84">元组</a></h1><p>待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> rust复合类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-rust基本类型</title>
      <link href="/2023/08/26/02-rust%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/08/26/02-rust%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Rust基本数据类型"><a href="#Rust基本数据类型" class="headerlink" title="Rust基本数据类型"></a>Rust基本数据类型</h1><p>Rust 每个值都有其确切的数据类型，总的来说可以分为两类：基本类型和复合类型。 基本类型意味着它们往往是一个最小化原子类型，无法解构为其它类型(一般意义上来说)，由以下组成：</p><ul><li>数值类型: 有符号整数 (<code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>)、 无符号整数 (<code>u8</code>, <code>u16</code>, <code>u32</code>, <code>u64</code>, <code>usize</code>) 、浮点数 (<code>f32</code>, <code>f64</code>)、以及有理数、复数</li><li>字符串：字符串字面量和字符串切片 <code>&amp;str</code></li><li>布尔类型： <code>true</code>和<code>false</code></li><li>字符类型: 表示单个 Unicode 字符，存储为 4 个字节</li><li>单元类型: 即 <code>()</code> ，其唯一的值也是 <code>()</code></li></ul><h2 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1.数值类型"></a>1.数值类型</h2><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8 位</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16 位</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32 位</td><td><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64 位</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128 位</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>视架构而定</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><p>整形字面量可以用下表的形式书写：</p><table><thead><tr><th>数字字面量</th><th>示例</th></tr></thead><tbody><tr><td>十进制</td><td><code>98_222</code></td></tr><tr><td>十六进制</td><td><code>0xff</code></td></tr><tr><td>八进制</td><td><code>0o77</code></td></tr><tr><td>二进制</td><td><code>0b1111_0000</code></td></tr><tr><td>字节 (仅限于 <code>u8</code>)</td><td><code>b&#39;A&#39;</code></td></tr></tbody></table><h2 id="2-浮点类型"><a href="#2-浮点类型" class="headerlink" title="2.浮点类型"></a>2.<a href="https://course.rs/basic/base-type/numbers.html#%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B">浮点类型</a></h2><p><strong>浮点类型数字</strong> 是带有小数点的数字，在 Rust 中浮点类型数字也有两种基本类型： <code>f32</code> 和 <code>f64</code>，分别为 32 位和 64 位大小。默认浮点类型是 <code>f64</code>，在现代的 CPU 中它的速度与 <code>f32</code> 几乎相同，但精度更高。</p><p>下面是一个演示浮点数的示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">2.0</span>; <span class="comment">// f64</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">f32</span> = <span class="number">3.0</span>; <span class="comment">// f32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-序列-Range"><a href="#3-序列-Range" class="headerlink" title="3.序列(Range)"></a>3.<a href="https://course.rs/basic/base-type/numbers.html#%E5%BA%8F%E5%88%97range">序列(Range)</a></h2><p>Rust 提供了一个非常简洁的方式，用来生成连续的数值，例如 <strong><code>1..5</code>，生成从 1 到 4 的连续数字，不包含 5</strong> ；<code>1..=5</code>，生成从 1 到 5 的连续数字，包含 5，它的用途很简单，常常用于循环中：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..=<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终程序输出:</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p><strong>序列只允许用于数字或字符类型</strong>，原因是：它们可以连续，同时编译器在编译期可以检查该序列是否为空，字符和数字值是 Rust 中仅有的可以用于判断是否为空的类型。如下是一个使用字符类型序列的例子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-有理数和复数"><a href="#4-有理数和复数" class="headerlink" title="4.有理数和复数"></a>4.<a href="https://course.rs/basic/base-type/numbers.html#%E6%9C%89%E7%90%86%E6%95%B0%E5%92%8C%E5%A4%8D%E6%95%B0">有理数和复数</a></h2><p>Rust 的标准库相比其它语言，准入门槛较高，因此有理数和复数并未包含在标准库中：</p><ul><li>有理数和复数</li><li>任意大小的整数和任意精度的浮点数</li><li>固定精度的十进制小数，常用于货币相关的场景</li></ul><p>好在社区已经开发出高质量的 Rust 数值库：<a href="https://crates.io/crates/num">num</a>。</p><p>按照以下步骤来引入 <code>num</code> 库：</p><ol><li>创建新工程 <code>cargo new complex-num &amp;&amp; cd complex-num</code></li><li>在 <code>Cargo.toml</code> 中的 <code>[dependencies]</code> 下添加一行 <code>num = &quot;0.4.0&quot;</code></li><li>将 <code>src/main.rs</code> 文件中的 <code>main</code> 函数替换为下面的代码</li><li>运行 <code>cargo run</code></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> num::complex::Complex;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">a</span> = Complex &#123; re: <span class="number">2.1</span>, im: -<span class="number">1.2</span> &#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">b</span> = Complex::<span class="title function_ invoke__">new</span>(<span class="number">11.1</span>, <span class="number">22.2</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">result</span> = a + b;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; + &#123;&#125;i&quot;</span>, result.re, result.im)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://course.rs/basic/base-type/numbers.html#%E6%80%BB%E7%BB%93">总结</a></h4><p>之前提到了过 Rust 的数值类型和运算跟其他语言较为相似，但是实际上，除了语法上的不同之外，还是存在一些差异点：</p><ul><li><strong>Rust 拥有相当多的数值类型</strong>. 因此你需要熟悉这些类型所占用的字节数，这样就知道该类型允许的大小范围以及你选择的类型是否能表达负数</li><li><strong>类型转换必须是显式的</strong>. Rust 永远也不会偷偷把你的 16bit 整数转换成 32bit 整数</li><li><strong>Rust 的数值上可以使用方法</strong>. 例如你可以用以下方法来将 <code>13.14</code> 取整：<code>13.14_f32.round()</code>，在这里我们使用了类型后缀，因为编译器需要知道 <code>13.14</code> 的具体类型</li></ul><h2 id="5-函数要点"><a href="#5-函数要点" class="headerlink" title="5.函数要点"></a>5.<a href="https://course.rs/basic/base-type/function.html#%E5%87%BD%E6%95%B0%E8%A6%81%E7%82%B9">函数要点</a></h2><ul><li>函数名和变量名使用<a href="https://course.rs/practice/naming.html">蛇形命名法(snake case)</a>，例如 <code>fn add_two() -&gt; &#123;&#125;</code></li><li>函数的位置可以随便放，Rust 不关心我们在哪里定义了函数，只要有定义即可</li><li>每个函数参数都需要标注类型</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn add(i: i32, j: i32) -&gt; i32 &#123;</span><br><span class="line">   i + j</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-54b3a6d435d2482243edc4be9ab98153_1440w.png" alt="img"></p><h3 id="返回值："><a href="#返回值：" class="headerlink" title="返回值："></a>返回值：</h3><p>​<a href="https://course.rs/basic/base-type/function.html#%E6%97%A0%E8%BF%94%E5%9B%9E%E5%80%BC">无返回值<code>()</code></a></p><ul><li>函数没有返回值，那么返回一个 <code>()</code></li><li>通过 <code>;</code> 结尾的表达式返回一个 <code>()</code></li></ul><p>​    <a href="https://course.rs/basic/base-type/function.html#%E6%B0%B8%E4%B8%8D%E8%BF%94%E5%9B%9E%E7%9A%84%E5%8F%91%E6%95%A3%E5%87%BD%E6%95%B0-">永不返回的发散函数 <code>!</code></a></p><p>​当用 <code>!</code> 作函数返回类型的时候，表示该函数永不返回( diverge function )，特别的，这种语法往往用做会导致程序崩溃的函数：</p><h2 id="6-练习"><a href="#6-练习" class="headerlink" title="6.练习"></a>6.练习</h2><p><a href="https://zh.practice.rs/basic-types/numbers.html">数值类型 - Rust By Practice( Rust 练习实践 )</a></p><figure class="highlight plaintext"><figcaption><span>填空</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let v: u16 = 38_u8 as u16; //从8位无符号整数（u8）到16位无符号整数（u16）的类型转换</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 修改 `assert_eq!` 让代码工作</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let x = 5;//i32</span><br><span class="line">    assert_eq!(&quot;i32&quot;.to_string(), type_of(&amp;x)); //</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 以下函数可以获取传入参数的类型，并返回类型的字符串形式，例如  &quot;i8&quot;, &quot;u8&quot;, &quot;i32&quot;, &quot;u32&quot;</span><br><span class="line">fn type_of&lt;T&gt;(_: &amp;T) -&gt; String &#123;</span><br><span class="line">    format!(&quot;&#123;&#125;&quot;, std::any::type_name::&lt;T&gt;())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    assert_eq!(i8::MAX, 127); </span><br><span class="line">    assert_eq!(u8::MAX, 255); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 解决代码中的错误和 `panic`</span><br><span class="line">fn main() &#123;</span><br><span class="line">   let v1 = 251_u8.wrapping_add(8);</span><br><span class="line">   let v2 = match u8::checked_add(251, 8) &#123;</span><br><span class="line">        Some(value) =&gt; value,</span><br><span class="line">        None =&gt; &#123;</span><br><span class="line">            println!(&quot;Overflow occurred.&quot;);</span><br><span class="line">            0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">   println!(&quot;&#123;&#125;,&#123;&#125;&quot;,v1,v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let x = 1_000.000_1; // f64</span><br><span class="line">    let y: f32 = 0.12; // f32</span><br><span class="line">    let z = 0.01_f64; // f64</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#使用两种方法来让下面代码工作</span><br><span class="line">fn <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    assert!(<span class="number">0.1</span>+<span class="number">0.2</span>==<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"> fn <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">     assert!(<span class="number">0.1</span>_f32+<span class="number">0.2</span>_f32==<span class="number">0.3</span>_f32);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//降低精度</span></span><br><span class="line">fn <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    let eps=<span class="number">0.001</span>;</span><br><span class="line">    assert!((<span class="number">0.1</span>_f64+ <span class="number">0.2</span> - <span class="number">0.3</span>).<span class="built_in">abs</span>() &lt; eps);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置允许误差</span></span><br></pre></td></tr></table></figure><h3 id="序列Range"><a href="#序列Range" class="headerlink" title="序列Range"></a><a href="https://zh.practice.rs/basic-types/numbers.html#%E5%BA%8F%E5%88%97range">序列Range</a></h3><ol><li>🌟🌟 两个目标: 1. 修改 <code>assert!</code> 让它工作 2. 让 <code>println!</code> 输出: 97 - 122</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">    let mut sum = 0;</span><br><span class="line">    for i in -3..2 &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert!(sum == -5);</span><br><span class="line"></span><br><span class="line">    for c in &#x27;a&#x27;..=&#x27;z&#x27; &#123;</span><br><span class="line">        println!(&quot;&#123;&#125;&quot;,c as u8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>填空</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use std::ops::&#123;Range, RangeInclusive&#125;;</span><br><span class="line">fn main() &#123;</span><br><span class="line">    assert_eq!((1..5), Range&#123; start: 1, end: 5 &#125;);</span><br><span class="line">    assert_eq!((1..=5), RangeInclusive::new(1, 5));</span><br><span class="line">&#125;</span><br><span class="line">///RangeInclusive::new(1, 5) 创建的是一个闭区间，表示从 1 到 5（包括 5）的范围。若 (1..5) 创建的是一个半开区间，表示从 1 到 5（不包括 5）的范围。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use std::mem::size_of_val;</span><br><span class="line">fn main() &#123;</span><br><span class="line">    let unit: () = ();</span><br><span class="line">    assert!(size_of_val(&amp;unit) == 0);//单元类型占用的内存大小 0</span><br><span class="line"></span><br><span class="line">    println!(&quot;Success!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语句与表达式"><a href="#语句与表达式" class="headerlink" title="语句与表达式"></a><a href="https://zh.practice.rs/basic-types/statements-expressions.html#%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F">语句与表达式</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">fn main() &#123;</span><br><span class="line">   let v = &#123;</span><br><span class="line">       let mut x = 1;</span><br><span class="line">       x += 2// 没有返回值  </span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   assert_eq!(v, 3);</span><br><span class="line">&#125;</span><br><span class="line">正确的做法</span><br><span class="line">fn main() &#123;</span><br><span class="line">   let v = &#123;</span><br><span class="line">       let mut x = 1;</span><br><span class="line">       x += 2;</span><br><span class="line">       x</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   assert_eq!(v, 3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let z = &#123;</span><br><span class="line">// 分号让表达式变成了语句，因此返回的不再是表达式 `2 * x` 的值，而是语句的值 `()`</span><br><span class="line">2 * x;</span><br><span class="line">&#125;;</span><br><span class="line">fn main() &#123;</span><br><span class="line">   let v = &#123; let x = 3; x&#125;;</span><br><span class="line"></span><br><span class="line">   assert!(v == 3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a href="https://zh.practice.rs/basic-types/functions.html#%E5%87%BD%E6%95%B0">函数</a></h3><h2 id="7-总结："><a href="#7-总结：" class="headerlink" title="7.总结："></a>7.总结：</h2><p>1.<code>let x = 2.0; // f64</code></p><p>2.比较浮点数<code>(0.1_f64 + 0.2 - 0.3).abs() &lt; 0.00001</code></p><p>3.<code>编译器会进行自动推导，给予twenty i32的类型  let twenty = 20;</code></p><p>4.按照补码循环溢出规则处理<code>et b = 255_u8.wrapping_add(20);  // 19</code>  <code>在 u8 的情况下，256 变成 0，257 变成 1，</code></p><p>5.<code>(1..5)  表示从 1 到 5（不包括 5）半开区间的范围</code></p><p>6.<code>(1..=5)  表示从 1 到 5（包括 5）半闭区间的范围</code></p><p>6.<strong>表达式不能包含分号</strong>。<code>表达式总要返回值</code></p><p>7.返回值为！的表达式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loop &#123;&#125;  </span><br><span class="line">panic!(&quot;Never return&quot;);  </span><br><span class="line">todo!();  </span><br><span class="line">unimplemented!();  //未实现的占位符函数</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
            <tag> rust基本类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-rust环境搭建</title>
      <link href="/2023/08/26/01-rust%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/08/26/01-rust%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>当前环境：win11+wsl+vscode</p><h2 id="1-安装rustup"><a href="#1-安装rustup" class="headerlink" title="1.安装rustup"></a>1.安装rustup</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --proto &#x27;=https&#x27; --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">rustc -V </span><br><span class="line">cargo -V</span><br></pre></td></tr></table></figure><h2 id="2-安装vsocode插件"><a href="#2-安装vsocode插件" class="headerlink" title="2.安装vsocode插件"></a>2.安装vsocode插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rust-analyzer ，Rust 语言插件</span><br><span class="line">Even Better TOML，支持 .toml 文件完整特性</span><br><span class="line">Error Lens, 更好的获得错误展示</span><br><span class="line">One Dark Pro, 非常好看的 VSCode 主题</span><br><span class="line">CodeLLDB, Debugger 程序</span><br></pre></td></tr></table></figure><h2 id="3-运行hello-world"><a href="#3-运行hello-world" class="headerlink" title="3.运行hello world!"></a>3.运行hello world!</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cargo new world_hello</span><br><span class="line">cd world_hello</span><br><span class="line">cargo run</span><br><span class="line">#编译</span><br><span class="line">cargo build</span><br><span class="line">#运行</span><br><span class="line">./target/debug/world_hello</span><br><span class="line">Hello, world!</span><br><span class="line">#快速的检查一下代码能否编译通过</span><br><span class="line">cargo check</span><br></pre></td></tr></table></figure><h2 id="4-修改-Rust-的下载镜像为国内的镜像地址"><a href="#4-修改-Rust-的下载镜像为国内的镜像地址" class="headerlink" title="4.修改 Rust 的下载镜像为国内的镜像地址"></a>4.修改 Rust 的下载镜像为国内的镜像地址</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#在 $HOME/.cargo/config.toml 添加以下内容：</span><br><span class="line"></span><br><span class="line">[source.crates-io]</span><br><span class="line">replace-with = &#x27;ustc&#x27;</span><br><span class="line"></span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust环境搭建 </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00-rust学习网站</title>
      <link href="/2023/08/26/00-rust%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/2023/08/26/00-rust%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><p><a href="https://github.com/sunface/rust-course">GitHub-rust</a></p><p><a href="https://course.rs/about-book.html">关于本书 - Rust语言圣经(Rust Course)</a></p>]]></content>
      
      
      <categories>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习网站 </tag>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+hexo 博客搭建</title>
      <link href="/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/08/25/github+hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>@[toc]<br>环境：win11+wsl</p><h2 id="1-安装Node-js、Git和Hexo"><a href="#1-安装Node-js、Git和Hexo" class="headerlink" title="1.安装Node.js、Git和Hexo"></a>1.安装Node.js、Git和Hexo</h2><p>打开终端安装以下软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install git</span><br><span class="line"></span><br><span class="line">sudo apt install nodejs</span><br><span class="line">sudo apt install npm        #Node.js 的包管理器</span><br><span class="line">sudo npm install -g hexo-cli        #安装hexo</span><br></pre></td></tr></table></figure><h2 id="2-创建-GitHub-仓库并配置ssh"><a href="#2-创建-GitHub-仓库并配置ssh" class="headerlink" title="2.创建 GitHub 仓库并配置ssh"></a>2.创建 GitHub 仓库并配置ssh</h2><p>登录你的 GitHub 帐号，并创建一个新的仓库，仓库名是 <code>&lt;username&gt;.github.io</code>，其中 <code>&lt;username&gt;</code> 是你的 GitHub 用户名。将该仓库设置为公开仓库。<br>设置ssh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br><span class="line">cat ~/.ssh/id_rsa.pub  #将里面的内容复制到 github -&gt;settings -&gt;SSH and GPC keys -&gt;SSH keys -&gt;New SSH key中</span><br><span class="line">ssh -T git@github.com  #输入yes之后，行末尾会显示你的用户名（绑定成功邮箱会收到邮件提醒）</span><br><span class="line">#接着在本地绑定与Github的用户名和邮箱（git）</span><br><span class="line">git config --global user.name &quot;&lt;username&gt;&quot;    #自己的用户名</span><br><span class="line">git config --global user.email &#x27;xxx@xxx.com&#x27;  #自己的邮箱</span><br></pre></td></tr></table></figure><h2 id="3-初始化Hexo"><a href="#3-初始化Hexo" class="headerlink" title="3.初始化Hexo"></a>3.初始化Hexo</h2><p>创建一个新的文件夹，用于存储你的博客项目。<br>在终端中，进入该文件夹，并运行以下命令来初始化 Hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir myblog</span><br><span class="line">hexo init    </span><br><span class="line">#或者直接一步到位 </span><br><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><h2 id="4-配置Hexo"><a href="#4-配置Hexo" class="headerlink" title="4.配置Hexo"></a>4.配置Hexo</h2><ul><li>进入你的 Hexo 项目文件夹，找到 _config.yml 文件，使用文本编辑器打开它。</li><li>在 _config.yml 文件中，配置你的博客设置，例如标题、描述、作者等。</li><li>根据需要，你还可以配置主题、插件和其他 Hexo 选项。<br>编辑_config.yml文件，添加如下内容 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">        type: git</span><br><span class="line">        repo: git@github.com: &lt;username&gt;/ &lt;username&gt;.github.io.git  #&lt;username&gt;为自己的用户名</span><br><span class="line">        branch: main</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git    #安装 hexo-deployer-git 插件 将部署过程自动化</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-创建博客内容"><a href="#5-创建博客内容" class="headerlink" title="5.创建博客内容"></a>5.创建博客内容</h2><p>在终端中，运行以下命令来创建新的博客文章：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;My First Post&quot;</span><br></pre></td></tr></table></figure><p>这将在 Hexo 项目的 source&#x2F;_posts 目录下创建一个新的 Markdown 文件，用于编写你的第一篇博客文章。</p><h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo s    # 预览</span><br><span class="line">#Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br><span class="line">#用浏览器打开 http://localhost:4000/</span><br><span class="line">hexo g #生成静态网站文件</span><br><span class="line">hexo d #将生成的静态网站文件部署到github</span><br></pre></td></tr></table></figure><h2 id="7-查看"><a href="#7-查看" class="headerlink" title="7.查看"></a>7.查看</h2><p>浏览器打开<code>&lt;username&gt;.github.io</code>即可查看</p><h2 id="8-参考："><a href="#8-参考：" class="headerlink" title="8.参考："></a>8.参考：</h2><p><a href="https://blog.csdn.net/qq_62928039/article/details/130248518">https://blog.csdn.net/qq_62928039/article/details/130248518</a></p><h2 id="9-选择主题："><a href="#9-选择主题：" class="headerlink" title="9.选择主题："></a>9.选择主题：</h2><p><a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br><a href="https://github.com/yelog/hexo-theme-3-hexo">https://github.com/yelog/hexo-theme-3-hexo</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#在hexo根目录下</span><br><span class="line">git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo</span><br><span class="line">#修改hexo根目录的_config.yml，如下</span><br><span class="line">theme: 3-hexo</span><br><span class="line">#博客配置</span><br><span class="line">http://yelog.org/2017/03/23/3-hexo-instruction/</span><br></pre></td></tr></table></figure><p>最终效果：<br><a href="https://yyheroi.github.io/">https://yyheroi.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/25/hello-world/"/>
      <url>/2023/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
